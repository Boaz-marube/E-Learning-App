{"instruction": "What is the process for Using React for an entire subroute of your existing website in a React component?", "input": "", "output": "Let\u2019s say you have an existing web app at example.com built with another server technology (like Rails), and you want to implement all routes starting with example.com/some-app/ fully with React.\n\nHere\u2019s how we recommend to set it up:\n\n1. Build the React part of your app using one of the React-based frameworks .\n2. Specify /some-app as the base path in your framework\u2019s configuration (here\u2019s how: Next.js , Gatsby ).\n3. Configure your server or a proxy so that all requests under /some-app/ are handled by your React app.\n\nThis ensures the React part of your app can benefit from the best practices baked into those frameworks.\n\nMany React-based frameworks are full-stack and let your React app take advantage of the server. However, you can use the same approach even if you can\u2019t or don\u2019t want to run JavaScript on the server. In that case, serve the HTML/CSS/JS export ( next export output for Next.js, default for Gatsby) at /some-app/ instead.", "source": "https://react.dev/learn/add-react-to-an-existing-project", "category": "Add React to an Existing Project"}
{"instruction": "What is Using React for a part of your existing page in React and how does it work?", "input": "", "output": "Let\u2019s say you have an existing page built with another technology (either a server one like Rails, or a client one like Backbone), and you want to render interactive React components somewhere on that page. That\u2019s a common way to integrate React\u2014in fact, it\u2019s how most React usage looked at Meta for many years!\n\nYou can do this in two steps:\n\n1. Set up a JavaScript environment that lets you use the JSX syntax , split your code into modules with the import / export syntax, and use packages (for example, React) from the npm package registry.\n2. Render your React components where you want to see them on the page.\n\nThe exact approach depends on your existing page setup, so let\u2019s walk through some details.\n\n\n### Step 1: Set up a modular JavaScript environment\n\n\nA modular JavaScript environment lets you write your React components in individual files, as opposed to writing all of your code in a single file. It also lets you use all the wonderful packages published by other developers on the npm registry\u2014including React itself! How you do this depends on your existing setup:\n\n* If your app is already split into files that use import statements, try to use the setup you already have. Check whether writing <div /> in your JS code causes a syntax error. If it causes a syntax error, you might need to transform your JavaScript code with Babel , and enable the Babel React preset to use JSX.\n* If your app doesn\u2019t have an existing setup for compiling JavaScript modules, set it up with Vite . The Vite community maintains many integrations with backend frameworks , including Rails, Django, and Laravel. If your backend framework is not listed, follow this guide to manually integrate Vite builds with your backend.\n\nIf your app is already split into files that use import statements, try to use the setup you already have. Check whether writing <div /> in your JS code causes a syntax error. If it causes a syntax error, you might need to transform your JavaScript code with Babel , and enable the Babel React preset to use JSX.\n\nIf your app doesn\u2019t have an existing setup for compiling JavaScript modules, set it up with Vite . The Vite community maintains many integrations with backend frameworks , including Rails, Django, and Laravel. If your backend framework is not listed, follow this guide to manually integrate Vite builds with your backend.\n\nTo check whether your setup works, run this command in your project folder:\n\nThen add these lines of code at the top of your main JavaScript file (it might be called index.js or main.js ):\n\n\n```javascript\nimport{createRoot}from'react-dom/client';// Clear the existing HTML contentdocument.body.innerHTML='<div id=\"app\"></div>';// Render your React component insteadconstroot=createRoot(document.getElementById('app'));root.render(<h1>Hello, world</h1>);\n```\n\n\nIf the entire content of your page was replaced by a \u201cHello, world!\u201d, everything worked! Keep reading.\n\n\n### Note\n\n\nIntegrating a modular JavaScript environment into an existing project for the first time can feel intimidating, but it\u2019s worth it! If you get stuck, try our community resources or the Vite Chat .\n\n\n### Step 2: Render React components anywhere on the page\n\n\nIn the previous step, you put this code at the top of your main file:\n\n\n```javascript\nimport{createRoot}from'react-dom/client';// Clear the existing HTML contentdocument.body.innerHTML='<div id=\"app\"></div>';// Render your React component insteadconstroot=createRoot(document.getElementById('app'));root.render(<h1>Hello, world</h1>);\n```\n\n\nOf course, you don\u2019t actually want to clear the existing HTML content!\n\nDelete this code.\n\nInstead, you probably want to render your React components in specific places in your HTML. Open your HTML page (or the server templates that generate it) and add a unique id attribute to any tag, for example:\n\n\n```javascript\n<!-- ... somewhere in your html ... --><navid=\"navigation\"></nav><!-- ... more html ... -->\n```\n\n\nThis lets you find that HTML element with document.getElementById and pass it to createRoot so that you can render your own React component inside:\n\n\n```javascript\nimport{createRoot}from'react-dom/client';functionNavigationBar(){// TODO: Actually implement a navigation barreturn<h1>Hello from React!</h1>;}constdomNode=document.getElementById('navigation');constroot=createRoot(domNode);root.render(<NavigationBar/>);\n```\n\n\nNotice how the original HTML content from index.html is preserved, but your own NavigationBar React component now appears inside the <nav id=\"navigation\"> from your HTML. Read the createRoot usage documentation to learn more about rendering React components inside an existing HTML page.\n\nWhen you adopt React in an existing project, it\u2019s common to start with small interactive components (like buttons), and then gradually keep \u201cmoving upwards\u201d until eventually your entire page is built with React. If you ever reach that point, we recommend migrating to a React framework right after to get the most out of React.", "source": "https://react.dev/learn/add-react-to-an-existing-project", "category": "Add React to an Existing Project"}
{"instruction": "Show me a code example of Using React for a part of your existing page in React.", "input": "", "output": "Let\u2019s say you have an existing page built with another technology (either a server one like Rails, or a client one like Backbone), and you want to render interactive React components somewhere on that page. That\u2019s a common way to integrate React\u2014in fact, it\u2019s how most React usage looked at Meta for many years!\n\nYou can do this in two steps:\n\n1. Set up a JavaScript environment that lets you use the JSX syntax , split your code into modules with the import / export syntax, and use packages (for example, React) from the npm package registry.\n2. Render your React components where you want to see them on the page.\n\nThe exact approach depends on your existing page setup, so let\u2019s walk through some details.\n\n\n### Step 1: Set up a modular JavaScript environment\n\n\nA modular JavaScript environment lets you write your React components in individual files, as opposed to writing all of your code in a single file. It also lets you use all the wonderful packages published by other developers on the npm registry\u2014including React itself! How you do this depends on your existing setup:\n\n* If your app is already split into files that use import statements, try to use the setup you already have. Check whether writing <div /> in your JS code causes a syntax error. If it causes a syntax error, you might need to transform your JavaScript code with Babel , and enable the Babel React preset to use JSX.\n* If your app doesn\u2019t have an existing setup for compiling JavaScript modules, set it up with Vite . The Vite community maintains many integrations with backend frameworks , including Rails, Django, and Laravel. If your backend framework is not listed, follow this guide to manually integrate Vite builds with your backend.\n\nIf your app is already split into files that use import statements, try to use the setup you already have. Check whether writing <div /> in your JS code causes a syntax error. If it causes a syntax error, you might need to transform your JavaScript code with Babel , and enable the Babel React preset to use JSX.\n\nIf your app doesn\u2019t have an existing setup for compiling JavaScript modules, set it up with Vite . The Vite community maintains many integrations with backend frameworks , including Rails, Django, and Laravel. If your backend framework is not listed, follow this guide to manually integrate Vite builds with your backend.\n\nTo check whether your setup works, run this command in your project folder:\n\nThen add these lines of code at the top of your main JavaScript file (it might be called index.js or main.js ):\n\n\n```javascript\nimport{createRoot}from'react-dom/client';// Clear the existing HTML contentdocument.body.innerHTML='<div id=\"app\"></div>';// Render your React component insteadconstroot=createRoot(document.getElementById('app'));root.render(<h1>Hello, world</h1>);\n```\n\n\nIf the entire content of your page was replaced by a \u201cHello, world!\u201d, everything worked! Keep reading.\n\n\n### Note\n\n\nIntegrating a modular JavaScript environment into an existing project for the first time can feel intimidating, but it\u2019s worth it! If you get stuck, try our community resources or the Vite Chat .\n\n\n### Step 2: Render React components anywhere on the page\n\n\nIn the previous step, you put this code at the top of your main file:\n\n\n```javascript\nimport{createRoot}from'react-dom/client';// Clear the existing HTML contentdocument.body.innerHTML='<div id=\"app\"></div>';// Render your React component insteadconstroot=createRoot(document.getElementById('app'));root.render(<h1>Hello, world</h1>);\n```\n\n\nOf course, you don\u2019t actually want to clear the existing HTML content!\n\nDelete this code.\n\nInstead, you probably want to render your React components in specific places in your HTML. Open your HTML page (or the server templates that generate it) and add a unique id attribute to any tag, for example:\n\n\n```javascript\n<!-- ... somewhere in your html ... --><navid=\"navigation\"></nav><!-- ... more html ... -->\n```\n\n\nThis lets you find that HTML element with document.getElementById and pass it to createRoot so that you can render your own React component inside:\n\n\n```javascript\nimport{createRoot}from'react-dom/client';functionNavigationBar(){// TODO: Actually implement a navigation barreturn<h1>Hello from React!</h1>;}constdomNode=document.getElementById('navigation');constroot=createRoot(domNode);root.render(<NavigationBar/>);\n```\n\n\nNotice how the original HTML content from index.html is preserved, but your own NavigationBar React component now appears inside the <nav id=\"navigation\"> from your HTML. Read the createRoot usage documentation to learn more about rendering React components inside an existing HTML page.\n\nWhen you adopt React in an existing project, it\u2019s common to start with small interactive components (like buttons), and then gradually keep \u201cmoving upwards\u201d until eventually your entire page is built with React. If you ever reach that point, we recommend migrating to a React framework right after to get the most out of React.", "source": "https://react.dev/learn/add-react-to-an-existing-project", "category": "Add React to an Existing Project"}
{"instruction": "Explain the concept of Using React Native in an existing native mobile app in React.", "input": "", "output": "React Native can also be integrated into existing native apps incrementally. If you have an existing native app for Android (Java or Kotlin) or iOS (Objective-C or Swift), follow this guide to add a React Native screen to it.", "source": "https://react.dev/learn/add-react-to-an-existing-project", "category": "Add React to an Existing Project"}
{"instruction": "What is the process for Responding to events in a React component?", "input": "", "output": "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to user interactions like clicking, hovering, focusing on form inputs, and so on.\n\nBuilt-in components like <button> only support built-in browser events like onClick . However, you can also create your own components, and give their event handler props any application-specific names that you like.\n\n\n```javascript\nexportdefaultfunctionApp(){return(<ToolbaronPlayMovie={()=>alert('Playing!')}onUploadImage={()=>alert('Uploading!')}/>);}functionToolbar({onPlayMovie,onUploadImage}){return(<div><ButtononClick={onPlayMovie}>Play Movie</Button><ButtononClick={onUploadImage}>Upload Image</Button></div>);}functionButton({onClick,children}){return(<buttononClick={onClick}>{children}</button>);}\n```\n", "source": "https://react.dev/learn/adding-interactivity", "category": "Adding Interactivity"}
{"instruction": "Show me a code example of Responding to events in React.", "input": "", "output": "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to user interactions like clicking, hovering, focusing on form inputs, and so on.\n\nBuilt-in components like <button> only support built-in browser events like onClick . However, you can also create your own components, and give their event handler props any application-specific names that you like.\n\n\n```javascript\nexportdefaultfunctionApp(){return(<ToolbaronPlayMovie={()=>alert('Playing!')}onUploadImage={()=>alert('Uploading!')}/>);}functionToolbar({onPlayMovie,onUploadImage}){return(<div><ButtononClick={onPlayMovie}>Play Movie</Button><ButtononClick={onUploadImage}>Upload Image</Button></div>);}functionButton({onClick,children}){return(<buttononClick={onClick}>{children}</button>);}\n```\n", "source": "https://react.dev/learn/adding-interactivity", "category": "Adding Interactivity"}
{"instruction": "What is State: a component\u2019s memory in React and how does it work?", "input": "", "output": "Components often need to change what\u2019s on the screen as a result of an interaction. Typing into the form should update the input field, clicking \u201cnext\u201d on an image carousel should change which image is displayed, clicking \u201cbuy\u201d puts a product in the shopping cart. Components need to \u201cremember\u201d things: the current input value, the current image, the shopping cart. In React, this kind of component-specific memory is called state.\n\nYou can add state to a component with a useState Hook. Hooks are special functions that let your components use React features (state is one of those features). The useState Hook lets you declare a state variable. It takes the initial state and returns a pair of values: the current state, and a state setter function that lets you update it.\n\n\n```javascript\nconst[index,setIndex]=useState(0);const[showMore,setShowMore]=useState(false);\n```\n\n\nHere is how an image gallery uses and updates state on click:\n\n\n```javascript\nimport{useState}from'react';import{sculptureList}from'./data.js';exportdefaultfunctionGallery(){const[index,setIndex]=useState(0);const[showMore,setShowMore]=useState(false);consthasNext=index<sculptureList.length-1;functionhandleNextClick(){if(hasNext){setIndex(index+1);}else{setIndex(0);}}functionhandleMoreClick(){setShowMore(!showMore);}letsculpture=sculptureList[index];return(<><buttononClick={handleNextClick}>Next</button><h2><i>{sculpture.name}</i>by{sculpture.artist}</h2><h3>({index+1}of{sculptureList.length})</h3><buttononClick={handleMoreClick}>{showMore?'Hide':'Show'}details</button>{showMore&&<p>{sculpture.description}</p>}<imgsrc={sculpture.url}alt={sculpture.alt}/></>);}\n```\n", "source": "https://react.dev/learn/adding-interactivity", "category": "Adding Interactivity"}
{"instruction": "Show me a code example of State: a component\u2019s memory in React.", "input": "", "output": "Components often need to change what\u2019s on the screen as a result of an interaction. Typing into the form should update the input field, clicking \u201cnext\u201d on an image carousel should change which image is displayed, clicking \u201cbuy\u201d puts a product in the shopping cart. Components need to \u201cremember\u201d things: the current input value, the current image, the shopping cart. In React, this kind of component-specific memory is called state.\n\nYou can add state to a component with a useState Hook. Hooks are special functions that let your components use React features (state is one of those features). The useState Hook lets you declare a state variable. It takes the initial state and returns a pair of values: the current state, and a state setter function that lets you update it.\n\n\n```javascript\nconst[index,setIndex]=useState(0);const[showMore,setShowMore]=useState(false);\n```\n\n\nHere is how an image gallery uses and updates state on click:\n\n\n```javascript\nimport{useState}from'react';import{sculptureList}from'./data.js';exportdefaultfunctionGallery(){const[index,setIndex]=useState(0);const[showMore,setShowMore]=useState(false);consthasNext=index<sculptureList.length-1;functionhandleNextClick(){if(hasNext){setIndex(index+1);}else{setIndex(0);}}functionhandleMoreClick(){setShowMore(!showMore);}letsculpture=sculptureList[index];return(<><buttononClick={handleNextClick}>Next</button><h2><i>{sculpture.name}</i>by{sculpture.artist}</h2><h3>({index+1}of{sculptureList.length})</h3><buttononClick={handleMoreClick}>{showMore?'Hide':'Show'}details</button>{showMore&&<p>{sculpture.description}</p>}<imgsrc={sculpture.url}alt={sculpture.alt}/></>);}\n```\n", "source": "https://react.dev/learn/adding-interactivity", "category": "Adding Interactivity"}
{"instruction": "Tell me about Render and commit.", "input": "", "output": "Before your components are displayed on the screen, they must be rendered by React. Understanding the steps in this process will help you think about how your code executes and explain its behavior.\n\nImagine that your components are cooks in the kitchen, assembling tasty dishes from ingredients. In this scenario, React is the waiter who puts in requests from customers and brings them their orders. This process of requesting and serving UI has three steps:\n\n1. Triggering a render (delivering the diner\u2019s order to the kitchen)\n2. Rendering the component (preparing the order in the kitchen)\n3. Committing to the DOM (placing the order on the table)\n\n1. Trigger\n2. Render\n3. Commit\n\nIllustrated by Rachel Lee Nabors", "source": "https://react.dev/learn/adding-interactivity", "category": "Adding Interactivity"}
{"instruction": "Can you describe State as a snapshot in the context of React?", "input": "", "output": "Unlike regular JavaScript variables, React state behaves more like a snapshot. Setting it does not change the state variable you already have, but instead triggers a re-render. This can be surprising at first!\n\n\n```javascript\nconsole.log(count);// 0setCount(count+1);// Request a re-render with 1console.log(count);// Still 0!\n```\n\n\nThis behavior helps you avoid subtle bugs. Here is a little chat app. Try to guess what happens if you press \u201cSend\u201d first and then change the recipient to Bob. Whose name will appear in the alert five seconds later?\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[to,setTo]=useState('Alice');const[message,setMessage]=useState('Hello');functionhandleSubmit(e){e.preventDefault();setTimeout(()=>{alert(`You said${message}to${to}`);},5000);}return(<formonSubmit={handleSubmit}><label>To:{' '}<selectvalue={to}onChange={e=>setTo(e.target.value)}><optionvalue=\"Alice\">Alice</option><optionvalue=\"Bob\">Bob</option></select></label><textareaplaceholder=\"Message\"value={message}onChange={e=>setMessage(e.target.value)}/><buttontype=\"submit\">Send</button></form>);}\n```\n", "source": "https://react.dev/learn/adding-interactivity", "category": "Adding Interactivity"}
{"instruction": "Show me a code example of State as a snapshot in React.", "input": "", "output": "Unlike regular JavaScript variables, React state behaves more like a snapshot. Setting it does not change the state variable you already have, but instead triggers a re-render. This can be surprising at first!\n\n\n```javascript\nconsole.log(count);// 0setCount(count+1);// Request a re-render with 1console.log(count);// Still 0!\n```\n\n\nThis behavior helps you avoid subtle bugs. Here is a little chat app. Try to guess what happens if you press \u201cSend\u201d first and then change the recipient to Bob. Whose name will appear in the alert five seconds later?\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[to,setTo]=useState('Alice');const[message,setMessage]=useState('Hello');functionhandleSubmit(e){e.preventDefault();setTimeout(()=>{alert(`You said${message}to${to}`);},5000);}return(<formonSubmit={handleSubmit}><label>To:{' '}<selectvalue={to}onChange={e=>setTo(e.target.value)}><optionvalue=\"Alice\">Alice</option><optionvalue=\"Bob\">Bob</option></select></label><textareaplaceholder=\"Message\"value={message}onChange={e=>setMessage(e.target.value)}/><buttontype=\"submit\">Send</button></form>);}\n```\n", "source": "https://react.dev/learn/adding-interactivity", "category": "Adding Interactivity"}
{"instruction": "How do I handle Queueing a series of state updates in React?", "input": "", "output": "This component is buggy: clicking \u201c+3\u201d increments the score only once.\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionCounter(){const[score,setScore]=useState(0);functionincrement(){setScore(score+1);}return(<><buttononClick={()=>increment()}>+1</button><buttononClick={()=>{increment();increment();increment();}}>+3</button><h1>Score:{score}</h1></>)}\n```\n\n\nState as a Snapshot explains why this is happening. Setting state requests a new re-render, but does not change it in the already running code. So score continues to be 0 right after you call setScore(score + 1) .\n\n\n```javascript\nconsole.log(score);// 0setScore(score+1);// setScore(0 + 1);console.log(score);// 0setScore(score+1);// setScore(0 + 1);console.log(score);// 0setScore(score+1);// setScore(0 + 1);console.log(score);// 0\n```\n\n\nYou can fix this by passing an updater function when setting state. Notice how replacing setScore(score + 1) with setScore(s => s + 1) fixes the \u201c+3\u201d button. This lets you queue multiple state updates.\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionCounter(){const[score,setScore]=useState(0);functionincrement(){setScore(s=>s+1);}return(<><buttononClick={()=>increment()}>+1</button><buttononClick={()=>{increment();increment();increment();}}>+3</button><h1>Score:{score}</h1></>)}\n```\n", "source": "https://react.dev/learn/adding-interactivity", "category": "Adding Interactivity"}
{"instruction": "Show me a code example of Queueing a series of state updates in React.", "input": "", "output": "This component is buggy: clicking \u201c+3\u201d increments the score only once.\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionCounter(){const[score,setScore]=useState(0);functionincrement(){setScore(score+1);}return(<><buttononClick={()=>increment()}>+1</button><buttononClick={()=>{increment();increment();increment();}}>+3</button><h1>Score:{score}</h1></>)}\n```\n\n\nState as a Snapshot explains why this is happening. Setting state requests a new re-render, but does not change it in the already running code. So score continues to be 0 right after you call setScore(score + 1) .\n\n\n```javascript\nconsole.log(score);// 0setScore(score+1);// setScore(0 + 1);console.log(score);// 0setScore(score+1);// setScore(0 + 1);console.log(score);// 0setScore(score+1);// setScore(0 + 1);console.log(score);// 0\n```\n\n\nYou can fix this by passing an updater function when setting state. Notice how replacing setScore(score + 1) with setScore(s => s + 1) fixes the \u201c+3\u201d button. This lets you queue multiple state updates.\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionCounter(){const[score,setScore]=useState(0);functionincrement(){setScore(s=>s+1);}return(<><buttononClick={()=>increment()}>+1</button><buttononClick={()=>{increment();increment();increment();}}>+3</button><h1>Score:{score}</h1></>)}\n```\n", "source": "https://react.dev/learn/adding-interactivity", "category": "Adding Interactivity"}
{"instruction": "Can you describe Updating objects in state in the context of React?", "input": "", "output": "State can hold any kind of JavaScript value, including objects. But you shouldn\u2019t change objects and arrays that you hold in the React state directly. Instead, when you want to update an object and array, you need to create a new one (or make a copy of an existing one), and then update the state to use that copy.\n\nUsually, you will use the ... spread syntax to copy objects and arrays that you want to change. For example, updating a nested object could look like this:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[person,setPerson]=useState({name:'Niki de Saint Phalle',artwork:{title:'Blue Nana',city:'Hamburg',image:'https://i.imgur.com/Sd1AgUOm.jpg',}});functionhandleNameChange(e){setPerson({...person,name:e.target.value});}functionhandleTitleChange(e){setPerson({...person,artwork:{...person.artwork,title:e.target.value}});}functionhandleCityChange(e){setPerson({...person,artwork:{...person.artwork,city:e.target.value}});}functionhandleImageChange(e){setPerson({...person,artwork:{...person.artwork,image:e.target.value}});}return(<><label>Name:<inputvalue={person.name}onChange={handleNameChange}/></label><label>Title:<inputvalue={person.artwork.title}onChange={handleTitleChange}/></label><label>City:<inputvalue={person.artwork.city}onChange={handleCityChange}/></label><label>Image:<inputvalue={person.artwork.image}onChange={handleImageChange}/></label><p><i>{person.artwork.title}</i>{' by '}{person.name}<br/>(located in{person.artwork.city})</p><imgsrc={person.artwork.image}alt={person.artwork.title}/></>);}\n```\n\n\nIf copying objects in code gets tedious, you can use a library like Immer to reduce repetitive code:\n\n\n```javascript\n{\"dependencies\":{\"immer\":\"1.7.3\",\"react\":\"latest\",\"react-dom\":\"latest\",\"react-scripts\":\"latest\",\"use-immer\":\"0.5.1\"},\"scripts\":{\"start\":\"react-scripts start\",\"build\":\"react-scripts build\",\"test\":\"react-scripts test --env=jsdom\",\"eject\":\"react-scripts eject\"},\"devDependencies\":{}}\n```\n", "source": "https://react.dev/learn/adding-interactivity", "category": "Adding Interactivity"}
{"instruction": "Show me a code example of Updating objects in state in React.", "input": "", "output": "State can hold any kind of JavaScript value, including objects. But you shouldn\u2019t change objects and arrays that you hold in the React state directly. Instead, when you want to update an object and array, you need to create a new one (or make a copy of an existing one), and then update the state to use that copy.\n\nUsually, you will use the ... spread syntax to copy objects and arrays that you want to change. For example, updating a nested object could look like this:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[person,setPerson]=useState({name:'Niki de Saint Phalle',artwork:{title:'Blue Nana',city:'Hamburg',image:'https://i.imgur.com/Sd1AgUOm.jpg',}});functionhandleNameChange(e){setPerson({...person,name:e.target.value});}functionhandleTitleChange(e){setPerson({...person,artwork:{...person.artwork,title:e.target.value}});}functionhandleCityChange(e){setPerson({...person,artwork:{...person.artwork,city:e.target.value}});}functionhandleImageChange(e){setPerson({...person,artwork:{...person.artwork,image:e.target.value}});}return(<><label>Name:<inputvalue={person.name}onChange={handleNameChange}/></label><label>Title:<inputvalue={person.artwork.title}onChange={handleTitleChange}/></label><label>City:<inputvalue={person.artwork.city}onChange={handleCityChange}/></label><label>Image:<inputvalue={person.artwork.image}onChange={handleImageChange}/></label><p><i>{person.artwork.title}</i>{' by '}{person.name}<br/>(located in{person.artwork.city})</p><imgsrc={person.artwork.image}alt={person.artwork.title}/></>);}\n```\n\n\nIf copying objects in code gets tedious, you can use a library like Immer to reduce repetitive code:\n\n\n```javascript\n{\"dependencies\":{\"immer\":\"1.7.3\",\"react\":\"latest\",\"react-dom\":\"latest\",\"react-scripts\":\"latest\",\"use-immer\":\"0.5.1\"},\"scripts\":{\"start\":\"react-scripts start\",\"build\":\"react-scripts build\",\"test\":\"react-scripts test --env=jsdom\",\"eject\":\"react-scripts eject\"},\"devDependencies\":{}}\n```\n", "source": "https://react.dev/learn/adding-interactivity", "category": "Adding Interactivity"}
{"instruction": "Can you describe Updating arrays in state in the context of React?", "input": "", "output": "Arrays are another type of mutable JavaScript objects you can store in state and should treat as read-only. Just like with objects, when you want to update an array stored in state, you need to create a new one (or make a copy of an existing one), and then set state to use the new array:\n\n\n```javascript\nimport{useState}from'react';constinitialList=[{id:0,title:'Big Bellies',seen:false},{id:1,title:'Lunar Landscape',seen:false},{id:2,title:'Terracotta Army',seen:true},];exportdefaultfunctionBucketList(){const[list,setList]=useState(initialList);functionhandleToggle(artworkId,nextSeen){setList(list.map(artwork=>{if(artwork.id===artworkId){return{...artwork,seen:nextSeen};}else{returnartwork;}}));}return(<><h1>Art Bucket List</h1><h2>My list of art to see:</h2><ItemListartworks={list}onToggle={handleToggle}/></>);}functionItemList({artworks,onToggle}){return(<ul>{artworks.map(artwork=>(<likey={artwork.id}><label><inputtype=\"checkbox\"checked={artwork.seen}onChange={e=>{onToggle(artwork.id,e.target.checked);}}/>{artwork.title}</label></li>))}</ul>);}\n```\n\n\nIf copying arrays in code gets tedious, you can use a library like Immer to reduce repetitive code:\n\n\n```javascript\n{\"dependencies\":{\"immer\":\"1.7.3\",\"react\":\"latest\",\"react-dom\":\"latest\",\"react-scripts\":\"latest\",\"use-immer\":\"0.5.1\"},\"scripts\":{\"start\":\"react-scripts start\",\"build\":\"react-scripts build\",\"test\":\"react-scripts test --env=jsdom\",\"eject\":\"react-scripts eject\"},\"devDependencies\":{}}\n```\n", "source": "https://react.dev/learn/adding-interactivity", "category": "Adding Interactivity"}
{"instruction": "Show me a code example of Updating arrays in state in React.", "input": "", "output": "Arrays are another type of mutable JavaScript objects you can store in state and should treat as read-only. Just like with objects, when you want to update an array stored in state, you need to create a new one (or make a copy of an existing one), and then set state to use the new array:\n\n\n```javascript\nimport{useState}from'react';constinitialList=[{id:0,title:'Big Bellies',seen:false},{id:1,title:'Lunar Landscape',seen:false},{id:2,title:'Terracotta Army',seen:true},];exportdefaultfunctionBucketList(){const[list,setList]=useState(initialList);functionhandleToggle(artworkId,nextSeen){setList(list.map(artwork=>{if(artwork.id===artworkId){return{...artwork,seen:nextSeen};}else{returnartwork;}}));}return(<><h1>Art Bucket List</h1><h2>My list of art to see:</h2><ItemListartworks={list}onToggle={handleToggle}/></>);}functionItemList({artworks,onToggle}){return(<ul>{artworks.map(artwork=>(<likey={artwork.id}><label><inputtype=\"checkbox\"checked={artwork.seen}onChange={e=>{onToggle(artwork.id,e.target.checked);}}/>{artwork.title}</label></li>))}</ul>);}\n```\n\n\nIf copying arrays in code gets tedious, you can use a library like Immer to reduce repetitive code:\n\n\n```javascript\n{\"dependencies\":{\"immer\":\"1.7.3\",\"react\":\"latest\",\"react-dom\":\"latest\",\"react-scripts\":\"latest\",\"use-immer\":\"0.5.1\"},\"scripts\":{\"start\":\"react-scripts start\",\"build\":\"react-scripts build\",\"test\":\"react-scripts test --env=jsdom\",\"eject\":\"react-scripts eject\"},\"devDependencies\":{}}\n```\n", "source": "https://react.dev/learn/adding-interactivity", "category": "Adding Interactivity"}
{"instruction": "Explain the concept of What\u2019s next? in React.", "input": "", "output": "Head over to Responding to Events to start reading this chapter page by page!\n\nOr, if you\u2019re already familiar with these topics, why not read about Managing State ?", "source": "https://react.dev/learn/adding-interactivity", "category": "Adding Interactivity"}
{"instruction": "Can you describe Step 1: Install a build tool in the context of React?", "input": "", "output": "The first step is to install a build tool like vite , parcel , or rsbuild . These build tools provide features to package and run source code, provide a development server for local development and a build command to deploy your app to a production server.\n\n\n### Vite\n\n\nVite is a build tool that aims to provide a faster and leaner development experience for modern web projects.\n\nVite is opinionated and comes with sensible defaults out of the box. Vite has a rich ecosystem of plugins to support fast refresh, JSX,  Babel/SWC, and other common features. See Vite\u2019s React plugin or React SWC plugin and React SSR example project to get started.\n\nVite is already being used as a build tool in one of our recommended frameworks : React Router .\n\n\n### Parcel\n\n\nParcel combines a great out-of-the-box development experience with a scalable architecture that can take your project from just getting started to massive production applications.\n\nParcel supports fast refresh, JSX, TypeScript, Flow, and styling out of the box. See Parcel\u2019s React recipe to get started.\n\n\n### Rsbuild\n\n\nRsbuild is an Rspack-powered build tool that provides a seamless development experience for React applications. It comes with carefully tuned defaults and performance optimizations ready to use.\n\nRsbuild includes built-in support for React features like fast refresh, JSX, TypeScript, and styling. See Rsbuild\u2019s React guide to get started.\n\n\n### Note\n\n\nIf you\u2019re starting from scratch with React Native you\u2019ll need to use Metro , the JavaScript bundler for React Native. Metro supports bundling for platforms like iOS and Android, but lacks many features when compared to the tools here. We recommend starting with Vite, Parcel, or Rsbuild unless your project requires React Native support.", "source": "https://react.dev/learn/build-a-react-app-from-scratch", "category": "Build a React app from Scratch"}
{"instruction": "Tell me about Step 2: Build Common Application Patterns.", "input": "", "output": "The build tools listed above start off with a client-only, single-page app (SPA), but don\u2019t include any further solutions for common functionality like routing, data fetching, or styling.\n\nThe React ecosystem includes many tools for these problems. We\u2019ve listed a few that are widely used as a starting point, but feel free to choose other tools if those work better for you.\n\n\n### Routing\n\n\nRouting determines what content or pages to display when a user visits a particular URL. You need to set up a router to map URLs to different parts of your app. You\u2019ll also need to handle nested routes, route parameters, and query parameters.  Routers can be configured within your code, or defined based on your component folder and file structures.\n\nRouters are a core part of modern applications, and are usually integrated with data fetching (including prefetching data for a whole page for faster loading), code splitting (to minimize client bundle sizes), and page rendering approaches (to decide how each page gets generated).\n\nWe suggest using:\n\n* React Router\n* Tanstack Router\n\n\n### Data Fetching\n\n\nFetching data from a server or other data source is a key part of most applications. Doing this properly requires handling loading states, error states, and caching the fetched data, which can be complex.\n\nPurpose-built data fetching libraries do the hard work of fetching and caching the data for you, letting you focus on what data your app needs and how to display it.  These libraries are typically used directly in your components, but can also be integrated into routing loaders for faster pre-fetching and better performance, and in server rendering as well.\n\nNote that fetching data directly in components can lead to slower loading times due to network request waterfalls, so we recommend prefetching data in router loaders or on the server as much as possible!  This allows a page\u2019s data to be fetched all at once as the page is being displayed.\n\nIf you\u2019re fetching data from most backends or REST-style APIs, we suggest using:\n\n* React Query\n* SWR\n* RTK Query\n\nIf you\u2019re fetching data from a GraphQL API, we suggest using:\n\n* Apollo\n* Relay\n\n\n### Code-splitting\n\n\nCode-splitting is the process of breaking your app into smaller bundles that can be loaded on demand. An app\u2019s code size increases with every new feature and additional dependency. Apps can become slow to load because all of the code for the entire app needs to be sent before it can be used. Caching, reducing features/dependencies, and moving some code to run on the server can help mitigate slow loading but are incomplete solutions that can sacrifice functionality if overused.\n\nSimilarly, if you rely on the apps using your framework to split the code, you might encounter situations where loading becomes slower than if no code splitting were happening at all. For example, lazily loading a chart delays sending the code needed to render the chart, splitting the chart code from the rest of the app. Parcel supports code splitting with React.lazy . However, if the chart loads its data after it has been initially rendered you are now waiting twice. This is a waterfall: rather than fetching the data for the chart and sending the code to render it simultaneously, you must wait for each step to complete one after the other.\n\nSplitting code by route, when integrated with bundling and data fetching, can reduce the initial load time of your app and the time it takes for the largest visible content of the app to render ( Largest Contentful Paint ).\n\nFor code-splitting instructions, see your build tool docs:\n\n* Vite build optimizations\n* Parcel code splitting\n* Rsbuild code splitting\n\n\n### Improving Application Performance\n\n\nSince the build tool you select only support single page apps (SPAs) you\u2019ll need to implement other rendering patterns like server-side rendering (SSR), static site generation (SSG), and/or React Server Components (RSC). Even if you don\u2019t need these features at first, in the future there may be some routes that would benefit SSR, SSG or RSC.\n\n* Single-page apps (SPA) load a single HTML page and dynamically updates the page as the user interacts with the app. SPAs are easier to get started with, but they can have slower initial load times. SPAs are the default architecture for most build tools.\n* Streaming Server-side rendering (SSR) renders a page on the server and sends the fully rendered page to the client. SSR can improve performance, but it can be more complex to set up and maintain than a single-page app. With the addition of streaming, SSR can be very complex to set up and maintain. See Vite\u2019s SSR guide .\n* Static site generation (SSG) generates static HTML files for your app at build time. SSG can improve performance, but it can be more complex to set up and maintain than server-side rendering. See Vite\u2019s SSG guide .\n* React Server Components (RSC) lets you mix build-time, server-only, and interactive components in a single React tree. RSC can improve performance, but it currently requires deep expertise to set up and maintain. See Parcel\u2019s RSC examples .\n\nSingle-page apps (SPA) load a single HTML page and dynamically updates the page as the user interacts with the app. SPAs are easier to get started with, but they can have slower initial load times. SPAs are the default architecture for most build tools.\n\nStreaming Server-side rendering (SSR) renders a page on the server and sends the fully rendered page to the client. SSR can improve performance, but it can be more complex to set up and maintain than a single-page app. With the addition of streaming, SSR can be very complex to set up and maintain. See Vite\u2019s SSR guide .\n\nStatic site generation (SSG) generates static HTML files for your app at build time. SSG can improve performance, but it can be more complex to set up and maintain than server-side rendering. See Vite\u2019s SSG guide .\n\nReact Server Components (RSC) lets you mix build-time, server-only, and interactive components in a single React tree. RSC can improve performance, but it currently requires deep expertise to set up and maintain. See Parcel\u2019s RSC examples .\n\nYour rendering strategies need to integrate with your router so apps built with your framework can choose the rendering strategy on a per-route level. This will enable different rendering strategies without having to rewrite your whole app. For example, the landing page for your app might benefit from being statically generated (SSG), while a page with a content feed might perform best with server-side rendering.\n\nUsing the right rendering strategy for the right routes can decrease the time it takes for the first byte of content to be loaded ( Time to First Byte ), the first piece of content to render ( First Contentful Paint ), and the largest visible content of the app to render ( Largest Contentful Paint ).\n\n\n### And more\u2026\n\n\nThese are just a few examples of the features a new app will need to consider when building from scratch. Many limitations you\u2019ll hit can be difficult to solve as each problem is interconnected with the others and can require deep expertise in problem areas you may not be familiar with.\n\nIf you don\u2019t want to solve these problems on your own, you can get started with a framework that provides these features out of the box.", "source": "https://react.dev/learn/build-a-react-app-from-scratch", "category": "Build a React app from Scratch"}
{"instruction": "Tell me about Principles for structuring state.", "input": "", "output": "When you write a component that holds some state, you\u2019ll have to make choices about how many state variables to use and what the shape of their data should be. While it\u2019s possible to write correct programs even with a suboptimal state structure, there are a few principles that can guide you to make better choices:\n\n1. Group related state. If you always update two or more state variables at the same time, consider merging them into a single state variable.\n2. Avoid contradictions in state. When the state is structured in a way that several pieces of state may contradict and \u201cdisagree\u201d with each other, you leave room for mistakes. Try to avoid this.\n3. Avoid redundant state. If you can calculate some information from the component\u2019s props or its existing state variables during rendering, you should not put that information into that component\u2019s state.\n4. Avoid duplication in state. When the same data is duplicated between multiple state variables, or within nested objects, it is difficult to keep them in sync. Reduce duplication when you can.\n5. Avoid deeply nested state. Deeply hierarchical state is not very convenient to update. When possible, prefer to structure state in a flat way.\n\nThe goal behind these principles is to make state easy to update without introducing mistakes . Removing redundant and duplicate data from state helps ensure that all its pieces stay in sync. This is similar to how a database engineer might want to \u201cnormalize\u201d the database structure to reduce the chance of bugs. To paraphrase Albert Einstein, \u201cMake your state as simple as it can be\u2014but no simpler.\u201d\n\nNow let\u2019s see how these principles apply in action.", "source": "https://react.dev/learn/choosing-the-state-structure", "category": "Choosing the State Structure"}
{"instruction": "What are the best practices for Principles for structuring state in React?", "input": "", "output": "When you write a component that holds some state, you\u2019ll have to make choices about how many state variables to use and what the shape of their data should be. While it\u2019s possible to write correct programs even with a suboptimal state structure, there are a few principles that can guide you to make better choices:\n\n1. Group related state. If you always update two or more state variables at the same time, consider merging them into a single state variable.\n2. Avoid contradictions in state. When the state is structured in a way that several pieces of state may contradict and \u201cdisagree\u201d with each other, you leave room for mistakes. Try to avoid this.\n3. Avoid redundant state. If you can calculate some information from the component\u2019s props or its existing state variables during rendering, you should not put that information into that component\u2019s state.\n4. Avoid duplication in state. When the same data is duplicated between multiple state variables, or within nested objects, it is difficult to keep them in sync. Reduce duplication when you can.\n5. Avoid deeply nested state. Deeply hierarchical state is not very convenient to update. When possible, prefer to structure state in a flat way.\n\nThe goal behind these principles is to make state easy to update without introducing mistakes . Removing redundant and duplicate data from state helps ensure that all its pieces stay in sync. This is similar to how a database engineer might want to \u201cnormalize\u201d the database structure to reduce the chance of bugs. To paraphrase Albert Einstein, \u201cMake your state as simple as it can be\u2014but no simpler.\u201d\n\nNow let\u2019s see how these principles apply in action.", "source": "https://react.dev/learn/choosing-the-state-structure", "category": "Choosing the State Structure"}
{"instruction": "What is Group related state in React and how does it work?", "input": "", "output": "You might sometimes be unsure between using a single or multiple state variables.\n\nShould you do this?\n\n\n```javascript\nconst[x,setX]=useState(0);const[y,setY]=useState(0);\n```\n\n\nOr this?\n\n\n```javascript\nconst[position,setPosition]=useState({x:0,y:0});\n```\n\n\nTechnically, you can use either of these approaches. But if some two state variables always change together, it might be a good idea to unify them into a single state variable. Then you won\u2019t forget to always keep them in sync, like in this example where moving the cursor updates both coordinates of the red dot:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionMovingDot(){const[position,setPosition]=useState({x:0,y:0});return(<divonPointerMove={e=>{setPosition({x:e.clientX,y:e.clientY});}}style={{position:'relative',width:'100vw',height:'100vh',}}><divstyle={{position:'absolute',backgroundColor:'red',borderRadius:'50%',transform:`translate(${position.x}px,${position.y}px)`,left:-10,top:-10,width:20,height:20,}}/></div>)}\n```\n\n\nAnother case where you\u2019ll group data into an object or an array is when you don\u2019t know how many pieces of state you\u2019ll need. For example, it\u2019s helpful when you have a form where the user can add custom fields.\n\n\n### Pitfall\n\n\nIf your state variable is an object, remember that you can\u2019t update only one field in it without explicitly copying the other fields. For example, you can\u2019t do setPosition({ x: 100 }) in the above example because it would not have the y property at all! Instead, if you wanted to set x alone, you would either do setPosition({ ...position, x: 100 }) , or split them into two state variables and do setX(100) .", "source": "https://react.dev/learn/choosing-the-state-structure", "category": "Choosing the State Structure"}
{"instruction": "Show me a code example of Group related state in React.", "input": "", "output": "You might sometimes be unsure between using a single or multiple state variables.\n\nShould you do this?\n\n\n```javascript\nconst[x,setX]=useState(0);const[y,setY]=useState(0);\n```\n\n\nOr this?\n\n\n```javascript\nconst[position,setPosition]=useState({x:0,y:0});\n```\n\n\nTechnically, you can use either of these approaches. But if some two state variables always change together, it might be a good idea to unify them into a single state variable. Then you won\u2019t forget to always keep them in sync, like in this example where moving the cursor updates both coordinates of the red dot:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionMovingDot(){const[position,setPosition]=useState({x:0,y:0});return(<divonPointerMove={e=>{setPosition({x:e.clientX,y:e.clientY});}}style={{position:'relative',width:'100vw',height:'100vh',}}><divstyle={{position:'absolute',backgroundColor:'red',borderRadius:'50%',transform:`translate(${position.x}px,${position.y}px)`,left:-10,top:-10,width:20,height:20,}}/></div>)}\n```\n\n\nAnother case where you\u2019ll group data into an object or an array is when you don\u2019t know how many pieces of state you\u2019ll need. For example, it\u2019s helpful when you have a form where the user can add custom fields.\n\n\n### Pitfall\n\n\nIf your state variable is an object, remember that you can\u2019t update only one field in it without explicitly copying the other fields. For example, you can\u2019t do setPosition({ x: 100 }) in the above example because it would not have the y property at all! Instead, if you wanted to set x alone, you would either do setPosition({ ...position, x: 100 }) , or split them into two state variables and do setX(100) .", "source": "https://react.dev/learn/choosing-the-state-structure", "category": "Choosing the State Structure"}
{"instruction": "What is Avoid contradictions in state in React and how does it work?", "input": "", "output": "Here is a hotel feedback form with isSending and isSent state variables:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionFeedbackForm(){const[text,setText]=useState('');const[isSending,setIsSending]=useState(false);const[isSent,setIsSent]=useState(false);asyncfunctionhandleSubmit(e){e.preventDefault();setIsSending(true);awaitsendMessage(text);setIsSending(false);setIsSent(true);}if(isSent){return<h1>Thanks for feedback!</h1>}return(<formonSubmit={handleSubmit}><p>How was your stay at The Prancing Pony?</p><textareadisabled={isSending}value={text}onChange={e=>setText(e.target.value)}/><br/><buttondisabled={isSending}type=\"submit\">Send</button>{isSending&&<p>Sending...</p>}</form>);}// Pretend to send a message.functionsendMessage(text){returnnewPromise(resolve=>{setTimeout(resolve,2000);});}\n```\n\n\nWhile this code works, it leaves the door open for \u201cimpossible\u201d states. For example, if you forget to call setIsSent and setIsSending together, you may end up in a situation where both isSending and isSent are true at the same time. The more complex your component is, the harder it is to understand what happened.\n\nSince isSending and isSent should never be true at the same time, it is better to replace them with one status state variable that may take one of three valid states: 'typing' (initial), 'sending' , and 'sent' :\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionFeedbackForm(){const[text,setText]=useState('');const[status,setStatus]=useState('typing');asyncfunctionhandleSubmit(e){e.preventDefault();setStatus('sending');awaitsendMessage(text);setStatus('sent');}constisSending=status==='sending';constisSent=status==='sent';if(isSent){return<h1>Thanks for feedback!</h1>}return(<formonSubmit={handleSubmit}><p>How was your stay at The Prancing Pony?</p><textareadisabled={isSending}value={text}onChange={e=>setText(e.target.value)}/><br/><buttondisabled={isSending}type=\"submit\">Send</button>{isSending&&<p>Sending...</p>}</form>);}// Pretend to send a message.functionsendMessage(text){returnnewPromise(resolve=>{setTimeout(resolve,2000);});}\n```\n\n\nYou can still declare some constants for readability:\n\n\n```javascript\nconstisSending=status==='sending';constisSent=status==='sent';\n```\n\n\nBut they\u2019re not state variables, so you don\u2019t need to worry about them getting out of sync with each other.", "source": "https://react.dev/learn/choosing-the-state-structure", "category": "Choosing the State Structure"}
{"instruction": "Show me a code example of Avoid contradictions in state in React.", "input": "", "output": "Here is a hotel feedback form with isSending and isSent state variables:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionFeedbackForm(){const[text,setText]=useState('');const[isSending,setIsSending]=useState(false);const[isSent,setIsSent]=useState(false);asyncfunctionhandleSubmit(e){e.preventDefault();setIsSending(true);awaitsendMessage(text);setIsSending(false);setIsSent(true);}if(isSent){return<h1>Thanks for feedback!</h1>}return(<formonSubmit={handleSubmit}><p>How was your stay at The Prancing Pony?</p><textareadisabled={isSending}value={text}onChange={e=>setText(e.target.value)}/><br/><buttondisabled={isSending}type=\"submit\">Send</button>{isSending&&<p>Sending...</p>}</form>);}// Pretend to send a message.functionsendMessage(text){returnnewPromise(resolve=>{setTimeout(resolve,2000);});}\n```\n\n\nWhile this code works, it leaves the door open for \u201cimpossible\u201d states. For example, if you forget to call setIsSent and setIsSending together, you may end up in a situation where both isSending and isSent are true at the same time. The more complex your component is, the harder it is to understand what happened.\n\nSince isSending and isSent should never be true at the same time, it is better to replace them with one status state variable that may take one of three valid states: 'typing' (initial), 'sending' , and 'sent' :\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionFeedbackForm(){const[text,setText]=useState('');const[status,setStatus]=useState('typing');asyncfunctionhandleSubmit(e){e.preventDefault();setStatus('sending');awaitsendMessage(text);setStatus('sent');}constisSending=status==='sending';constisSent=status==='sent';if(isSent){return<h1>Thanks for feedback!</h1>}return(<formonSubmit={handleSubmit}><p>How was your stay at The Prancing Pony?</p><textareadisabled={isSending}value={text}onChange={e=>setText(e.target.value)}/><br/><buttondisabled={isSending}type=\"submit\">Send</button>{isSending&&<p>Sending...</p>}</form>);}// Pretend to send a message.functionsendMessage(text){returnnewPromise(resolve=>{setTimeout(resolve,2000);});}\n```\n\n\nYou can still declare some constants for readability:\n\n\n```javascript\nconstisSending=status==='sending';constisSent=status==='sent';\n```\n\n\nBut they\u2019re not state variables, so you don\u2019t need to worry about them getting out of sync with each other.", "source": "https://react.dev/learn/choosing-the-state-structure", "category": "Choosing the State Structure"}
{"instruction": "Can you describe Avoid redundant state in the context of React?", "input": "", "output": "If you can calculate some information from the component\u2019s props or its existing state variables during rendering, you should not put that information into that component\u2019s state.\n\nFor example, take this form. It works, but can you find any redundant state in it?\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[firstName,setFirstName]=useState('');const[lastName,setLastName]=useState('');const[fullName,setFullName]=useState('');functionhandleFirstNameChange(e){setFirstName(e.target.value);setFullName(e.target.value+' '+lastName);}functionhandleLastNameChange(e){setLastName(e.target.value);setFullName(firstName+' '+e.target.value);}return(<><h2>Let\u2019s check you in</h2><label>First name:{' '}<inputvalue={firstName}onChange={handleFirstNameChange}/></label><label>Last name:{' '}<inputvalue={lastName}onChange={handleLastNameChange}/></label><p>Your ticket will be issued to:<b>{fullName}</b></p></>);}\n```\n\n\nThis form has three state variables: firstName , lastName , and fullName . However, fullName is redundant. You can always calculate fullName from firstName and lastName during render, so remove it from state.\n\nThis is how you can do it:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[firstName,setFirstName]=useState('');const[lastName,setLastName]=useState('');constfullName=firstName+' '+lastName;functionhandleFirstNameChange(e){setFirstName(e.target.value);}functionhandleLastNameChange(e){setLastName(e.target.value);}return(<><h2>Let\u2019s check you in</h2><label>First name:{' '}<inputvalue={firstName}onChange={handleFirstNameChange}/></label><label>Last name:{' '}<inputvalue={lastName}onChange={handleLastNameChange}/></label><p>Your ticket will be issued to:<b>{fullName}</b></p></>);}\n```\n\n\nHere, fullName is not a state variable. Instead, it\u2019s calculated during render:\n\n\n```javascript\nconstfullName=firstName+' '+lastName;\n```\n\n\nAs a result, the change handlers don\u2019t need to do anything special to update it. When you call setFirstName or setLastName , you trigger a re-render, and then the next fullName will be calculated from the fresh data.\n\nA common example of redundant state is code like this:\n\n\n```javascript\nfunctionMessage({messageColor}){const[color,setColor]=useState(messageColor);\n```\n\n\nHere, a color state variable is initialized to the messageColor prop. The problem is that if the parent component passes a different value of messageColor later (for example, 'red' instead of 'blue' ), the color state variable would not be updated! The state is only initialized during the first render.\n\nThis is why \u201cmirroring\u201d some prop in a state variable can lead to confusion. Instead, use the messageColor prop directly in your code. If you want to give it a shorter name, use a constant:\n\n\n```javascript\nfunctionMessage({messageColor}){constcolor=messageColor;\n```\n\n\nThis way it won\u2019t get out of sync with the prop passed from the parent component.\n\n\u201dMirroring\u201d props into state only makes sense when you want to ignore all updates for a specific prop. By convention, start the prop name with initial or default to clarify that its new values are ignored:\n\n\n```javascript\nfunctionMessage({initialColor}){// The `color` state variable holds the *first* value of `initialColor`.// Further changes to the `initialColor` prop are ignored.const[color,setColor]=useState(initialColor);\n```\n", "source": "https://react.dev/learn/choosing-the-state-structure", "category": "Choosing the State Structure"}
{"instruction": "Show me a code example of Avoid redundant state in React.", "input": "", "output": "If you can calculate some information from the component\u2019s props or its existing state variables during rendering, you should not put that information into that component\u2019s state.\n\nFor example, take this form. It works, but can you find any redundant state in it?\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[firstName,setFirstName]=useState('');const[lastName,setLastName]=useState('');const[fullName,setFullName]=useState('');functionhandleFirstNameChange(e){setFirstName(e.target.value);setFullName(e.target.value+' '+lastName);}functionhandleLastNameChange(e){setLastName(e.target.value);setFullName(firstName+' '+e.target.value);}return(<><h2>Let\u2019s check you in</h2><label>First name:{' '}<inputvalue={firstName}onChange={handleFirstNameChange}/></label><label>Last name:{' '}<inputvalue={lastName}onChange={handleLastNameChange}/></label><p>Your ticket will be issued to:<b>{fullName}</b></p></>);}\n```\n\n\nThis form has three state variables: firstName , lastName , and fullName . However, fullName is redundant. You can always calculate fullName from firstName and lastName during render, so remove it from state.\n\nThis is how you can do it:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[firstName,setFirstName]=useState('');const[lastName,setLastName]=useState('');constfullName=firstName+' '+lastName;functionhandleFirstNameChange(e){setFirstName(e.target.value);}functionhandleLastNameChange(e){setLastName(e.target.value);}return(<><h2>Let\u2019s check you in</h2><label>First name:{' '}<inputvalue={firstName}onChange={handleFirstNameChange}/></label><label>Last name:{' '}<inputvalue={lastName}onChange={handleLastNameChange}/></label><p>Your ticket will be issued to:<b>{fullName}</b></p></>);}\n```\n\n\nHere, fullName is not a state variable. Instead, it\u2019s calculated during render:\n\n\n```javascript\nconstfullName=firstName+' '+lastName;\n```\n\n\nAs a result, the change handlers don\u2019t need to do anything special to update it. When you call setFirstName or setLastName , you trigger a re-render, and then the next fullName will be calculated from the fresh data.\n\nA common example of redundant state is code like this:\n\n\n```javascript\nfunctionMessage({messageColor}){const[color,setColor]=useState(messageColor);\n```\n\n\nHere, a color state variable is initialized to the messageColor prop. The problem is that if the parent component passes a different value of messageColor later (for example, 'red' instead of 'blue' ), the color state variable would not be updated! The state is only initialized during the first render.\n\nThis is why \u201cmirroring\u201d some prop in a state variable can lead to confusion. Instead, use the messageColor prop directly in your code. If you want to give it a shorter name, use a constant:\n\n\n```javascript\nfunctionMessage({messageColor}){constcolor=messageColor;\n```\n\n\nThis way it won\u2019t get out of sync with the prop passed from the parent component.\n\n\u201dMirroring\u201d props into state only makes sense when you want to ignore all updates for a specific prop. By convention, start the prop name with initial or default to clarify that its new values are ignored:\n\n\n```javascript\nfunctionMessage({initialColor}){// The `color` state variable holds the *first* value of `initialColor`.// Further changes to the `initialColor` prop are ignored.const[color,setColor]=useState(initialColor);\n```\n", "source": "https://react.dev/learn/choosing-the-state-structure", "category": "Choosing the State Structure"}
{"instruction": "What are the best practices for Avoid redundant state in React?", "input": "", "output": "If you can calculate some information from the component\u2019s props or its existing state variables during rendering, you should not put that information into that component\u2019s state.\n\nFor example, take this form. It works, but can you find any redundant state in it?\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[firstName,setFirstName]=useState('');const[lastName,setLastName]=useState('');const[fullName,setFullName]=useState('');functionhandleFirstNameChange(e){setFirstName(e.target.value);setFullName(e.target.value+' '+lastName);}functionhandleLastNameChange(e){setLastName(e.target.value);setFullName(firstName+' '+e.target.value);}return(<><h2>Let\u2019s check you in</h2><label>First name:{' '}<inputvalue={firstName}onChange={handleFirstNameChange}/></label><label>Last name:{' '}<inputvalue={lastName}onChange={handleLastNameChange}/></label><p>Your ticket will be issued to:<b>{fullName}</b></p></>);}\n```\n\n\nThis form has three state variables: firstName , lastName , and fullName . However, fullName is redundant. You can always calculate fullName from firstName and lastName during render, so remove it from state.\n\nThis is how you can do it:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[firstName,setFirstName]=useState('');const[lastName,setLastName]=useState('');constfullName=firstName+' '+lastName;functionhandleFirstNameChange(e){setFirstName(e.target.value);}functionhandleLastNameChange(e){setLastName(e.target.value);}return(<><h2>Let\u2019s check you in</h2><label>First name:{' '}<inputvalue={firstName}onChange={handleFirstNameChange}/></label><label>Last name:{' '}<inputvalue={lastName}onChange={handleLastNameChange}/></label><p>Your ticket will be issued to:<b>{fullName}</b></p></>);}\n```\n\n\nHere, fullName is not a state variable. Instead, it\u2019s calculated during render:\n\n\n```javascript\nconstfullName=firstName+' '+lastName;\n```\n\n\nAs a result, the change handlers don\u2019t need to do anything special to update it. When you call setFirstName or setLastName , you trigger a re-render, and then the next fullName will be calculated from the fresh data.\n\nA common example of redundant state is code like this:\n\n\n```javascript\nfunctionMessage({messageColor}){const[color,setColor]=useState(messageColor);\n```\n\n\nHere, a color state variable is initialized to the messageColor prop. The problem is that if the parent component passes a different value of messageColor later (for example, 'red' instead of 'blue' ), the color state variable would not be updated! The state is only initialized during the first render.\n\nThis is why \u201cmirroring\u201d some prop in a state variable can lead to confusion. Instead, use the messageColor prop directly in your code. If you want to give it a shorter name, use a constant:\n\n\n```javascript\nfunctionMessage({messageColor}){constcolor=messageColor;\n```\n\n\nThis way it won\u2019t get out of sync with the prop passed from the parent component.\n\n\u201dMirroring\u201d props into state only makes sense when you want to ignore all updates for a specific prop. By convention, start the prop name with initial or default to clarify that its new values are ignored:\n\n\n```javascript\nfunctionMessage({initialColor}){// The `color` state variable holds the *first* value of `initialColor`.// Further changes to the `initialColor` prop are ignored.const[color,setColor]=useState(initialColor);\n```\n", "source": "https://react.dev/learn/choosing-the-state-structure", "category": "Choosing the State Structure"}
{"instruction": "Can you describe Avoid duplication in state in the context of React?", "input": "", "output": "This menu list component lets you choose a single travel snack out of several:\n\n\n```javascript\nimport{useState}from'react';constinitialItems=[{title:'pretzels',id:0},{title:'crispy seaweed',id:1},{title:'granola bar',id:2},];exportdefaultfunctionMenu(){const[items,setItems]=useState(initialItems);const[selectedItem,setSelectedItem]=useState(items[0]);return(<><h2>What's your travel snack?</h2><ul>{items.map(item=>(<likey={item.id}>{item.title}{' '}<buttononClick={()=>{setSelectedItem(item);}}>Choose</button></li>))}</ul><p>You picked{selectedItem.title}.</p></>);}\n```\n\n\nCurrently, it stores the selected item as an object in the selectedItem state variable. However, this is not great: the contents of the selectedItem is the same object as one of the items inside the items list. This means that the information about the item itself is duplicated in two places.\n\nWhy is this a problem? Let\u2019s make each item editable:\n\n\n```javascript\nimport{useState}from'react';constinitialItems=[{title:'pretzels',id:0},{title:'crispy seaweed',id:1},{title:'granola bar',id:2},];exportdefaultfunctionMenu(){const[items,setItems]=useState(initialItems);const[selectedItem,setSelectedItem]=useState(items[0]);functionhandleItemChange(id,e){setItems(items.map(item=>{if(item.id===id){return{...item,title:e.target.value,};}else{returnitem;}}));}return(<><h2>What's your travel snack?</h2><ul>{items.map((item,index)=>(<likey={item.id}><inputvalue={item.title}onChange={e=>{handleItemChange(item.id,e)}}/>{' '}<buttononClick={()=>{setSelectedItem(item);}}>Choose</button></li>))}</ul><p>You picked{selectedItem.title}.</p></>);}\n```\n\n\nNotice how if you first click \u201cChoose\u201d on an item and then edit it, the input updates but the label at the bottom does not reflect the edits. This is because you have duplicated state, and you forgot to update selectedItem .\n\nAlthough you could update selectedItem too, an easier fix is to remove duplication. In this example, instead of a selectedItem object (which creates a duplication with objects inside items ), you hold the selectedId in state, and then get the selectedItem by searching the items array for an item with that ID:\n\n\n```javascript\nimport{useState}from'react';constinitialItems=[{title:'pretzels',id:0},{title:'crispy seaweed',id:1},{title:'granola bar',id:2},];exportdefaultfunctionMenu(){const[items,setItems]=useState(initialItems);const[selectedId,setSelectedId]=useState(0);constselectedItem=items.find(item=>item.id===selectedId);functionhandleItemChange(id,e){setItems(items.map(item=>{if(item.id===id){return{...item,title:e.target.value,};}else{returnitem;}}));}return(<><h2>What's your travel snack?</h2><ul>{items.map((item,index)=>(<likey={item.id}><inputvalue={item.title}onChange={e=>{handleItemChange(item.id,e)}}/>{' '}<buttononClick={()=>{setSelectedId(item.id);}}>Choose</button></li>))}</ul><p>You picked{selectedItem.title}.</p></>);}\n```\n\n\nThe state used to be duplicated like this:\n\n* items = [{ id: 0, title: 'pretzels'}, ...]\n* selectedItem = {id: 0, title: 'pretzels'}\n\nBut after the change it\u2019s like this:\n\n* items = [{ id: 0, title: 'pretzels'}, ...]\n* selectedId = 0\n\nThe duplication is gone, and you only keep the essential state!\n\nNow if you edit the selected item, the message below will update immediately. This is because setItems triggers a re-render, and items.find(...) would find the item with the updated title. You didn\u2019t need to hold the selected item in state, because only the selected ID is essential. The rest could be calculated during render.", "source": "https://react.dev/learn/choosing-the-state-structure", "category": "Choosing the State Structure"}
{"instruction": "Show me a code example of Avoid duplication in state in React.", "input": "", "output": "This menu list component lets you choose a single travel snack out of several:\n\n\n```javascript\nimport{useState}from'react';constinitialItems=[{title:'pretzels',id:0},{title:'crispy seaweed',id:1},{title:'granola bar',id:2},];exportdefaultfunctionMenu(){const[items,setItems]=useState(initialItems);const[selectedItem,setSelectedItem]=useState(items[0]);return(<><h2>What's your travel snack?</h2><ul>{items.map(item=>(<likey={item.id}>{item.title}{' '}<buttononClick={()=>{setSelectedItem(item);}}>Choose</button></li>))}</ul><p>You picked{selectedItem.title}.</p></>);}\n```\n\n\nCurrently, it stores the selected item as an object in the selectedItem state variable. However, this is not great: the contents of the selectedItem is the same object as one of the items inside the items list. This means that the information about the item itself is duplicated in two places.\n\nWhy is this a problem? Let\u2019s make each item editable:\n\n\n```javascript\nimport{useState}from'react';constinitialItems=[{title:'pretzels',id:0},{title:'crispy seaweed',id:1},{title:'granola bar',id:2},];exportdefaultfunctionMenu(){const[items,setItems]=useState(initialItems);const[selectedItem,setSelectedItem]=useState(items[0]);functionhandleItemChange(id,e){setItems(items.map(item=>{if(item.id===id){return{...item,title:e.target.value,};}else{returnitem;}}));}return(<><h2>What's your travel snack?</h2><ul>{items.map((item,index)=>(<likey={item.id}><inputvalue={item.title}onChange={e=>{handleItemChange(item.id,e)}}/>{' '}<buttononClick={()=>{setSelectedItem(item);}}>Choose</button></li>))}</ul><p>You picked{selectedItem.title}.</p></>);}\n```\n\n\nNotice how if you first click \u201cChoose\u201d on an item and then edit it, the input updates but the label at the bottom does not reflect the edits. This is because you have duplicated state, and you forgot to update selectedItem .\n\nAlthough you could update selectedItem too, an easier fix is to remove duplication. In this example, instead of a selectedItem object (which creates a duplication with objects inside items ), you hold the selectedId in state, and then get the selectedItem by searching the items array for an item with that ID:\n\n\n```javascript\nimport{useState}from'react';constinitialItems=[{title:'pretzels',id:0},{title:'crispy seaweed',id:1},{title:'granola bar',id:2},];exportdefaultfunctionMenu(){const[items,setItems]=useState(initialItems);const[selectedId,setSelectedId]=useState(0);constselectedItem=items.find(item=>item.id===selectedId);functionhandleItemChange(id,e){setItems(items.map(item=>{if(item.id===id){return{...item,title:e.target.value,};}else{returnitem;}}));}return(<><h2>What's your travel snack?</h2><ul>{items.map((item,index)=>(<likey={item.id}><inputvalue={item.title}onChange={e=>{handleItemChange(item.id,e)}}/>{' '}<buttononClick={()=>{setSelectedId(item.id);}}>Choose</button></li>))}</ul><p>You picked{selectedItem.title}.</p></>);}\n```\n\n\nThe state used to be duplicated like this:\n\n* items = [{ id: 0, title: 'pretzels'}, ...]\n* selectedItem = {id: 0, title: 'pretzels'}\n\nBut after the change it\u2019s like this:\n\n* items = [{ id: 0, title: 'pretzels'}, ...]\n* selectedId = 0\n\nThe duplication is gone, and you only keep the essential state!\n\nNow if you edit the selected item, the message below will update immediately. This is because setItems triggers a re-render, and items.find(...) would find the item with the updated title. You didn\u2019t need to hold the selected item in state, because only the selected ID is essential. The rest could be calculated during render.", "source": "https://react.dev/learn/choosing-the-state-structure", "category": "Choosing the State Structure"}
{"instruction": "Explain the concept of Avoid deeply nested state in React.", "input": "", "output": "Imagine a travel plan consisting of planets, continents, and countries. You might be tempted to structure its state using nested objects and arrays, like in this example:\n\n\n```javascript\nexportconstinitialTravelPlan={id:0,title:'(Root)',childPlaces:[{id:1,title:'Earth',childPlaces:[{id:2,title:'Africa',childPlaces:[{id:3,title:'Botswana',childPlaces:[]},{id:4,title:'Egypt',childPlaces:[]},{id:5,title:'Kenya',childPlaces:[]},{id:6,title:'Madagascar',childPlaces:[]},{id:7,title:'Morocco',childPlaces:[]},{id:8,title:'Nigeria',childPlaces:[]},{id:9,title:'South Africa',childPlaces:[]}]},{id:10,title:'Americas',childPlaces:[{id:11,title:'Argentina',childPlaces:[]},{id:12,title:'Brazil',childPlaces:[]},{id:13,title:'Barbados',childPlaces:[]},{id:14,title:'Canada',childPlaces:[]},{id:15,title:'Jamaica',childPlaces:[]},{id:16,title:'Mexico',childPlaces:[]},{id:17,title:'Trinidad and Tobago',childPlaces:[]},{id:18,title:'Venezuela',childPlaces:[]}]},{id:19,title:'Asia',childPlaces:[{id:20,title:'China',childPlaces:[]},{id:21,title:'India',childPlaces:[]},{id:22,title:'Singapore',childPlaces:[]},{id:23,title:'South Korea',childPlaces:[]},{id:24,title:'Thailand',childPlaces:[]},{id:25,title:'Vietnam',childPlaces:[]}]},{id:26,title:'Europe',childPlaces:[{id:27,title:'Croatia',childPlaces:[],},{id:28,title:'France',childPlaces:[],},{id:29,title:'Germany',childPlaces:[],},{id:30,title:'Italy',childPlaces:[],},{id:31,title:'Portugal',childPlaces:[],},{id:32,title:'Spain',childPlaces:[],},{id:33,title:'Turkey',childPlaces:[],}]},{id:34,title:'Oceania',childPlaces:[{id:35,title:'Australia',childPlaces:[],},{id:36,title:'Bora Bora (French Polynesia)',childPlaces:[],},{id:37,title:'Easter Island (Chile)',childPlaces:[],},{id:38,title:'Fiji',childPlaces:[],},{id:39,title:'Hawaii (the USA)',childPlaces:[],},{id:40,title:'New Zealand',childPlaces:[],},{id:41,title:'Vanuatu',childPlaces:[],}]}]},{id:42,title:'Moon',childPlaces:[{id:43,title:'Rheita',childPlaces:[]},{id:44,title:'Piccolomini',childPlaces:[]},{id:45,title:'Tycho',childPlaces:[]}]},{id:46,title:'Mars',childPlaces:[{id:47,title:'Corn Town',childPlaces:[]},{id:48,title:'Green Hill',childPlaces:[]}]}]};\n```\n\n\nNow let\u2019s say you want to add a button to delete a place you\u2019ve already visited. How would you go about it? Updating nested state involves making copies of objects all the way up from the part that changed. Deleting a deeply nested place would involve copying its entire parent place chain. Such code can be very verbose.\n\nIf the state is too nested to update easily, consider making it \u201cflat\u201d. Here is one way you can restructure this data. Instead of a tree-like structure where each place has an array of its child places , you can have each place hold an array of its child place IDs . Then store a mapping from each place ID to the corresponding place.\n\nThis data restructuring might remind you of seeing a database table:\n\n\n```javascript\nexportconstinitialTravelPlan={0:{id:0,title:'(Root)',childIds:[1,42,46],},1:{id:1,title:'Earth',childIds:[2,10,19,26,34]},2:{id:2,title:'Africa',childIds:[3,4,5,6,7,8,9]},3:{id:3,title:'Botswana',childIds:[]},4:{id:4,title:'Egypt',childIds:[]},5:{id:5,title:'Kenya',childIds:[]},6:{id:6,title:'Madagascar',childIds:[]},7:{id:7,title:'Morocco',childIds:[]},8:{id:8,title:'Nigeria',childIds:[]},9:{id:9,title:'South Africa',childIds:[]},10:{id:10,title:'Americas',childIds:[11,12,13,14,15,16,17,18],},11:{id:11,title:'Argentina',childIds:[]},12:{id:12,title:'Brazil',childIds:[]},13:{id:13,title:'Barbados',childIds:[]},14:{id:14,title:'Canada',childIds:[]},15:{id:15,title:'Jamaica',childIds:[]},16:{id:16,title:'Mexico',childIds:[]},17:{id:17,title:'Trinidad and Tobago',childIds:[]},18:{id:18,title:'Venezuela',childIds:[]},19:{id:19,title:'Asia',childIds:[20,21,22,23,24,25],},20:{id:20,title:'China',childIds:[]},21:{id:21,title:'India',childIds:[]},22:{id:22,title:'Singapore',childIds:[]},23:{id:23,title:'South Korea',childIds:[]},24:{id:24,title:'Thailand',childIds:[]},25:{id:25,title:'Vietnam',childIds:[]},26:{id:26,title:'Europe',childIds:[27,28,29,30,31,32,33],},27:{id:27,title:'Croatia',childIds:[]},28:{id:28,title:'France',childIds:[]},29:{id:29,title:'Germany',childIds:[]},30:{id:30,title:'Italy',childIds:[]},31:{id:31,title:'Portugal',childIds:[]},32:{id:32,title:'Spain',childIds:[]},33:{id:33,title:'Turkey',childIds:[]},34:{id:34,title:'Oceania',childIds:[35,36,37,38,39,40,41],},35:{id:35,title:'Australia',childIds:[]},36:{id:36,title:'Bora Bora (French Polynesia)',childIds:[]},37:{id:37,title:'Easter Island (Chile)',childIds:[]},38:{id:38,title:'Fiji',childIds:[]},39:{id:40,title:'Hawaii (the USA)',childIds:[]},40:{id:40,title:'New Zealand',childIds:[]},41:{id:41,title:'Vanuatu',childIds:[]},42:{id:42,title:'Moon',childIds:[43,44,45]},43:{id:43,title:'Rheita',childIds:[]},44:{id:44,title:'Piccolomini',childIds:[]},45:{id:45,title:'Tycho',childIds:[]},46:{id:46,title:'Mars',childIds:[47,48]},47:{id:47,title:'Corn Town',childIds:[]},48:{id:48,title:'Green Hill',childIds:[]}};\n```\n\n\nNow that the state is \u201cflat\u201d (also known as \u201cnormalized\u201d), updating nested items becomes easier.\n\nIn order to remove a place now, you only need to update two levels of state:\n\n* The updated version of its parent place should exclude the removed ID from its childIds array.\n* The updated version of the root \u201ctable\u201d object should include the updated version of the parent place.\n\nHere is an example of how you could go about it:\n\n\n```javascript\nimport{useState}from'react';import{initialTravelPlan}from'./places.js';exportdefaultfunctionTravelPlan(){const[plan,setPlan]=useState(initialTravelPlan);functionhandleComplete(parentId,childId){constparent=plan[parentId];// Create a new version of the parent place// that doesn't include this child ID.constnextParent={...parent,childIds:parent.childIds.filter(id=>id!==childId)};// Update the root state object...setPlan({...plan,// ...so that it has the updated parent.[parentId]:nextParent});}constroot=plan[0];constplanetIds=root.childIds;return(<><h2>Places to visit</h2><ol>{planetIds.map(id=>(<PlaceTreekey={id}id={id}parentId={0}placesById={plan}onComplete={handleComplete}/>))}</ol></>);}functionPlaceTree({id,parentId,placesById,onComplete}){constplace=placesById[id];constchildIds=place.childIds;return(<li>{place.title}<buttononClick={()=>{onComplete(parentId,id);}}>Complete</button>{childIds.length>0&&<ol>{childIds.map(childId=>(<PlaceTreekey={childId}id={childId}parentId={id}placesById={placesById}onComplete={onComplete}/>))}</ol>}</li>);}\n```\n\n\nYou can nest state as much as you like, but making it \u201cflat\u201d can solve numerous problems. It makes state easier to update, and it helps ensure you don\u2019t have duplication in different parts of a nested object.\n\nIdeally, you would also remove the deleted items (and their children!) from the \u201ctable\u201d object to improve memory usage. This version does that. It also uses Immer to make the update logic more concise.\n\n\n```javascript\n{\"dependencies\":{\"immer\":\"1.7.3\",\"react\":\"latest\",\"react-dom\":\"latest\",\"react-scripts\":\"latest\",\"use-immer\":\"0.5.1\"},\"scripts\":{\"start\":\"react-scripts start\",\"build\":\"react-scripts build\",\"test\":\"react-scripts test --env=jsdom\",\"eject\":\"react-scripts eject\"},\"devDependencies\":{}}\n```\n\n\nSometimes, you can also reduce state nesting by moving some of the nested state into the child components. This works well for ephemeral UI state that doesn\u2019t need to be stored, like whether an item is hovered.", "source": "https://react.dev/learn/choosing-the-state-structure", "category": "Choosing the State Structure"}
{"instruction": "Show me a code example of Avoid deeply nested state in React.", "input": "", "output": "Imagine a travel plan consisting of planets, continents, and countries. You might be tempted to structure its state using nested objects and arrays, like in this example:\n\n\n```javascript\nexportconstinitialTravelPlan={id:0,title:'(Root)',childPlaces:[{id:1,title:'Earth',childPlaces:[{id:2,title:'Africa',childPlaces:[{id:3,title:'Botswana',childPlaces:[]},{id:4,title:'Egypt',childPlaces:[]},{id:5,title:'Kenya',childPlaces:[]},{id:6,title:'Madagascar',childPlaces:[]},{id:7,title:'Morocco',childPlaces:[]},{id:8,title:'Nigeria',childPlaces:[]},{id:9,title:'South Africa',childPlaces:[]}]},{id:10,title:'Americas',childPlaces:[{id:11,title:'Argentina',childPlaces:[]},{id:12,title:'Brazil',childPlaces:[]},{id:13,title:'Barbados',childPlaces:[]},{id:14,title:'Canada',childPlaces:[]},{id:15,title:'Jamaica',childPlaces:[]},{id:16,title:'Mexico',childPlaces:[]},{id:17,title:'Trinidad and Tobago',childPlaces:[]},{id:18,title:'Venezuela',childPlaces:[]}]},{id:19,title:'Asia',childPlaces:[{id:20,title:'China',childPlaces:[]},{id:21,title:'India',childPlaces:[]},{id:22,title:'Singapore',childPlaces:[]},{id:23,title:'South Korea',childPlaces:[]},{id:24,title:'Thailand',childPlaces:[]},{id:25,title:'Vietnam',childPlaces:[]}]},{id:26,title:'Europe',childPlaces:[{id:27,title:'Croatia',childPlaces:[],},{id:28,title:'France',childPlaces:[],},{id:29,title:'Germany',childPlaces:[],},{id:30,title:'Italy',childPlaces:[],},{id:31,title:'Portugal',childPlaces:[],},{id:32,title:'Spain',childPlaces:[],},{id:33,title:'Turkey',childPlaces:[],}]},{id:34,title:'Oceania',childPlaces:[{id:35,title:'Australia',childPlaces:[],},{id:36,title:'Bora Bora (French Polynesia)',childPlaces:[],},{id:37,title:'Easter Island (Chile)',childPlaces:[],},{id:38,title:'Fiji',childPlaces:[],},{id:39,title:'Hawaii (the USA)',childPlaces:[],},{id:40,title:'New Zealand',childPlaces:[],},{id:41,title:'Vanuatu',childPlaces:[],}]}]},{id:42,title:'Moon',childPlaces:[{id:43,title:'Rheita',childPlaces:[]},{id:44,title:'Piccolomini',childPlaces:[]},{id:45,title:'Tycho',childPlaces:[]}]},{id:46,title:'Mars',childPlaces:[{id:47,title:'Corn Town',childPlaces:[]},{id:48,title:'Green Hill',childPlaces:[]}]}]};\n```\n\n\nNow let\u2019s say you want to add a button to delete a place you\u2019ve already visited. How would you go about it? Updating nested state involves making copies of objects all the way up from the part that changed. Deleting a deeply nested place would involve copying its entire parent place chain. Such code can be very verbose.\n\nIf the state is too nested to update easily, consider making it \u201cflat\u201d. Here is one way you can restructure this data. Instead of a tree-like structure where each place has an array of its child places , you can have each place hold an array of its child place IDs . Then store a mapping from each place ID to the corresponding place.\n\nThis data restructuring might remind you of seeing a database table:\n\n\n```javascript\nexportconstinitialTravelPlan={0:{id:0,title:'(Root)',childIds:[1,42,46],},1:{id:1,title:'Earth',childIds:[2,10,19,26,34]},2:{id:2,title:'Africa',childIds:[3,4,5,6,7,8,9]},3:{id:3,title:'Botswana',childIds:[]},4:{id:4,title:'Egypt',childIds:[]},5:{id:5,title:'Kenya',childIds:[]},6:{id:6,title:'Madagascar',childIds:[]},7:{id:7,title:'Morocco',childIds:[]},8:{id:8,title:'Nigeria',childIds:[]},9:{id:9,title:'South Africa',childIds:[]},10:{id:10,title:'Americas',childIds:[11,12,13,14,15,16,17,18],},11:{id:11,title:'Argentina',childIds:[]},12:{id:12,title:'Brazil',childIds:[]},13:{id:13,title:'Barbados',childIds:[]},14:{id:14,title:'Canada',childIds:[]},15:{id:15,title:'Jamaica',childIds:[]},16:{id:16,title:'Mexico',childIds:[]},17:{id:17,title:'Trinidad and Tobago',childIds:[]},18:{id:18,title:'Venezuela',childIds:[]},19:{id:19,title:'Asia',childIds:[20,21,22,23,24,25],},20:{id:20,title:'China',childIds:[]},21:{id:21,title:'India',childIds:[]},22:{id:22,title:'Singapore',childIds:[]},23:{id:23,title:'South Korea',childIds:[]},24:{id:24,title:'Thailand',childIds:[]},25:{id:25,title:'Vietnam',childIds:[]},26:{id:26,title:'Europe',childIds:[27,28,29,30,31,32,33],},27:{id:27,title:'Croatia',childIds:[]},28:{id:28,title:'France',childIds:[]},29:{id:29,title:'Germany',childIds:[]},30:{id:30,title:'Italy',childIds:[]},31:{id:31,title:'Portugal',childIds:[]},32:{id:32,title:'Spain',childIds:[]},33:{id:33,title:'Turkey',childIds:[]},34:{id:34,title:'Oceania',childIds:[35,36,37,38,39,40,41],},35:{id:35,title:'Australia',childIds:[]},36:{id:36,title:'Bora Bora (French Polynesia)',childIds:[]},37:{id:37,title:'Easter Island (Chile)',childIds:[]},38:{id:38,title:'Fiji',childIds:[]},39:{id:40,title:'Hawaii (the USA)',childIds:[]},40:{id:40,title:'New Zealand',childIds:[]},41:{id:41,title:'Vanuatu',childIds:[]},42:{id:42,title:'Moon',childIds:[43,44,45]},43:{id:43,title:'Rheita',childIds:[]},44:{id:44,title:'Piccolomini',childIds:[]},45:{id:45,title:'Tycho',childIds:[]},46:{id:46,title:'Mars',childIds:[47,48]},47:{id:47,title:'Corn Town',childIds:[]},48:{id:48,title:'Green Hill',childIds:[]}};\n```\n\n\nNow that the state is \u201cflat\u201d (also known as \u201cnormalized\u201d), updating nested items becomes easier.\n\nIn order to remove a place now, you only need to update two levels of state:\n\n* The updated version of its parent place should exclude the removed ID from its childIds array.\n* The updated version of the root \u201ctable\u201d object should include the updated version of the parent place.\n\nHere is an example of how you could go about it:\n\n\n```javascript\nimport{useState}from'react';import{initialTravelPlan}from'./places.js';exportdefaultfunctionTravelPlan(){const[plan,setPlan]=useState(initialTravelPlan);functionhandleComplete(parentId,childId){constparent=plan[parentId];// Create a new version of the parent place// that doesn't include this child ID.constnextParent={...parent,childIds:parent.childIds.filter(id=>id!==childId)};// Update the root state object...setPlan({...plan,// ...so that it has the updated parent.[parentId]:nextParent});}constroot=plan[0];constplanetIds=root.childIds;return(<><h2>Places to visit</h2><ol>{planetIds.map(id=>(<PlaceTreekey={id}id={id}parentId={0}placesById={plan}onComplete={handleComplete}/>))}</ol></>);}functionPlaceTree({id,parentId,placesById,onComplete}){constplace=placesById[id];constchildIds=place.childIds;return(<li>{place.title}<buttononClick={()=>{onComplete(parentId,id);}}>Complete</button>{childIds.length>0&&<ol>{childIds.map(childId=>(<PlaceTreekey={childId}id={childId}parentId={id}placesById={placesById}onComplete={onComplete}/>))}</ol>}</li>);}\n```\n\n\nYou can nest state as much as you like, but making it \u201cflat\u201d can solve numerous problems. It makes state easier to update, and it helps ensure you don\u2019t have duplication in different parts of a nested object.\n\nIdeally, you would also remove the deleted items (and their children!) from the \u201ctable\u201d object to improve memory usage. This version does that. It also uses Immer to make the update logic more concise.\n\n\n```javascript\n{\"dependencies\":{\"immer\":\"1.7.3\",\"react\":\"latest\",\"react-dom\":\"latest\",\"react-scripts\":\"latest\",\"use-immer\":\"0.5.1\"},\"scripts\":{\"start\":\"react-scripts start\",\"build\":\"react-scripts build\",\"test\":\"react-scripts test --env=jsdom\",\"eject\":\"react-scripts eject\"},\"devDependencies\":{}}\n```\n\n\nSometimes, you can also reduce state nesting by moving some of the nested state into the child components. This works well for ephemeral UI state that doesn\u2019t need to be stored, like whether an item is hovered.", "source": "https://react.dev/learn/choosing-the-state-structure", "category": "Choosing the State Structure"}
{"instruction": "Explain the concept of Conditionally returning JSX in React.", "input": "", "output": "Let\u2019s say you have a PackingList component rendering several Item s, which can be marked as packed or not:\n\n\n```javascript\nfunctionItem({name,isPacked}){return<liclassName=\"item\">{name}</li>;}exportdefaultfunctionPackingList(){return(<section><h1>Sally Ride's Packing List</h1><ul><ItemisPacked={true}name=\"Space suit\"/><ItemisPacked={true}name=\"Helmet with a golden leaf\"/><ItemisPacked={false}name=\"Photo of Tam\"/></ul></section>);}\n```\n\n\nNotice that some of the Item components have their isPacked prop set to true instead of false . You want to add a checkmark (\u2705) to packed items if isPacked={true} .\n\nYou can write this as an if / else statement like so:\n\n\n```javascript\nif(isPacked){return<liclassName=\"item\">{name}\u2705</li>;}return<liclassName=\"item\">{name}</li>;\n```\n\n\nIf the isPacked prop is true , this code returns a different JSX tree. With this change, some of the items get a checkmark at the end:\n\n\n```javascript\nfunctionItem({name,isPacked}){if(isPacked){return<liclassName=\"item\">{name}\u2705</li>;}return<liclassName=\"item\">{name}</li>;}exportdefaultfunctionPackingList(){return(<section><h1>Sally Ride's Packing List</h1><ul><ItemisPacked={true}name=\"Space suit\"/><ItemisPacked={true}name=\"Helmet with a golden leaf\"/><ItemisPacked={false}name=\"Photo of Tam\"/></ul></section>);}\n```\n\n\nTry editing what gets returned in either case, and see how the result changes!\n\nNotice how you\u2019re creating branching logic with JavaScript\u2019s if and return statements. In React, control flow (like conditions) is handled by JavaScript.\n\n\n### Conditionally returning nothing withnull\n\n\nIn some situations, you won\u2019t want to render anything at all. For example, say you don\u2019t want to show packed items at all. A component must return something. In this case, you can return null :\n\n\n```javascript\nif(isPacked){returnnull;}return<liclassName=\"item\">{name}</li>;\n```\n\n\nIf isPacked is true, the component will return nothing, null . Otherwise, it will return JSX to render.\n\n\n```javascript\nfunctionItem({name,isPacked}){if(isPacked){returnnull;}return<liclassName=\"item\">{name}</li>;}exportdefaultfunctionPackingList(){return(<section><h1>Sally Ride's Packing List</h1><ul><ItemisPacked={true}name=\"Space suit\"/><ItemisPacked={true}name=\"Helmet with a golden leaf\"/><ItemisPacked={false}name=\"Photo of Tam\"/></ul></section>);}\n```\n\n\nIn practice, returning null from a component isn\u2019t common because it might surprise a developer trying to render it. More often, you would conditionally include or exclude the component in the parent component\u2019s JSX. Here\u2019s how to do that!", "source": "https://react.dev/learn/conditional-rendering", "category": "Conditional Rendering"}
{"instruction": "Show me a code example of Conditionally returning JSX in React.", "input": "", "output": "Let\u2019s say you have a PackingList component rendering several Item s, which can be marked as packed or not:\n\n\n```javascript\nfunctionItem({name,isPacked}){return<liclassName=\"item\">{name}</li>;}exportdefaultfunctionPackingList(){return(<section><h1>Sally Ride's Packing List</h1><ul><ItemisPacked={true}name=\"Space suit\"/><ItemisPacked={true}name=\"Helmet with a golden leaf\"/><ItemisPacked={false}name=\"Photo of Tam\"/></ul></section>);}\n```\n\n\nNotice that some of the Item components have their isPacked prop set to true instead of false . You want to add a checkmark (\u2705) to packed items if isPacked={true} .\n\nYou can write this as an if / else statement like so:\n\n\n```javascript\nif(isPacked){return<liclassName=\"item\">{name}\u2705</li>;}return<liclassName=\"item\">{name}</li>;\n```\n\n\nIf the isPacked prop is true , this code returns a different JSX tree. With this change, some of the items get a checkmark at the end:\n\n\n```javascript\nfunctionItem({name,isPacked}){if(isPacked){return<liclassName=\"item\">{name}\u2705</li>;}return<liclassName=\"item\">{name}</li>;}exportdefaultfunctionPackingList(){return(<section><h1>Sally Ride's Packing List</h1><ul><ItemisPacked={true}name=\"Space suit\"/><ItemisPacked={true}name=\"Helmet with a golden leaf\"/><ItemisPacked={false}name=\"Photo of Tam\"/></ul></section>);}\n```\n\n\nTry editing what gets returned in either case, and see how the result changes!\n\nNotice how you\u2019re creating branching logic with JavaScript\u2019s if and return statements. In React, control flow (like conditions) is handled by JavaScript.\n\n\n### Conditionally returning nothing withnull\n\n\nIn some situations, you won\u2019t want to render anything at all. For example, say you don\u2019t want to show packed items at all. A component must return something. In this case, you can return null :\n\n\n```javascript\nif(isPacked){returnnull;}return<liclassName=\"item\">{name}</li>;\n```\n\n\nIf isPacked is true, the component will return nothing, null . Otherwise, it will return JSX to render.\n\n\n```javascript\nfunctionItem({name,isPacked}){if(isPacked){returnnull;}return<liclassName=\"item\">{name}</li>;}exportdefaultfunctionPackingList(){return(<section><h1>Sally Ride's Packing List</h1><ul><ItemisPacked={true}name=\"Space suit\"/><ItemisPacked={true}name=\"Helmet with a golden leaf\"/><ItemisPacked={false}name=\"Photo of Tam\"/></ul></section>);}\n```\n\n\nIn practice, returning null from a component isn\u2019t common because it might surprise a developer trying to render it. More often, you would conditionally include or exclude the component in the parent component\u2019s JSX. Here\u2019s how to do that!", "source": "https://react.dev/learn/conditional-rendering", "category": "Conditional Rendering"}
{"instruction": "Tell me about Conditionally including JSX.", "input": "", "output": "In the previous example, you controlled which (if any!) JSX tree would be returned by the component. You may already have noticed some duplication in the render output:\n\n\n```javascript\n<liclassName=\"item\">{name}\u2705</li>\n```\n\n\nis very similar to\n\n\n```javascript\n<liclassName=\"item\">{name}</li>\n```\n\n\nBoth of the conditional branches return <li className=\"item\">...</li> :\n\n\n```javascript\nif(isPacked){return<liclassName=\"item\">{name}\u2705</li>;}return<liclassName=\"item\">{name}</li>;\n```\n\n\nWhile this duplication isn\u2019t harmful, it could make your code harder to maintain. What if you want to change the className ? You\u2019d have to do it in two places in your code! In such a situation, you could conditionally include a little JSX to make your code more DRY.\n\n\n### Conditional (ternary) operator (? :)\n\n\nJavaScript has a compact syntax for writing a conditional expression \u2014 the conditional operator or \u201cternary operator\u201d.\n\nInstead of this:\n\n\n```javascript\nif(isPacked){return<liclassName=\"item\">{name}\u2705</li>;}return<liclassName=\"item\">{name}</li>;\n```\n\n\nYou can write this:\n\n\n```javascript\nreturn(<liclassName=\"item\">{isPacked?name+' \u2705':name}</li>);\n```\n\n\nYou can read it as \u201cif isPacked is true, then ( ? ) render name + ' \u2705' , otherwise ( : ) render name \u201d .\n\nIf you\u2019re coming from an object-oriented programming background, you might assume that the two examples above are subtly different because one of them may create two different \u201cinstances\u201d of <li> . But JSX elements aren\u2019t \u201cinstances\u201d because they don\u2019t hold any internal state and aren\u2019t real DOM nodes. They\u2019re lightweight descriptions, like blueprints. So these two examples, in fact, are completely equivalent. Preserving and Resetting State goes into detail about how this works.\n\nNow let\u2019s say you want to wrap the completed item\u2019s text into another HTML tag, like <del> to strike it out. You can add even more newlines and parentheses so that it\u2019s easier to nest more JSX in each of the cases:\n\n\n```javascript\nfunctionItem({name,isPacked}){return(<liclassName=\"item\">{isPacked?(<del>{name+' \u2705'}</del>):(name)}</li>);}exportdefaultfunctionPackingList(){return(<section><h1>Sally Ride's Packing List</h1><ul><ItemisPacked={true}name=\"Space suit\"/><ItemisPacked={true}name=\"Helmet with a golden leaf\"/><ItemisPacked={false}name=\"Photo of Tam\"/></ul></section>);}\n```\n\n\nThis style works well for simple conditions, but use it in moderation. If your components get messy with too much nested conditional markup, consider extracting child components to clean things up. In React, markup is a part of your code, so you can use tools like variables and functions to tidy up complex expressions.\n\n\n### Logical AND operator (&&)\n\n\nAnother common shortcut you\u2019ll encounter is the JavaScript logical AND ( && ) operator. Inside React components, it often comes up when you want to render some JSX when the condition is true, or render nothing otherwise. With && , you could conditionally render the checkmark only if isPacked is true :\n\n\n```javascript\nreturn(<liclassName=\"item\">{name}{isPacked&&'\u2705'}</li>);\n```\n\n\nYou can read this as \u201cif isPacked , then ( && ) render the checkmark, otherwise, render nothing\u201d .\n\nHere it is in action:\n\n\n```javascript\nfunctionItem({name,isPacked}){return(<liclassName=\"item\">{name}{isPacked&&'\u2705'}</li>);}exportdefaultfunctionPackingList(){return(<section><h1>Sally Ride's Packing List</h1><ul><ItemisPacked={true}name=\"Space suit\"/><ItemisPacked={true}name=\"Helmet with a golden leaf\"/><ItemisPacked={false}name=\"Photo of Tam\"/></ul></section>);}\n```\n\n\nA JavaScript && expression returns the value of its right side (in our case, the checkmark) if the left side (our condition) is true . But if the condition is false , the whole expression becomes false . React considers false as a \u201chole\u201d in the JSX tree, just like null or undefined , and doesn\u2019t render anything in its place.\n\n\n### Pitfall\n\n\nDon\u2019t put numbers on the left side of && .\n\nTo test the condition, JavaScript converts the left side to a boolean automatically. However, if the left side is 0 , then the whole expression gets that value ( 0 ), and React will happily render 0 rather than nothing.\n\nFor example, a common mistake is to write code like messageCount && <p>New messages</p> . It\u2019s easy to assume that it renders nothing when messageCount is 0 , but it really renders the 0 itself!\n\nTo fix it, make the left side a boolean: messageCount > 0 && <p>New messages</p> .\n\n\n### Conditionally assigning JSX to a variable\n\n\nWhen the shortcuts get in the way of writing plain code, try using an if statement and a variable. You can reassign variables defined with let , so start by providing the default content you want to display, the name:\n\n\n```javascript\nletitemContent=name;\n```\n\n\nUse an if statement to reassign a JSX expression to itemContent if isPacked is true :\n\n\n```javascript\nif(isPacked){itemContent=name+\" \u2705\";}\n```\n\n\nCurly braces open the \u201cwindow into JavaScript\u201d. Embed the variable with curly braces in the returned JSX tree, nesting the previously calculated expression inside of JSX:\n\n\n```javascript\n<liclassName=\"item\">{itemContent}</li>\n```\n\n\nThis style is the most verbose, but it\u2019s also the most flexible. Here it is in action:\n\n\n```javascript\nfunctionItem({name,isPacked}){letitemContent=name;if(isPacked){itemContent=name+\" \u2705\";}return(<liclassName=\"item\">{itemContent}</li>);}exportdefaultfunctionPackingList(){return(<section><h1>Sally Ride's Packing List</h1><ul><ItemisPacked={true}name=\"Space suit\"/><ItemisPacked={true}name=\"Helmet with a golden leaf\"/><ItemisPacked={false}name=\"Photo of Tam\"/></ul></section>);}\n```\n\n\nLike before, this works not only for text, but for arbitrary JSX too:\n\n\n```javascript\nfunctionItem({name,isPacked}){letitemContent=name;if(isPacked){itemContent=(<del>{name+\" \u2705\"}</del>);}return(<liclassName=\"item\">{itemContent}</li>);}exportdefaultfunctionPackingList(){return(<section><h1>Sally Ride's Packing List</h1><ul><ItemisPacked={true}name=\"Space suit\"/><ItemisPacked={true}name=\"Helmet with a golden leaf\"/><ItemisPacked={false}name=\"Photo of Tam\"/></ul></section>);}\n```\n\n\nIf you\u2019re not familiar with JavaScript, this variety of styles might seem overwhelming at first. However, learning them will help you read and write any JavaScript code \u2014 and not just React components! Pick the one you prefer for a start, and then consult this reference again if you forget how the other ones work.", "source": "https://react.dev/learn/conditional-rendering", "category": "Conditional Rendering"}
{"instruction": "Show me a code example of Conditionally including JSX in React.", "input": "", "output": "In the previous example, you controlled which (if any!) JSX tree would be returned by the component. You may already have noticed some duplication in the render output:\n\n\n```javascript\n<liclassName=\"item\">{name}\u2705</li>\n```\n\n\nis very similar to\n\n\n```javascript\n<liclassName=\"item\">{name}</li>\n```\n\n\nBoth of the conditional branches return <li className=\"item\">...</li> :\n\n\n```javascript\nif(isPacked){return<liclassName=\"item\">{name}\u2705</li>;}return<liclassName=\"item\">{name}</li>;\n```\n\n\nWhile this duplication isn\u2019t harmful, it could make your code harder to maintain. What if you want to change the className ? You\u2019d have to do it in two places in your code! In such a situation, you could conditionally include a little JSX to make your code more DRY.\n\n\n### Conditional (ternary) operator (? :)\n\n\nJavaScript has a compact syntax for writing a conditional expression \u2014 the conditional operator or \u201cternary operator\u201d.\n\nInstead of this:\n\n\n```javascript\nif(isPacked){return<liclassName=\"item\">{name}\u2705</li>;}return<liclassName=\"item\">{name}</li>;\n```\n\n\nYou can write this:\n\n\n```javascript\nreturn(<liclassName=\"item\">{isPacked?name+' \u2705':name}</li>);\n```\n\n\nYou can read it as \u201cif isPacked is true, then ( ? ) render name + ' \u2705' , otherwise ( : ) render name \u201d .\n\nIf you\u2019re coming from an object-oriented programming background, you might assume that the two examples above are subtly different because one of them may create two different \u201cinstances\u201d of <li> . But JSX elements aren\u2019t \u201cinstances\u201d because they don\u2019t hold any internal state and aren\u2019t real DOM nodes. They\u2019re lightweight descriptions, like blueprints. So these two examples, in fact, are completely equivalent. Preserving and Resetting State goes into detail about how this works.\n\nNow let\u2019s say you want to wrap the completed item\u2019s text into another HTML tag, like <del> to strike it out. You can add even more newlines and parentheses so that it\u2019s easier to nest more JSX in each of the cases:\n\n\n```javascript\nfunctionItem({name,isPacked}){return(<liclassName=\"item\">{isPacked?(<del>{name+' \u2705'}</del>):(name)}</li>);}exportdefaultfunctionPackingList(){return(<section><h1>Sally Ride's Packing List</h1><ul><ItemisPacked={true}name=\"Space suit\"/><ItemisPacked={true}name=\"Helmet with a golden leaf\"/><ItemisPacked={false}name=\"Photo of Tam\"/></ul></section>);}\n```\n\n\nThis style works well for simple conditions, but use it in moderation. If your components get messy with too much nested conditional markup, consider extracting child components to clean things up. In React, markup is a part of your code, so you can use tools like variables and functions to tidy up complex expressions.\n\n\n### Logical AND operator (&&)\n\n\nAnother common shortcut you\u2019ll encounter is the JavaScript logical AND ( && ) operator. Inside React components, it often comes up when you want to render some JSX when the condition is true, or render nothing otherwise. With && , you could conditionally render the checkmark only if isPacked is true :\n\n\n```javascript\nreturn(<liclassName=\"item\">{name}{isPacked&&'\u2705'}</li>);\n```\n\n\nYou can read this as \u201cif isPacked , then ( && ) render the checkmark, otherwise, render nothing\u201d .\n\nHere it is in action:\n\n\n```javascript\nfunctionItem({name,isPacked}){return(<liclassName=\"item\">{name}{isPacked&&'\u2705'}</li>);}exportdefaultfunctionPackingList(){return(<section><h1>Sally Ride's Packing List</h1><ul><ItemisPacked={true}name=\"Space suit\"/><ItemisPacked={true}name=\"Helmet with a golden leaf\"/><ItemisPacked={false}name=\"Photo of Tam\"/></ul></section>);}\n```\n\n\nA JavaScript && expression returns the value of its right side (in our case, the checkmark) if the left side (our condition) is true . But if the condition is false , the whole expression becomes false . React considers false as a \u201chole\u201d in the JSX tree, just like null or undefined , and doesn\u2019t render anything in its place.\n\n\n### Pitfall\n\n\nDon\u2019t put numbers on the left side of && .\n\nTo test the condition, JavaScript converts the left side to a boolean automatically. However, if the left side is 0 , then the whole expression gets that value ( 0 ), and React will happily render 0 rather than nothing.\n\nFor example, a common mistake is to write code like messageCount && <p>New messages</p> . It\u2019s easy to assume that it renders nothing when messageCount is 0 , but it really renders the 0 itself!\n\nTo fix it, make the left side a boolean: messageCount > 0 && <p>New messages</p> .\n\n\n### Conditionally assigning JSX to a variable\n\n\nWhen the shortcuts get in the way of writing plain code, try using an if statement and a variable. You can reassign variables defined with let , so start by providing the default content you want to display, the name:\n\n\n```javascript\nletitemContent=name;\n```\n\n\nUse an if statement to reassign a JSX expression to itemContent if isPacked is true :\n\n\n```javascript\nif(isPacked){itemContent=name+\" \u2705\";}\n```\n\n\nCurly braces open the \u201cwindow into JavaScript\u201d. Embed the variable with curly braces in the returned JSX tree, nesting the previously calculated expression inside of JSX:\n\n\n```javascript\n<liclassName=\"item\">{itemContent}</li>\n```\n\n\nThis style is the most verbose, but it\u2019s also the most flexible. Here it is in action:\n\n\n```javascript\nfunctionItem({name,isPacked}){letitemContent=name;if(isPacked){itemContent=name+\" \u2705\";}return(<liclassName=\"item\">{itemContent}</li>);}exportdefaultfunctionPackingList(){return(<section><h1>Sally Ride's Packing List</h1><ul><ItemisPacked={true}name=\"Space suit\"/><ItemisPacked={true}name=\"Helmet with a golden leaf\"/><ItemisPacked={false}name=\"Photo of Tam\"/></ul></section>);}\n```\n\n\nLike before, this works not only for text, but for arbitrary JSX too:\n\n\n```javascript\nfunctionItem({name,isPacked}){letitemContent=name;if(isPacked){itemContent=(<del>{name+\" \u2705\"}</del>);}return(<liclassName=\"item\">{itemContent}</li>);}exportdefaultfunctionPackingList(){return(<section><h1>Sally Ride's Packing List</h1><ul><ItemisPacked={true}name=\"Space suit\"/><ItemisPacked={true}name=\"Helmet with a golden leaf\"/><ItemisPacked={false}name=\"Photo of Tam\"/></ul></section>);}\n```\n\n\nIf you\u2019re not familiar with JavaScript, this variety of styles might seem overwhelming at first. However, learning them will help you read and write any JavaScript code \u2014 and not just React components! Pick the one you prefer for a start, and then consult this reference again if you forget how the other ones work.", "source": "https://react.dev/learn/conditional-rendering", "category": "Conditional Rendering"}
{"instruction": "Tell me about Full-stack frameworks.", "input": "", "output": "These recommended frameworks support all the features you need to deploy and scale your app in production. They have integrated the latest React features and take advantage of React\u2019s architecture.\n\n\n### Note\n\n\nAll the frameworks on this page support client-side rendering ( CSR ), single-page apps ( SPA ), and static-site generation ( SSG ). These apps can be deployed to a CDN or static hosting service without a server. Additionally, these frameworks allow you to add server-side rendering on a per-route basis, when it makes sense for your use case.\n\nThis allows you to start with a client-only app, and if your needs change later, you can opt-in to using server features on individual routes without rewriting your app. See your framework\u2019s documentation for configuring the rendering strategy.\n\n\n### Next.js (App Router)\n\n\nNext.js\u2019s App Router is a React framework that takes full advantage of React\u2019s architecture to enable full-stack React apps.\n\nNext.js is maintained by Vercel . You can deploy a Next.js app to any hosting provider that supports Node.js or Docker containers, or to your own server. Next.js also supports static export which doesn\u2019t require a server.\n\n\n### React Router (v7)\n\n\nReact Router is the most popular routing library for React and can be paired with Vite to create a full-stack React framework . It emphasizes standard Web APIs and has several ready to deploy templates for various JavaScript runtimes and platforms.\n\nTo create a new React Router framework project, run:\n\nReact Router is maintained by Shopify .\n\n\n### Expo (for native apps)\n\n\nExpo is a React framework that lets you create universal Android, iOS, and web apps with truly native UIs. It provides an SDK for React Native that makes the native parts easier to use. To create a new Expo project, run:\n\nIf you\u2019re new to Expo, check out the Expo tutorial .\n\nExpo is maintained by Expo (the company) . Building apps with Expo is free, and you can submit them to the Google and Apple app stores without restrictions. Expo additionally provides opt-in paid cloud services.", "source": "https://react.dev/learn/creating-a-react-app", "category": "Creating a React App"}
{"instruction": "Can you describe Other frameworks in the context of React?", "input": "", "output": "There are other up-and-coming frameworks that are working towards our full stack React vision:\n\n* TanStack Start (Beta) : TanStack Start is a full-stack React framework powered by TanStack Router. It provides a full-document SSR, streaming, server functions, bundling, and more using tools like Nitro and Vite.\n* RedwoodJS : Redwood is a full stack React framework with lots of pre-installed packages and configuration that makes it easy to build full-stack web applications.\n\nNext.js\u2019s App Router bundler fully implements the official React Server Components specification . This lets you mix build-time, server-only, and interactive components in a single React tree.\n\nFor example, you can write a server-only React component as an async function that reads from a database or from a file. Then you can pass data down from it to your interactive components:\n\n\n```javascript\n// This component runs *only* on the server (or during the build).asyncfunctionTalks({confId}){// 1. You're on the server, so you can talk to your data layer. API endpoint not required.consttalks=awaitdb.Talks.findAll({confId});// 2. Add any amount of rendering logic. It won't make your JavaScript bundle larger.constvideos=talks.map(talk=>talk.video);// 3. Pass the data down to the components that will run in the browser.return<SearchableVideoListvideos={videos}/>;}\n```\n\n\nNext.js\u2019s App Router also integrates data fetching with Suspense . This lets you specify a loading state (like a skeleton placeholder) for different parts of your user interface directly in your React tree:\n\n\n```javascript\n<Suspensefallback={<TalksLoading/>}><TalksconfId={conf.id}/></Suspense>\n```\n\n\nServer Components and Suspense are React features rather than Next.js features. However, adopting them at the framework level requires buy-in and non-trivial implementation work. At the moment, the Next.js App Router is the most complete implementation. The React team is working with bundler developers to make these features easier to implement in the next generation of frameworks.", "source": "https://react.dev/learn/creating-a-react-app", "category": "Creating a React App"}
{"instruction": "Show me a code example of Other frameworks in React.", "input": "", "output": "There are other up-and-coming frameworks that are working towards our full stack React vision:\n\n* TanStack Start (Beta) : TanStack Start is a full-stack React framework powered by TanStack Router. It provides a full-document SSR, streaming, server functions, bundling, and more using tools like Nitro and Vite.\n* RedwoodJS : Redwood is a full stack React framework with lots of pre-installed packages and configuration that makes it easy to build full-stack web applications.\n\nNext.js\u2019s App Router bundler fully implements the official React Server Components specification . This lets you mix build-time, server-only, and interactive components in a single React tree.\n\nFor example, you can write a server-only React component as an async function that reads from a database or from a file. Then you can pass data down from it to your interactive components:\n\n\n```javascript\n// This component runs *only* on the server (or during the build).asyncfunctionTalks({confId}){// 1. You're on the server, so you can talk to your data layer. API endpoint not required.consttalks=awaitdb.Talks.findAll({confId});// 2. Add any amount of rendering logic. It won't make your JavaScript bundle larger.constvideos=talks.map(talk=>talk.video);// 3. Pass the data down to the components that will run in the browser.return<SearchableVideoListvideos={videos}/>;}\n```\n\n\nNext.js\u2019s App Router also integrates data fetching with Suspense . This lets you specify a loading state (like a skeleton placeholder) for different parts of your user interface directly in your React tree:\n\n\n```javascript\n<Suspensefallback={<TalksLoading/>}><TalksconfId={conf.id}/></Suspense>\n```\n\n\nServer Components and Suspense are React features rather than Next.js features. However, adopting them at the framework level requires buy-in and non-trivial implementation work. At the moment, the Next.js App Router is the most complete implementation. The React team is working with bundler developers to make these features easier to implement in the next generation of frameworks.", "source": "https://react.dev/learn/creating-a-react-app", "category": "Creating a React App"}
{"instruction": "What is Start From Scratch in React and how does it work?", "input": "", "output": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, there are other options available for starting a React project from scratch.\n\nStarting from scratch gives you more flexibility, but does require that you make choices on which tools to use for routing, data fetching, and other common usage patterns.  It\u2019s a lot like building your own framework, instead of using a framework that already exists. The frameworks we recommend have built-in solutions for these problems.\n\nIf you want to build your own solutions, see our guide to build a React app from Scratch for instructions on how to set up a new React project starting with a build tool like Vite , Parcel , or RSbuild .\n\nIf you\u2019re a framework author interested in being included on this page, please let us know .", "source": "https://react.dev/learn/creating-a-react-app", "category": "Creating a React App"}
{"instruction": "Explain the concept of Your first component in React.", "input": "", "output": "React applications are built from isolated pieces of UI called components . A React component is a JavaScript function that you can sprinkle with markup. Components can be as small as a button, or as large as an entire page. Here is a Gallery component rendering three Profile components:\n\n\n```javascript\nfunctionProfile(){return(<imgsrc=\"https://i.imgur.com/MK3eW3As.jpg\"alt=\"Katherine Johnson\"/>);}exportdefaultfunctionGallery(){return(<section><h1>Amazing scientists</h1><Profile/><Profile/><Profile/></section>);}\n```\n", "source": "https://react.dev/learn/describing-the-ui", "category": "Describing the UI"}
{"instruction": "Show me a code example of Your first component in React.", "input": "", "output": "React applications are built from isolated pieces of UI called components . A React component is a JavaScript function that you can sprinkle with markup. Components can be as small as a button, or as large as an entire page. Here is a Gallery component rendering three Profile components:\n\n\n```javascript\nfunctionProfile(){return(<imgsrc=\"https://i.imgur.com/MK3eW3As.jpg\"alt=\"Katherine Johnson\"/>);}exportdefaultfunctionGallery(){return(<section><h1>Amazing scientists</h1><Profile/><Profile/><Profile/></section>);}\n```\n", "source": "https://react.dev/learn/describing-the-ui", "category": "Describing the UI"}
{"instruction": "Tell me about Importing and exporting components.", "input": "", "output": "You can declare many components in one file, but large files can get difficult to navigate. To solve this, you can export a component into its own file, and then import that component from another file:\n\n\n```javascript\nimportProfilefrom'./Profile.js';exportdefaultfunctionGallery(){return(<section><h1>Amazing scientists</h1><Profile/><Profile/><Profile/></section>);}\n```\n", "source": "https://react.dev/learn/describing-the-ui", "category": "Describing the UI"}
{"instruction": "Show me a code example of Importing and exporting components in React.", "input": "", "output": "You can declare many components in one file, but large files can get difficult to navigate. To solve this, you can export a component into its own file, and then import that component from another file:\n\n\n```javascript\nimportProfilefrom'./Profile.js';exportdefaultfunctionGallery(){return(<section><h1>Amazing scientists</h1><Profile/><Profile/><Profile/></section>);}\n```\n", "source": "https://react.dev/learn/describing-the-ui", "category": "Describing the UI"}
{"instruction": "Explain the concept of Writing markup with JSX in React.", "input": "", "output": "Each React component is a JavaScript function that may contain some markup that React renders into the browser. React components use a syntax extension called JSX to represent that markup. JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information.\n\nIf we paste existing HTML markup into a React component, it won\u2019t always work:\n\n\n```javascript\nexportdefaultfunctionTodoList(){return(// This doesn't quite work!<h1>Hedy Lamarr's Todos</h1><imgsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"alt=\"Hedy Lamarr\"class=\"photo\"><ul><li>Invent new traffic lights<li>Rehearse a movie scene<li>Improve spectrum technology</ul>\n```\n\n\nIf you have existing HTML like this, you can fix it using a converter :\n\n\n```javascript\nexportdefaultfunctionTodoList(){return(<><h1>Hedy Lamarr's Todos</h1><imgsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"alt=\"Hedy Lamarr\"className=\"photo\"/><ul><li>Invent new traffic lights</li><li>Rehearse a movie scene</li><li>Improve spectrum technology</li></ul></>);}\n```\n", "source": "https://react.dev/learn/describing-the-ui", "category": "Describing the UI"}
{"instruction": "Show me a code example of Writing markup with JSX in React.", "input": "", "output": "Each React component is a JavaScript function that may contain some markup that React renders into the browser. React components use a syntax extension called JSX to represent that markup. JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information.\n\nIf we paste existing HTML markup into a React component, it won\u2019t always work:\n\n\n```javascript\nexportdefaultfunctionTodoList(){return(// This doesn't quite work!<h1>Hedy Lamarr's Todos</h1><imgsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"alt=\"Hedy Lamarr\"class=\"photo\"><ul><li>Invent new traffic lights<li>Rehearse a movie scene<li>Improve spectrum technology</ul>\n```\n\n\nIf you have existing HTML like this, you can fix it using a converter :\n\n\n```javascript\nexportdefaultfunctionTodoList(){return(<><h1>Hedy Lamarr's Todos</h1><imgsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"alt=\"Hedy Lamarr\"className=\"photo\"/><ul><li>Invent new traffic lights</li><li>Rehearse a movie scene</li><li>Improve spectrum technology</li></ul></>);}\n```\n", "source": "https://react.dev/learn/describing-the-ui", "category": "Describing the UI"}
{"instruction": "Can you describe JavaScript in JSX with curly braces in the context of React?", "input": "", "output": "JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to \u201copen a window\u201d to JavaScript:\n\n\n```javascript\nconstperson={name:'Gregorio Y. Zara',theme:{backgroundColor:'black',color:'pink'}};exportdefaultfunctionTodoList(){return(<divstyle={person.theme}><h1>{person.name}'s Todos</h1><imgclassName=\"avatar\"src=\"https://i.imgur.com/7vQD0fPs.jpg\"alt=\"Gregorio Y. Zara\"/><ul><li>Improve the videophone</li><li>Prepare aeronautics lectures</li><li>Work on the alcohol-fuelled engine</li></ul></div>);}\n```\n", "source": "https://react.dev/learn/describing-the-ui", "category": "Describing the UI"}
{"instruction": "Show me a code example of JavaScript in JSX with curly braces in React.", "input": "", "output": "JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to \u201copen a window\u201d to JavaScript:\n\n\n```javascript\nconstperson={name:'Gregorio Y. Zara',theme:{backgroundColor:'black',color:'pink'}};exportdefaultfunctionTodoList(){return(<divstyle={person.theme}><h1>{person.name}'s Todos</h1><imgclassName=\"avatar\"src=\"https://i.imgur.com/7vQD0fPs.jpg\"alt=\"Gregorio Y. Zara\"/><ul><li>Improve the videophone</li><li>Prepare aeronautics lectures</li><li>Work on the alcohol-fuelled engine</li></ul></div>);}\n```\n", "source": "https://react.dev/learn/describing-the-ui", "category": "Describing the UI"}
{"instruction": "What is the process for Passing props to a component in a React component?", "input": "", "output": "React components use props to communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, functions, and even JSX!\n\n\n```javascript\nimport{getImageUrl}from'./utils.js'exportdefaultfunctionProfile(){return(<Card><Avatarsize={100}person={{name:'Katsuko Saruhashi',imageId:'YfeOqp2'}}/></Card>);}functionAvatar({person,size}){return(<imgclassName=\"avatar\"src={getImageUrl(person)}alt={person.name}width={size}height={size}/>);}functionCard({children}){return(<divclassName=\"card\">{children}</div>);}\n```\n", "source": "https://react.dev/learn/describing-the-ui", "category": "Describing the UI"}
{"instruction": "Show me a code example of Passing props to a component in React.", "input": "", "output": "React components use props to communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, functions, and even JSX!\n\n\n```javascript\nimport{getImageUrl}from'./utils.js'exportdefaultfunctionProfile(){return(<Card><Avatarsize={100}person={{name:'Katsuko Saruhashi',imageId:'YfeOqp2'}}/></Card>);}functionAvatar({person,size}){return(<imgclassName=\"avatar\"src={getImageUrl(person)}alt={person.name}width={size}height={size}/>);}functionCard({children}){return(<divclassName=\"card\">{children}</div>);}\n```\n", "source": "https://react.dev/learn/describing-the-ui", "category": "Describing the UI"}
{"instruction": "Can you describe Conditional rendering in the context of React?", "input": "", "output": "Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like if statements, && , and ? : operators.\n\nIn this example, the JavaScript && operator is used to conditionally render a checkmark:\n\n\n```javascript\nfunctionItem({name,isPacked}){return(<liclassName=\"item\">{name}{isPacked&&'\u2705'}</li>);}exportdefaultfunctionPackingList(){return(<section><h1>Sally Ride's Packing List</h1><ul><ItemisPacked={true}name=\"Space suit\"/><ItemisPacked={true}name=\"Helmet with a golden leaf\"/><ItemisPacked={false}name=\"Photo of Tam\"/></ul></section>);}\n```\n", "source": "https://react.dev/learn/describing-the-ui", "category": "Describing the UI"}
{"instruction": "Show me a code example of Conditional rendering in React.", "input": "", "output": "Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like if statements, && , and ? : operators.\n\nIn this example, the JavaScript && operator is used to conditionally render a checkmark:\n\n\n```javascript\nfunctionItem({name,isPacked}){return(<liclassName=\"item\">{name}{isPacked&&'\u2705'}</li>);}exportdefaultfunctionPackingList(){return(<section><h1>Sally Ride's Packing List</h1><ul><ItemisPacked={true}name=\"Space suit\"/><ItemisPacked={true}name=\"Helmet with a golden leaf\"/><ItemisPacked={false}name=\"Photo of Tam\"/></ul></section>);}\n```\n", "source": "https://react.dev/learn/describing-the-ui", "category": "Describing the UI"}
{"instruction": "What is Rendering lists in React and how does it work?", "input": "", "output": "You will often want to display multiple similar components from a collection of data. You can use JavaScript\u2019s filter() and map() with React to filter and transform your array of data into an array of components.\n\nFor each array item, you will need to specify a key . Usually, you will want to use an ID from the database as a key . Keys let React keep track of each item\u2019s place in the list even if the list changes.\n\n\n```javascript\nimport{people}from'./data.js';import{getImageUrl}from'./utils.js';exportdefaultfunctionList(){constlistItems=people.map(person=><likey={person.id}><imgsrc={getImageUrl(person)}alt={person.name}/><p><b>{person.name}:</b>{' '+person.profession+' '}known for{person.accomplishment}</p></li>);return(<article><h1>Scientists</h1><ul>{listItems}</ul></article>);}\n```\n", "source": "https://react.dev/learn/describing-the-ui", "category": "Describing the UI"}
{"instruction": "Show me a code example of Rendering lists in React.", "input": "", "output": "You will often want to display multiple similar components from a collection of data. You can use JavaScript\u2019s filter() and map() with React to filter and transform your array of data into an array of components.\n\nFor each array item, you will need to specify a key . Usually, you will want to use an ID from the database as a key . Keys let React keep track of each item\u2019s place in the list even if the list changes.\n\n\n```javascript\nimport{people}from'./data.js';import{getImageUrl}from'./utils.js';exportdefaultfunctionList(){constlistItems=people.map(person=><likey={person.id}><imgsrc={getImageUrl(person)}alt={person.name}/><p><b>{person.name}:</b>{' '+person.profession+' '}known for{person.accomplishment}</p></li>);return(<article><h1>Scientists</h1><ul>{listItems}</ul></article>);}\n```\n", "source": "https://react.dev/learn/describing-the-ui", "category": "Describing the UI"}
{"instruction": "Explain the concept of Keeping components pure in React.", "input": "", "output": "Some JavaScript functions are pure. A pure function:\n\n* Minds its own business. It does not change any objects or variables that existed before it was called.\n* Same inputs, same output. Given the same inputs, a pure function should always return the same result.\n\nBy strictly only writing your components as pure functions, you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows. Here is an example of an impure component:\n\n\n```javascript\nletguest=0;functionCup(){// Bad: changing a preexisting variable!guest=guest+1;return<h2>Tea cup for guest #{guest}</h2>;}exportdefaultfunctionTeaSet(){return(<><Cup/><Cup/><Cup/></>);}\n```\n\n\nYou can make this component pure by passing a prop instead of modifying a preexisting variable:\n\n\n```javascript\nfunctionCup({guest}){return<h2>Tea cup for guest #{guest}</h2>;}exportdefaultfunctionTeaSet(){return(<><Cupguest={1}/><Cupguest={2}/><Cupguest={3}/></>);}\n```\n", "source": "https://react.dev/learn/describing-the-ui", "category": "Describing the UI"}
{"instruction": "Show me a code example of Keeping components pure in React.", "input": "", "output": "Some JavaScript functions are pure. A pure function:\n\n* Minds its own business. It does not change any objects or variables that existed before it was called.\n* Same inputs, same output. Given the same inputs, a pure function should always return the same result.\n\nBy strictly only writing your components as pure functions, you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows. Here is an example of an impure component:\n\n\n```javascript\nletguest=0;functionCup(){// Bad: changing a preexisting variable!guest=guest+1;return<h2>Tea cup for guest #{guest}</h2>;}exportdefaultfunctionTeaSet(){return(<><Cup/><Cup/><Cup/></>);}\n```\n\n\nYou can make this component pure by passing a prop instead of modifying a preexisting variable:\n\n\n```javascript\nfunctionCup({guest}){return<h2>Tea cup for guest #{guest}</h2>;}exportdefaultfunctionTeaSet(){return(<><Cupguest={1}/><Cupguest={2}/><Cupguest={3}/></>);}\n```\n", "source": "https://react.dev/learn/describing-the-ui", "category": "Describing the UI"}
{"instruction": "Can you describe Your UI as a tree in the context of React?", "input": "", "output": "React uses trees to model the relationships between components and modules.\n\nA React render tree is a representation of the parent and child relationship between components.\n\nAn example React render tree.\n\nComponents near the top of the tree, near the root component, are considered top-level components. Components with no child components are leaf components. This categorization of components is useful for understanding data flow and rendering performance.\n\nModelling the relationship between JavaScript modules is another useful way to understand your app. We refer to it as a module dependency tree.\n\nAn example module dependency tree.\n\nA dependency tree is often used by build tools to bundle all the relevant JavaScript code for the client to download and render. A large bundle size regresses user experience for React apps. Understanding the module dependency tree is helpful to debug such issues.", "source": "https://react.dev/learn/describing-the-ui", "category": "Describing the UI"}
{"instruction": "What is What\u2019s next? in React and how does it work?", "input": "", "output": "Head over to Your First Component to start reading this chapter page by page!\n\nOr, if you\u2019re already familiar with these topics, why not read about Adding Interactivity ?", "source": "https://react.dev/learn/describing-the-ui", "category": "Describing the UI"}
{"instruction": "Can you describe Your editor in the context of React?", "input": "", "output": "VS Code is one of the most popular editors in use today. It has a large marketplace of extensions and integrates well with popular services like GitHub. Most of the features listed below can be added to VS Code as extensions as well, making it highly configurable!\n\nOther popular text editors used in the React community include:\n\n* WebStorm is an integrated development environment designed specifically for JavaScript.\n* Sublime Text has support for JSX and TypeScript, syntax highlighting and autocomplete built in.\n* Vim is a highly configurable text editor built to make creating and changing any kind of text very efficient. It is included as \u201cvi\u201d with most UNIX systems and with Apple OS X.", "source": "https://react.dev/learn/editor-setup", "category": "Editor Setup"}
{"instruction": "Can you describe Recommended text editor features in the context of React?", "input": "", "output": "Some editors come with these features built in, but others might require adding an extension. Check to see what support your editor of choice provides to be sure!\n\n\n### Linting\n\n\nCode linters find problems in your code as you write, helping you fix them early. ESLint is a popular, open source linter for JavaScript.\n\n* Install ESLint with the recommended configuration for React (be sure you have Node installed! )\n* Integrate ESLint in VSCode with the official extension\n\nMake sure that you\u2019ve enabled all the eslint-plugin-react-hooks rules for your project. They are essential and catch the most severe bugs early. The recommended eslint-config-react-app preset already includes them.\n\n\n### Formatting\n\n\nThe last thing you want to do when sharing your code with another contributor is get into a discussion about tabs vs spaces ! Fortunately, Prettier will clean up your code by reformatting it to conform to preset, configurable rules. Run Prettier, and all your tabs will be converted to spaces\u2014and your indentation, quotes, etc will also all be changed to conform to the configuration. In the ideal setup, Prettier will run when you save your file, quickly making these edits for you.\n\nYou can install the Prettier extension in VSCode by following these steps:\n\n1. Launch VS Code\n2. Use Quick Open (press Ctrl/Cmd+P)\n3. Paste in ext install esbenp.prettier-vscode\n4. Press Enter\n\nIdeally, you should format your code on every save. VS Code has settings for this!\n\n1. In VS Code, press CTRL/CMD + SHIFT + P .\n2. Type \u201csettings\u201d\n3. Hit Enter\n4. In the search bar, type \u201cformat on save\u201d\n5. Be sure the \u201cformat on save\u201d option is ticked!\n\n> If your ESLint preset has formatting rules, they may conflict with Prettier. We recommend disabling all formatting rules in your ESLint preset using eslint-config-prettier so that ESLint is only used for catching logical mistakes. If you want to enforce that files are formatted before a pull request is merged, use prettier --check for your continuous integration.\n\nIf your ESLint preset has formatting rules, they may conflict with Prettier. We recommend disabling all formatting rules in your ESLint preset using eslint-config-prettier so that ESLint is only used for catching logical mistakes. If you want to enforce that files are formatted before a pull request is merged, use prettier --check for your continuous integration.", "source": "https://react.dev/learn/editor-setup", "category": "Editor Setup"}
{"instruction": "What is the process for Referencing values with refs in a React component?", "input": "", "output": "When you want a component to \u201cremember\u201d some information, but you don\u2019t want that information to trigger new renders , you can use a ref :\n\n\n```javascript\nconstref=useRef(0);\n```\n\n\nLike state, refs are retained by React between re-renders. However, setting state re-renders a component. Changing a ref does not! You can access the current value of that ref through the ref.current property.\n\n\n```javascript\nimport{useRef}from'react';exportdefaultfunctionCounter(){letref=useRef(0);functionhandleClick(){ref.current=ref.current+1;alert('You clicked '+ref.current+' times!');}return(<buttononClick={handleClick}>Click me!</button>);}\n```\n\n\nA ref is like a secret pocket of your component that React doesn\u2019t track. For example, you can use refs to store timeout IDs , DOM elements , and other objects that don\u2019t impact the component\u2019s rendering output.", "source": "https://react.dev/learn/escape-hatches", "category": "Escape Hatches"}
{"instruction": "Show me a code example of Referencing values with refs in React.", "input": "", "output": "When you want a component to \u201cremember\u201d some information, but you don\u2019t want that information to trigger new renders , you can use a ref :\n\n\n```javascript\nconstref=useRef(0);\n```\n\n\nLike state, refs are retained by React between re-renders. However, setting state re-renders a component. Changing a ref does not! You can access the current value of that ref through the ref.current property.\n\n\n```javascript\nimport{useRef}from'react';exportdefaultfunctionCounter(){letref=useRef(0);functionhandleClick(){ref.current=ref.current+1;alert('You clicked '+ref.current+' times!');}return(<buttononClick={handleClick}>Click me!</button>);}\n```\n\n\nA ref is like a secret pocket of your component that React doesn\u2019t track. For example, you can use refs to store timeout IDs , DOM elements , and other objects that don\u2019t impact the component\u2019s rendering output.", "source": "https://react.dev/learn/escape-hatches", "category": "Escape Hatches"}
{"instruction": "Tell me about Manipulating the DOM with refs.", "input": "", "output": "React automatically updates the DOM to match your render output, so your components won\u2019t often need to manipulate it. However, sometimes you might need access to the DOM elements managed by React\u2014for example, to focus a node, scroll to it, or measure its size and position. There is no built-in way to do those things in React, so you will need a ref to the DOM node. For example, clicking the button will focus the input using a ref:\n\n\n```javascript\nimport{useRef}from'react';exportdefaultfunctionForm(){constinputRef=useRef(null);functionhandleClick(){inputRef.current.focus();}return(<><inputref={inputRef}/><buttononClick={handleClick}>Focus the input</button></>);}\n```\n", "source": "https://react.dev/learn/escape-hatches", "category": "Escape Hatches"}
{"instruction": "Show me a code example of Manipulating the DOM with refs in React.", "input": "", "output": "React automatically updates the DOM to match your render output, so your components won\u2019t often need to manipulate it. However, sometimes you might need access to the DOM elements managed by React\u2014for example, to focus a node, scroll to it, or measure its size and position. There is no built-in way to do those things in React, so you will need a ref to the DOM node. For example, clicking the button will focus the input using a ref:\n\n\n```javascript\nimport{useRef}from'react';exportdefaultfunctionForm(){constinputRef=useRef(null);functionhandleClick(){inputRef.current.focus();}return(<><inputref={inputRef}/><buttononClick={handleClick}>Focus the input</button></>);}\n```\n", "source": "https://react.dev/learn/escape-hatches", "category": "Escape Hatches"}
{"instruction": "Can you describe Synchronizing with Effects in the context of React?", "input": "", "output": "Some components need to synchronize with external systems. For example, you might want to control a non-React component based on the React state, set up a server connection, or send an analytics log when a component appears on the screen. Unlike event handlers, which let you handle particular events, Effects let you run some code after rendering. Use them to synchronize your component with a system outside of React.\n\nPress Play/Pause a few times and see how the video player stays synchronized to the isPlaying prop value:\n\n\n```javascript\nimport{useState,useRef,useEffect}from'react';functionVideoPlayer({src,isPlaying}){constref=useRef(null);useEffect(()=>{if(isPlaying){ref.current.play();}else{ref.current.pause();}},[isPlaying]);return<videoref={ref}src={src}loopplaysInline/>;}exportdefaultfunctionApp(){const[isPlaying,setIsPlaying]=useState(false);return(<><buttononClick={()=>setIsPlaying(!isPlaying)}>{isPlaying?'Pause':'Play'}</button><VideoPlayerisPlaying={isPlaying}src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"/></>);}\n```\n\n\nMany Effects also \u201cclean up\u201d after themselves. For example, an Effect that sets up a connection to a chat server should return a cleanup function that tells React how to disconnect your component from that server:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';exportdefaultfunctionChatRoom(){useEffect(()=>{constconnection=createConnection();connection.connect();return()=>connection.disconnect();},[]);return<h1>Welcome to the chat!</h1>;}\n```\n\n\nIn development, React will immediately run and clean up your Effect one extra time. This is why you see \"\u2705 Connecting...\" printed twice. This ensures that you don\u2019t forget to implement the cleanup function.", "source": "https://react.dev/learn/escape-hatches", "category": "Escape Hatches"}
{"instruction": "Show me a code example of Synchronizing with Effects in React.", "input": "", "output": "Some components need to synchronize with external systems. For example, you might want to control a non-React component based on the React state, set up a server connection, or send an analytics log when a component appears on the screen. Unlike event handlers, which let you handle particular events, Effects let you run some code after rendering. Use them to synchronize your component with a system outside of React.\n\nPress Play/Pause a few times and see how the video player stays synchronized to the isPlaying prop value:\n\n\n```javascript\nimport{useState,useRef,useEffect}from'react';functionVideoPlayer({src,isPlaying}){constref=useRef(null);useEffect(()=>{if(isPlaying){ref.current.play();}else{ref.current.pause();}},[isPlaying]);return<videoref={ref}src={src}loopplaysInline/>;}exportdefaultfunctionApp(){const[isPlaying,setIsPlaying]=useState(false);return(<><buttononClick={()=>setIsPlaying(!isPlaying)}>{isPlaying?'Pause':'Play'}</button><VideoPlayerisPlaying={isPlaying}src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"/></>);}\n```\n\n\nMany Effects also \u201cclean up\u201d after themselves. For example, an Effect that sets up a connection to a chat server should return a cleanup function that tells React how to disconnect your component from that server:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';exportdefaultfunctionChatRoom(){useEffect(()=>{constconnection=createConnection();connection.connect();return()=>connection.disconnect();},[]);return<h1>Welcome to the chat!</h1>;}\n```\n\n\nIn development, React will immediately run and clean up your Effect one extra time. This is why you see \"\u2705 Connecting...\" printed twice. This ensures that you don\u2019t forget to implement the cleanup function.", "source": "https://react.dev/learn/escape-hatches", "category": "Escape Hatches"}
{"instruction": "Explain the concept of You Might Not Need An Effect in React.", "input": "", "output": "Effects are an escape hatch from the React paradigm. They let you \u201cstep outside\u201d of React and synchronize your components with some external system. If there is no external system involved (for example, if you want to update a component\u2019s state when some props or state change), you shouldn\u2019t need an Effect. Removing unnecessary Effects will make your code easier to follow, faster to run, and less error-prone.\n\nThere are two common cases in which you don\u2019t need Effects:\n\n* You don\u2019t need Effects to transform data for rendering.\n* You don\u2019t need Effects to handle user events.\n\nFor example, you don\u2019t need an Effect to adjust some state based on other state:\n\n\n```javascript\nfunctionForm(){const[firstName,setFirstName]=useState('Taylor');const[lastName,setLastName]=useState('Swift');// \ud83d\udd34 Avoid: redundant state and unnecessary Effectconst[fullName,setFullName]=useState('');useEffect(()=>{setFullName(firstName+' '+lastName);},[firstName,lastName]);// ...}\n```\n\n\nInstead, calculate as much as you can while rendering:\n\n\n```javascript\nfunctionForm(){const[firstName,setFirstName]=useState('Taylor');const[lastName,setLastName]=useState('Swift');// \u2705 Good: calculated during renderingconstfullName=firstName+' '+lastName;// ...}\n```\n\n\nHowever, you do need Effects to synchronize with external systems.", "source": "https://react.dev/learn/escape-hatches", "category": "Escape Hatches"}
{"instruction": "Show me a code example of You Might Not Need An Effect in React.", "input": "", "output": "Effects are an escape hatch from the React paradigm. They let you \u201cstep outside\u201d of React and synchronize your components with some external system. If there is no external system involved (for example, if you want to update a component\u2019s state when some props or state change), you shouldn\u2019t need an Effect. Removing unnecessary Effects will make your code easier to follow, faster to run, and less error-prone.\n\nThere are two common cases in which you don\u2019t need Effects:\n\n* You don\u2019t need Effects to transform data for rendering.\n* You don\u2019t need Effects to handle user events.\n\nFor example, you don\u2019t need an Effect to adjust some state based on other state:\n\n\n```javascript\nfunctionForm(){const[firstName,setFirstName]=useState('Taylor');const[lastName,setLastName]=useState('Swift');// \ud83d\udd34 Avoid: redundant state and unnecessary Effectconst[fullName,setFullName]=useState('');useEffect(()=>{setFullName(firstName+' '+lastName);},[firstName,lastName]);// ...}\n```\n\n\nInstead, calculate as much as you can while rendering:\n\n\n```javascript\nfunctionForm(){const[firstName,setFirstName]=useState('Taylor');const[lastName,setLastName]=useState('Swift');// \u2705 Good: calculated during renderingconstfullName=firstName+' '+lastName;// ...}\n```\n\n\nHowever, you do need Effects to synchronize with external systems.", "source": "https://react.dev/learn/escape-hatches", "category": "Escape Hatches"}
{"instruction": "What is Lifecycle of reactive effects in React and how does it work?", "input": "", "output": "Effects have a different lifecycle from components. Components may mount, update, or unmount. An Effect can only do two things: to start synchronizing something, and later to stop synchronizing it. This cycle can happen multiple times if your Effect depends on props and state that change over time.\n\nThis Effect depends on the value of the roomId prop. Props are reactive values, which means they can change on a re-render. Notice that the Effect re-synchronizes (and re-connects to the server) if roomId changes:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[roomId]);return<h1>Welcome to the{roomId}room!</h1>;}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><hr/><ChatRoomroomId={roomId}/></>);}\n```\n\n\nReact provides a linter rule to check that you\u2019ve specified your Effect\u2019s dependencies correctly. If you forget to specify roomId in the list of dependencies in the above example, the linter will find that bug automatically.", "source": "https://react.dev/learn/escape-hatches", "category": "Escape Hatches"}
{"instruction": "Show me a code example of Lifecycle of reactive effects in React.", "input": "", "output": "Effects have a different lifecycle from components. Components may mount, update, or unmount. An Effect can only do two things: to start synchronizing something, and later to stop synchronizing it. This cycle can happen multiple times if your Effect depends on props and state that change over time.\n\nThis Effect depends on the value of the roomId prop. Props are reactive values, which means they can change on a re-render. Notice that the Effect re-synchronizes (and re-connects to the server) if roomId changes:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[roomId]);return<h1>Welcome to the{roomId}room!</h1>;}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><hr/><ChatRoomroomId={roomId}/></>);}\n```\n\n\nReact provides a linter rule to check that you\u2019ve specified your Effect\u2019s dependencies correctly. If you forget to specify roomId in the list of dependencies in the above example, the linter will find that bug automatically.", "source": "https://react.dev/learn/escape-hatches", "category": "Escape Hatches"}
{"instruction": "What is the process for Separating events from Effects in a React component?", "input": "", "output": "\n### Under Construction\n\n\nThis section describes an experimental API that has not yet been released in a stable version of React.\n\nEvent handlers only re-run when you perform the same interaction again. Unlike event handlers, Effects re-synchronize if any of the values they read, like props or state, are different than during last render. Sometimes, you want a mix of both behaviors: an Effect that re-runs in response to some values but not others.\n\nAll code inside Effects is reactive. It will run again if some reactive value it reads has changed due to a re-render. For example, this Effect will re-connect to the chat if either roomId or theme have changed:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection,sendMessage}from'./chat.js';import{showNotification}from'./notifications.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId,theme}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.on('connected',()=>{showNotification('Connected!',theme);});connection.connect();return()=>connection.disconnect();},[roomId,theme]);return<h1>Welcome to the{roomId}room!</h1>}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');const[isDark,setIsDark]=useState(false);return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><label><inputtype=\"checkbox\"checked={isDark}onChange={e=>setIsDark(e.target.checked)}/>Use dark theme</label><hr/><ChatRoomroomId={roomId}theme={isDark?'dark':'light'}/></>);}\n```\n\n\nThis is not ideal. You want to re-connect to the chat only if the roomId has changed. Switching the theme shouldn\u2019t re-connect to the chat! Move the code reading theme out of your Effect into an Effect Event :\n\n\n```javascript\nimport{useState,useEffect}from'react';import{experimental_useEffectEventasuseEffectEvent}from'react';import{createConnection,sendMessage}from'./chat.js';import{showNotification}from'./notifications.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId,theme}){constonConnected=useEffectEvent(()=>{showNotification('Connected!',theme);});useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.on('connected',()=>{onConnected();});connection.connect();return()=>connection.disconnect();},[roomId]);return<h1>Welcome to the{roomId}room!</h1>}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');const[isDark,setIsDark]=useState(false);return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><label><inputtype=\"checkbox\"checked={isDark}onChange={e=>setIsDark(e.target.checked)}/>Use dark theme</label><hr/><ChatRoomroomId={roomId}theme={isDark?'dark':'light'}/></>);}\n```\n\n\nCode inside Effect Events isn\u2019t reactive, so changing the theme no longer makes your Effect re-connect.", "source": "https://react.dev/learn/escape-hatches", "category": "Escape Hatches"}
{"instruction": "Show me a code example of Separating events from Effects in React.", "input": "", "output": "\n### Under Construction\n\n\nThis section describes an experimental API that has not yet been released in a stable version of React.\n\nEvent handlers only re-run when you perform the same interaction again. Unlike event handlers, Effects re-synchronize if any of the values they read, like props or state, are different than during last render. Sometimes, you want a mix of both behaviors: an Effect that re-runs in response to some values but not others.\n\nAll code inside Effects is reactive. It will run again if some reactive value it reads has changed due to a re-render. For example, this Effect will re-connect to the chat if either roomId or theme have changed:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection,sendMessage}from'./chat.js';import{showNotification}from'./notifications.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId,theme}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.on('connected',()=>{showNotification('Connected!',theme);});connection.connect();return()=>connection.disconnect();},[roomId,theme]);return<h1>Welcome to the{roomId}room!</h1>}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');const[isDark,setIsDark]=useState(false);return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><label><inputtype=\"checkbox\"checked={isDark}onChange={e=>setIsDark(e.target.checked)}/>Use dark theme</label><hr/><ChatRoomroomId={roomId}theme={isDark?'dark':'light'}/></>);}\n```\n\n\nThis is not ideal. You want to re-connect to the chat only if the roomId has changed. Switching the theme shouldn\u2019t re-connect to the chat! Move the code reading theme out of your Effect into an Effect Event :\n\n\n```javascript\nimport{useState,useEffect}from'react';import{experimental_useEffectEventasuseEffectEvent}from'react';import{createConnection,sendMessage}from'./chat.js';import{showNotification}from'./notifications.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId,theme}){constonConnected=useEffectEvent(()=>{showNotification('Connected!',theme);});useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.on('connected',()=>{onConnected();});connection.connect();return()=>connection.disconnect();},[roomId]);return<h1>Welcome to the{roomId}room!</h1>}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');const[isDark,setIsDark]=useState(false);return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><label><inputtype=\"checkbox\"checked={isDark}onChange={e=>setIsDark(e.target.checked)}/>Use dark theme</label><hr/><ChatRoomroomId={roomId}theme={isDark?'dark':'light'}/></>);}\n```\n\n\nCode inside Effect Events isn\u2019t reactive, so changing the theme no longer makes your Effect re-connect.", "source": "https://react.dev/learn/escape-hatches", "category": "Escape Hatches"}
{"instruction": "How do I handle Removing Effect dependencies in React?", "input": "", "output": "When you write an Effect, the linter will verify that you\u2019ve included every reactive value (like props and state) that the Effect reads in the list of your Effect\u2019s dependencies. This ensures that your Effect remains synchronized with the latest props and state of your component. Unnecessary dependencies may cause your Effect to run too often, or even create an infinite loop. The way you remove them depends on the case.\n\nFor example, this Effect depends on the options object which gets re-created every time you edit the input:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId}){const[message,setMessage]=useState('');constoptions={serverUrl:serverUrl,roomId:roomId};useEffect(()=>{constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[options]);return(<><h1>Welcome to the{roomId}room!</h1><inputvalue={message}onChange={e=>setMessage(e.target.value)}/></>);}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><hr/><ChatRoomroomId={roomId}/></>);}\n```\n\n\nYou don\u2019t want the chat to re-connect every time you start typing a message in that chat. To fix this problem, move creation of the options object inside the Effect so that the Effect only depends on the roomId string:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId}){const[message,setMessage]=useState('');useEffect(()=>{constoptions={serverUrl:serverUrl,roomId:roomId};constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[roomId]);return(<><h1>Welcome to the{roomId}room!</h1><inputvalue={message}onChange={e=>setMessage(e.target.value)}/></>);}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><hr/><ChatRoomroomId={roomId}/></>);}\n```\n\n\nNotice that you didn\u2019t start by editing the dependency list to remove the options dependency. That would be wrong. Instead, you changed the surrounding code so that the dependency became unnecessary. Think of the dependency list as a list of all the reactive values used by your Effect\u2019s code. You don\u2019t intentionally choose what to put on that list. The list describes your code. To change the dependency list, change the code.", "source": "https://react.dev/learn/escape-hatches", "category": "Escape Hatches"}
{"instruction": "Show me a code example of Removing Effect dependencies in React.", "input": "", "output": "When you write an Effect, the linter will verify that you\u2019ve included every reactive value (like props and state) that the Effect reads in the list of your Effect\u2019s dependencies. This ensures that your Effect remains synchronized with the latest props and state of your component. Unnecessary dependencies may cause your Effect to run too often, or even create an infinite loop. The way you remove them depends on the case.\n\nFor example, this Effect depends on the options object which gets re-created every time you edit the input:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId}){const[message,setMessage]=useState('');constoptions={serverUrl:serverUrl,roomId:roomId};useEffect(()=>{constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[options]);return(<><h1>Welcome to the{roomId}room!</h1><inputvalue={message}onChange={e=>setMessage(e.target.value)}/></>);}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><hr/><ChatRoomroomId={roomId}/></>);}\n```\n\n\nYou don\u2019t want the chat to re-connect every time you start typing a message in that chat. To fix this problem, move creation of the options object inside the Effect so that the Effect only depends on the roomId string:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId}){const[message,setMessage]=useState('');useEffect(()=>{constoptions={serverUrl:serverUrl,roomId:roomId};constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[roomId]);return(<><h1>Welcome to the{roomId}room!</h1><inputvalue={message}onChange={e=>setMessage(e.target.value)}/></>);}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><hr/><ChatRoomroomId={roomId}/></>);}\n```\n\n\nNotice that you didn\u2019t start by editing the dependency list to remove the options dependency. That would be wrong. Instead, you changed the surrounding code so that the dependency became unnecessary. Think of the dependency list as a list of all the reactive values used by your Effect\u2019s code. You don\u2019t intentionally choose what to put on that list. The list describes your code. To change the dependency list, change the code.", "source": "https://react.dev/learn/escape-hatches", "category": "Escape Hatches"}
{"instruction": "How do I handle Reusing logic with custom Hooks in React?", "input": "", "output": "React comes with built-in Hooks like useState , useContext , and useEffect . Sometimes, you\u2019ll wish that there was a Hook for some more specific purpose: for example, to fetch data, to keep track of whether the user is online, or to connect to a chat room. To do this, you can create your own Hooks for your application\u2019s needs.\n\nIn this example, the usePointerPosition custom Hook tracks the cursor position, while useDelayedValue custom Hook returns a value that\u2019s \u201clagging behind\u201d the value you passed by a certain number of milliseconds. Move the cursor over the sandbox preview area to see a moving trail of dots following the cursor:\n\n\n```javascript\nimport{usePointerPosition}from'./usePointerPosition.js';import{useDelayedValue}from'./useDelayedValue.js';exportdefaultfunctionCanvas(){constpos1=usePointerPosition();constpos2=useDelayedValue(pos1,100);constpos3=useDelayedValue(pos2,200);constpos4=useDelayedValue(pos3,100);constpos5=useDelayedValue(pos4,50);return(<><Dotposition={pos1}opacity={1}/><Dotposition={pos2}opacity={0.8}/><Dotposition={pos3}opacity={0.6}/><Dotposition={pos4}opacity={0.4}/><Dotposition={pos5}opacity={0.2}/></>);}functionDot({position,opacity}){return(<divstyle={{position:'absolute',backgroundColor:'pink',borderRadius:'50%',opacity,transform:`translate(${position.x}px,${position.y}px)`,pointerEvents:'none',left:-20,top:-20,width:40,height:40,}}/>);}\n```\n\n\nYou can create custom Hooks, compose them together, pass data between them, and reuse them between components. As your app grows, you will write fewer Effects by hand because you\u2019ll be able to reuse custom Hooks you already wrote. There are also many excellent custom Hooks maintained by the React community.", "source": "https://react.dev/learn/escape-hatches", "category": "Escape Hatches"}
{"instruction": "Show me a code example of Reusing logic with custom Hooks in React.", "input": "", "output": "React comes with built-in Hooks like useState , useContext , and useEffect . Sometimes, you\u2019ll wish that there was a Hook for some more specific purpose: for example, to fetch data, to keep track of whether the user is online, or to connect to a chat room. To do this, you can create your own Hooks for your application\u2019s needs.\n\nIn this example, the usePointerPosition custom Hook tracks the cursor position, while useDelayedValue custom Hook returns a value that\u2019s \u201clagging behind\u201d the value you passed by a certain number of milliseconds. Move the cursor over the sandbox preview area to see a moving trail of dots following the cursor:\n\n\n```javascript\nimport{usePointerPosition}from'./usePointerPosition.js';import{useDelayedValue}from'./useDelayedValue.js';exportdefaultfunctionCanvas(){constpos1=usePointerPosition();constpos2=useDelayedValue(pos1,100);constpos3=useDelayedValue(pos2,200);constpos4=useDelayedValue(pos3,100);constpos5=useDelayedValue(pos4,50);return(<><Dotposition={pos1}opacity={1}/><Dotposition={pos2}opacity={0.8}/><Dotposition={pos3}opacity={0.6}/><Dotposition={pos4}opacity={0.4}/><Dotposition={pos5}opacity={0.2}/></>);}functionDot({position,opacity}){return(<divstyle={{position:'absolute',backgroundColor:'pink',borderRadius:'50%',opacity,transform:`translate(${position.x}px,${position.y}px)`,pointerEvents:'none',left:-20,top:-20,width:40,height:40,}}/>);}\n```\n\n\nYou can create custom Hooks, compose them together, pass data between them, and reuse them between components. As your app grows, you will write fewer Effects by hand because you\u2019ll be able to reuse custom Hooks you already wrote. There are also many excellent custom Hooks maintained by the React community.", "source": "https://react.dev/learn/escape-hatches", "category": "Escape Hatches"}
{"instruction": "Tell me about What\u2019s next?.", "input": "", "output": "Head over to Referencing Values with Refs to start reading this chapter page by page!", "source": "https://react.dev/learn/escape-hatches", "category": "Escape Hatches"}
{"instruction": "Can you describe Consolidate state logic with a reducer in the context of React?", "input": "", "output": "As your components grow in complexity, it can get harder to see at a glance all the different ways in which a component\u2019s state gets updated. For example, the TaskApp component below holds an array of tasks in state and uses three different event handlers to add, remove, and edit tasks:\n\n\n```javascript\nimport{useState}from'react';importAddTaskfrom'./AddTask.js';importTaskListfrom'./TaskList.js';exportdefaultfunctionTaskApp(){const[tasks,setTasks]=useState(initialTasks);functionhandleAddTask(text){setTasks([...tasks,{id:nextId++,text:text,done:false,},]);}functionhandleChangeTask(task){setTasks(tasks.map((t)=>{if(t.id===task.id){returntask;}else{returnt;}}));}functionhandleDeleteTask(taskId){setTasks(tasks.filter((t)=>t.id!==taskId));}return(<><h1>Prague itinerary</h1><AddTaskonAddTask={handleAddTask}/><TaskListtasks={tasks}onChangeTask={handleChangeTask}onDeleteTask={handleDeleteTask}/></>);}letnextId=3;constinitialTasks=[{id:0,text:'Visit Kafka Museum',done:true},{id:1,text:'Watch a puppet show',done:false},{id:2,text:'Lennon Wall pic',done:false},];\n```\n\n\nEach of its event handlers calls setTasks in order to update the state. As this component grows, so does the amount of state logic sprinkled throughout it. To reduce this complexity and keep all your logic in one easy-to-access place, you can move that state logic into a single function outside your component, called a \u201creducer\u201d.\n\nReducers are a different way to handle state. You can migrate from useState to useReducer in three steps:\n\n1. Move from setting state to dispatching actions.\n2. Write a reducer function.\n3. Use the reducer from your component.\n\n\n### Step 1: Move from setting state to dispatching actions\n\n\nYour event handlers currently specify what to do by setting state:\n\n\n```javascript\nfunctionhandleAddTask(text){setTasks([...tasks,{id:nextId++,text:text,done:false,},]);}functionhandleChangeTask(task){setTasks(tasks.map((t)=>{if(t.id===task.id){returntask;}else{returnt;}}));}functionhandleDeleteTask(taskId){setTasks(tasks.filter((t)=>t.id!==taskId));}\n```\n\n\nRemove all the state setting logic. What you are left with are three event handlers:\n\n* handleAddTask(text) is called when the user presses \u201cAdd\u201d.\n* handleChangeTask(task) is called when the user toggles a task or presses \u201cSave\u201d.\n* handleDeleteTask(taskId) is called when the user presses \u201cDelete\u201d.\n\nManaging state with reducers is slightly different from directly setting state. Instead of telling React \u201cwhat to do\u201d by setting state, you specify \u201cwhat the user just did\u201d by dispatching \u201cactions\u201d from your event handlers. (The state update logic will live elsewhere!) So instead of \u201csetting tasks \u201d via an event handler, you\u2019re dispatching an \u201cadded/changed/deleted a task\u201d action. This is more descriptive of the user\u2019s intent.\n\n\n```javascript\nfunctionhandleAddTask(text){dispatch({type:'added',id:nextId++,text:text,});}functionhandleChangeTask(task){dispatch({type:'changed',task:task,});}functionhandleDeleteTask(taskId){dispatch({type:'deleted',id:taskId,});}\n```\n\n\nThe object you pass to dispatch is called an \u201caction\u201d:\n\n\n```javascript\nfunctionhandleDeleteTask(taskId){dispatch(// \"action\" object:{type:'deleted',id:taskId,});}\n```\n\n\nIt is a regular JavaScript object. You decide what to put in it, but generally it should contain the minimal information about what happened . (You will add the dispatch function itself in a later step.)\n\n\n### Note\n\n\nAn action object can have any shape.\n\nBy convention, it is common to give it a string type that describes what happened, and pass any additional information in other fields. The type is specific to a component, so in this example either 'added' or 'added_task' would be fine. Choose a name that says what happened!\n\n\n```javascript\ndispatch({// specific to componenttype:'what_happened',// other fields go here});\n```\n\n\n\n### Step 2: Write a reducer function\n\n\nA reducer function is where you will put your state logic. It takes two arguments, the current state and the action object, and it returns the next state:\n\n\n```javascript\nfunctionyourReducer(state,action){// return next state for React to set}\n```\n\n\nReact will set the state to what you return from the reducer.\n\nTo move your state setting logic from your event handlers to a reducer function in this example, you will:\n\n1. Declare the current state ( tasks ) as the first argument.\n2. Declare the action object as the second argument.\n3. Return the next state from the reducer (which React will set the state to).\n\nHere is all the state setting logic migrated to a reducer function:\n\n\n```javascript\nfunctiontasksReducer(tasks,action){if(action.type==='added'){return[...tasks,{id:action.id,text:action.text,done:false,},];}elseif(action.type==='changed'){returntasks.map((t)=>{if(t.id===action.task.id){returnaction.task;}else{returnt;}});}elseif(action.type==='deleted'){returntasks.filter((t)=>t.id!==action.id);}else{throwError('Unknown action: '+action.type);}}\n```\n\n\nBecause the reducer function takes state ( tasks ) as an argument, you can declare it outside of your component. This decreases the indentation level and can make your code easier to read.\n\n\n### Note\n\n\nThe code above uses if/else statements, but it\u2019s a convention to use switch statements inside reducers. The result is the same, but it can be easier to read switch statements at a glance.\n\nWe\u2019ll be using them throughout the rest of this documentation like so:\n\n\n```javascript\nfunctiontasksReducer(tasks,action){switch(action.type){case'added':{return[...tasks,{id:action.id,text:action.text,done:false,},];}case'changed':{returntasks.map((t)=>{if(t.id===action.task.id){returnaction.task;}else{returnt;}});}case'deleted':{returntasks.filter((t)=>t.id!==action.id);}default:{throwError('Unknown action: '+action.type);}}}\n```\n\n\nWe recommend wrapping each case block into the { and } curly braces so that variables declared inside of different case s don\u2019t clash with each other. Also, a case should usually end with a return . If you forget to return , the code will \u201cfall through\u201d to the next case , which can lead to mistakes!\n\nIf you\u2019re not yet comfortable with switch statements, using if/else is completely fine.\n\nAlthough reducers can \u201creduce\u201d the amount of code inside your component, they are actually named after the reduce() operation that you can perform on arrays.\n\nThe reduce() operation lets you take an array and \u201caccumulate\u201d a single value out of many:\n\n\n```javascript\nconstarr=[1,2,3,4,5];constsum=arr.reduce((result,number)=>result+number);// 1 + 2 + 3 + 4 + 5\n```\n\n\nThe function you pass to reduce is known as a \u201creducer\u201d. It takes the result so far and the current item, then it returns the next result. React reducers are an example of the same idea: they take the state so far and the action , and return the next state. In this way, they accumulate actions over time into state.\n\nYou could even use the reduce() method with an initialState and an array of actions to calculate the final state by passing your reducer function to it:\n\n\n```javascript\nimporttasksReducerfrom'./tasksReducer.js';letinitialState=[];letactions=[{type:'added',id:1,text:'Visit Kafka Museum'},{type:'added',id:2,text:'Watch a puppet show'},{type:'deleted',id:1},{type:'added',id:3,text:'Lennon Wall pic'},];letfinalState=actions.reduce(tasksReducer,initialState);constoutput=document.getElementById('output');output.textContent=JSON.stringify(finalState,null,2);\n```\n\n\nYou probably won\u2019t need to do this yourself, but this is similar to what React does!\n\n\n### Step 3: Use the reducer from your component\n\n\nFinally, you need to hook up the tasksReducer to your component. Import the useReducer Hook from React:\n\n\n```javascript\nimport{useReducer}from'react';\n```\n\n\nThen you can replace useState :\n\n\n```javascript\nconst[tasks,setTasks]=useState(initialTasks);\n```\n\n\nwith useReducer like so:\n\n\n```javascript\nconst[tasks,dispatch]=useReducer(tasksReducer,initialTasks);\n```\n\n\nThe useReducer Hook is similar to useState \u2014you must pass it an initial state and it returns a stateful value and a way to set state (in this case, the dispatch function). But it\u2019s a little different.\n\nThe useReducer Hook takes two arguments:\n\n1. A reducer function\n2. An initial state\n\nAnd it returns:\n\n1. A stateful value\n2. A dispatch function (to \u201cdispatch\u201d user actions to the reducer)\n\nNow it\u2019s fully wired up! Here, the reducer is declared at the bottom of the component file:\n\n\n```javascript\nimport{useReducer}from'react';importAddTaskfrom'./AddTask.js';importTaskListfrom'./TaskList.js';exportdefaultfunctionTaskApp(){const[tasks,dispatch]=useReducer(tasksReducer,initialTasks);functionhandleAddTask(text){dispatch({type:'added',id:nextId++,text:text,});}functionhandleChangeTask(task){dispatch({type:'changed',task:task,});}functionhandleDeleteTask(taskId){dispatch({type:'deleted',id:taskId,});}return(<><h1>Prague itinerary</h1><AddTaskonAddTask={handleAddTask}/><TaskListtasks={tasks}onChangeTask={handleChangeTask}onDeleteTask={handleDeleteTask}/></>);}functiontasksReducer(tasks,action){switch(action.type){case'added':{return[...tasks,{id:action.id,text:action.text,done:false,},];}case'changed':{returntasks.map((t)=>{if(t.id===action.task.id){returnaction.task;}else{returnt;}});}case'deleted':{returntasks.filter((t)=>t.id!==action.id);}default:{throwError('Unknown action: '+action.type);}}}letnextId=3;constinitialTasks=[{id:0,text:'Visit Kafka Museum',done:true},{id:1,text:'Watch a puppet show',done:false},{id:2,text:'Lennon Wall pic',done:false},];\n```\n\n\nIf you want, you can even move the reducer to a different file:\n\n\n```javascript\nimport{useReducer}from'react';importAddTaskfrom'./AddTask.js';importTaskListfrom'./TaskList.js';importtasksReducerfrom'./tasksReducer.js';exportdefaultfunctionTaskApp(){const[tasks,dispatch]=useReducer(tasksReducer,initialTasks);functionhandleAddTask(text){dispatch({type:'added',id:nextId++,text:text,});}functionhandleChangeTask(task){dispatch({type:'changed',task:task,});}functionhandleDeleteTask(taskId){dispatch({type:'deleted',id:taskId,});}return(<><h1>Prague itinerary</h1><AddTaskonAddTask={handleAddTask}/><TaskListtasks={tasks}onChangeTask={handleChangeTask}onDeleteTask={handleDeleteTask}/></>);}letnextId=3;constinitialTasks=[{id:0,text:'Visit Kafka Museum',done:true},{id:1,text:'Watch a puppet show',done:false},{id:2,text:'Lennon Wall pic',done:false},];\n```\n\n\nComponent logic can be easier to read when you separate concerns like this. Now the event handlers only specify what happened by dispatching actions, and the reducer function determines how the state updates in response to them.", "source": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "category": "Extracting State Logic into a Reducer"}
{"instruction": "Show me a code example of Consolidate state logic with a reducer in React.", "input": "", "output": "As your components grow in complexity, it can get harder to see at a glance all the different ways in which a component\u2019s state gets updated. For example, the TaskApp component below holds an array of tasks in state and uses three different event handlers to add, remove, and edit tasks:\n\n\n```javascript\nimport{useState}from'react';importAddTaskfrom'./AddTask.js';importTaskListfrom'./TaskList.js';exportdefaultfunctionTaskApp(){const[tasks,setTasks]=useState(initialTasks);functionhandleAddTask(text){setTasks([...tasks,{id:nextId++,text:text,done:false,},]);}functionhandleChangeTask(task){setTasks(tasks.map((t)=>{if(t.id===task.id){returntask;}else{returnt;}}));}functionhandleDeleteTask(taskId){setTasks(tasks.filter((t)=>t.id!==taskId));}return(<><h1>Prague itinerary</h1><AddTaskonAddTask={handleAddTask}/><TaskListtasks={tasks}onChangeTask={handleChangeTask}onDeleteTask={handleDeleteTask}/></>);}letnextId=3;constinitialTasks=[{id:0,text:'Visit Kafka Museum',done:true},{id:1,text:'Watch a puppet show',done:false},{id:2,text:'Lennon Wall pic',done:false},];\n```\n\n\nEach of its event handlers calls setTasks in order to update the state. As this component grows, so does the amount of state logic sprinkled throughout it. To reduce this complexity and keep all your logic in one easy-to-access place, you can move that state logic into a single function outside your component, called a \u201creducer\u201d.\n\nReducers are a different way to handle state. You can migrate from useState to useReducer in three steps:\n\n1. Move from setting state to dispatching actions.\n2. Write a reducer function.\n3. Use the reducer from your component.\n\n\n### Step 1: Move from setting state to dispatching actions\n\n\nYour event handlers currently specify what to do by setting state:\n\n\n```javascript\nfunctionhandleAddTask(text){setTasks([...tasks,{id:nextId++,text:text,done:false,},]);}functionhandleChangeTask(task){setTasks(tasks.map((t)=>{if(t.id===task.id){returntask;}else{returnt;}}));}functionhandleDeleteTask(taskId){setTasks(tasks.filter((t)=>t.id!==taskId));}\n```\n\n\nRemove all the state setting logic. What you are left with are three event handlers:\n\n* handleAddTask(text) is called when the user presses \u201cAdd\u201d.\n* handleChangeTask(task) is called when the user toggles a task or presses \u201cSave\u201d.\n* handleDeleteTask(taskId) is called when the user presses \u201cDelete\u201d.\n\nManaging state with reducers is slightly different from directly setting state. Instead of telling React \u201cwhat to do\u201d by setting state, you specify \u201cwhat the user just did\u201d by dispatching \u201cactions\u201d from your event handlers. (The state update logic will live elsewhere!) So instead of \u201csetting tasks \u201d via an event handler, you\u2019re dispatching an \u201cadded/changed/deleted a task\u201d action. This is more descriptive of the user\u2019s intent.\n\n\n```javascript\nfunctionhandleAddTask(text){dispatch({type:'added',id:nextId++,text:text,});}functionhandleChangeTask(task){dispatch({type:'changed',task:task,});}functionhandleDeleteTask(taskId){dispatch({type:'deleted',id:taskId,});}\n```\n\n\nThe object you pass to dispatch is called an \u201caction\u201d:\n\n\n```javascript\nfunctionhandleDeleteTask(taskId){dispatch(// \"action\" object:{type:'deleted',id:taskId,});}\n```\n\n\nIt is a regular JavaScript object. You decide what to put in it, but generally it should contain the minimal information about what happened . (You will add the dispatch function itself in a later step.)\n\n\n### Note\n\n\nAn action object can have any shape.\n\nBy convention, it is common to give it a string type that describes what happened, and pass any additional information in other fields. The type is specific to a component, so in this example either 'added' or 'added_task' would be fine. Choose a name that says what happened!\n\n\n```javascript\ndispatch({// specific to componenttype:'what_happened',// other fields go here});\n```\n\n\n\n### Step 2: Write a reducer function\n\n\nA reducer function is where you will put your state logic. It takes two arguments, the current state and the action object, and it returns the next state:\n\n\n```javascript\nfunctionyourReducer(state,action){// return next state for React to set}\n```\n\n\nReact will set the state to what you return from the reducer.\n\nTo move your state setting logic from your event handlers to a reducer function in this example, you will:\n\n1. Declare the current state ( tasks ) as the first argument.\n2. Declare the action object as the second argument.\n3. Return the next state from the reducer (which React will set the state to).\n\nHere is all the state setting logic migrated to a reducer function:\n\n\n```javascript\nfunctiontasksReducer(tasks,action){if(action.type==='added'){return[...tasks,{id:action.id,text:action.text,done:false,},];}elseif(action.type==='changed'){returntasks.map((t)=>{if(t.id===action.task.id){returnaction.task;}else{returnt;}});}elseif(action.type==='deleted'){returntasks.filter((t)=>t.id!==action.id);}else{throwError('Unknown action: '+action.type);}}\n```\n\n\nBecause the reducer function takes state ( tasks ) as an argument, you can declare it outside of your component. This decreases the indentation level and can make your code easier to read.\n\n\n### Note\n\n\nThe code above uses if/else statements, but it\u2019s a convention to use switch statements inside reducers. The result is the same, but it can be easier to read switch statements at a glance.\n\nWe\u2019ll be using them throughout the rest of this documentation like so:\n\n\n```javascript\nfunctiontasksReducer(tasks,action){switch(action.type){case'added':{return[...tasks,{id:action.id,text:action.text,done:false,},];}case'changed':{returntasks.map((t)=>{if(t.id===action.task.id){returnaction.task;}else{returnt;}});}case'deleted':{returntasks.filter((t)=>t.id!==action.id);}default:{throwError('Unknown action: '+action.type);}}}\n```\n\n\nWe recommend wrapping each case block into the { and } curly braces so that variables declared inside of different case s don\u2019t clash with each other. Also, a case should usually end with a return . If you forget to return , the code will \u201cfall through\u201d to the next case , which can lead to mistakes!\n\nIf you\u2019re not yet comfortable with switch statements, using if/else is completely fine.\n\nAlthough reducers can \u201creduce\u201d the amount of code inside your component, they are actually named after the reduce() operation that you can perform on arrays.\n\nThe reduce() operation lets you take an array and \u201caccumulate\u201d a single value out of many:\n\n\n```javascript\nconstarr=[1,2,3,4,5];constsum=arr.reduce((result,number)=>result+number);// 1 + 2 + 3 + 4 + 5\n```\n\n\nThe function you pass to reduce is known as a \u201creducer\u201d. It takes the result so far and the current item, then it returns the next result. React reducers are an example of the same idea: they take the state so far and the action , and return the next state. In this way, they accumulate actions over time into state.\n\nYou could even use the reduce() method with an initialState and an array of actions to calculate the final state by passing your reducer function to it:\n\n\n```javascript\nimporttasksReducerfrom'./tasksReducer.js';letinitialState=[];letactions=[{type:'added',id:1,text:'Visit Kafka Museum'},{type:'added',id:2,text:'Watch a puppet show'},{type:'deleted',id:1},{type:'added',id:3,text:'Lennon Wall pic'},];letfinalState=actions.reduce(tasksReducer,initialState);constoutput=document.getElementById('output');output.textContent=JSON.stringify(finalState,null,2);\n```\n\n\nYou probably won\u2019t need to do this yourself, but this is similar to what React does!\n\n\n### Step 3: Use the reducer from your component\n\n\nFinally, you need to hook up the tasksReducer to your component. Import the useReducer Hook from React:\n\n\n```javascript\nimport{useReducer}from'react';\n```\n\n\nThen you can replace useState :\n\n\n```javascript\nconst[tasks,setTasks]=useState(initialTasks);\n```\n\n\nwith useReducer like so:\n\n\n```javascript\nconst[tasks,dispatch]=useReducer(tasksReducer,initialTasks);\n```\n\n\nThe useReducer Hook is similar to useState \u2014you must pass it an initial state and it returns a stateful value and a way to set state (in this case, the dispatch function). But it\u2019s a little different.\n\nThe useReducer Hook takes two arguments:\n\n1. A reducer function\n2. An initial state\n\nAnd it returns:\n\n1. A stateful value\n2. A dispatch function (to \u201cdispatch\u201d user actions to the reducer)\n\nNow it\u2019s fully wired up! Here, the reducer is declared at the bottom of the component file:\n\n\n```javascript\nimport{useReducer}from'react';importAddTaskfrom'./AddTask.js';importTaskListfrom'./TaskList.js';exportdefaultfunctionTaskApp(){const[tasks,dispatch]=useReducer(tasksReducer,initialTasks);functionhandleAddTask(text){dispatch({type:'added',id:nextId++,text:text,});}functionhandleChangeTask(task){dispatch({type:'changed',task:task,});}functionhandleDeleteTask(taskId){dispatch({type:'deleted',id:taskId,});}return(<><h1>Prague itinerary</h1><AddTaskonAddTask={handleAddTask}/><TaskListtasks={tasks}onChangeTask={handleChangeTask}onDeleteTask={handleDeleteTask}/></>);}functiontasksReducer(tasks,action){switch(action.type){case'added':{return[...tasks,{id:action.id,text:action.text,done:false,},];}case'changed':{returntasks.map((t)=>{if(t.id===action.task.id){returnaction.task;}else{returnt;}});}case'deleted':{returntasks.filter((t)=>t.id!==action.id);}default:{throwError('Unknown action: '+action.type);}}}letnextId=3;constinitialTasks=[{id:0,text:'Visit Kafka Museum',done:true},{id:1,text:'Watch a puppet show',done:false},{id:2,text:'Lennon Wall pic',done:false},];\n```\n\n\nIf you want, you can even move the reducer to a different file:\n\n\n```javascript\nimport{useReducer}from'react';importAddTaskfrom'./AddTask.js';importTaskListfrom'./TaskList.js';importtasksReducerfrom'./tasksReducer.js';exportdefaultfunctionTaskApp(){const[tasks,dispatch]=useReducer(tasksReducer,initialTasks);functionhandleAddTask(text){dispatch({type:'added',id:nextId++,text:text,});}functionhandleChangeTask(task){dispatch({type:'changed',task:task,});}functionhandleDeleteTask(taskId){dispatch({type:'deleted',id:taskId,});}return(<><h1>Prague itinerary</h1><AddTaskonAddTask={handleAddTask}/><TaskListtasks={tasks}onChangeTask={handleChangeTask}onDeleteTask={handleDeleteTask}/></>);}letnextId=3;constinitialTasks=[{id:0,text:'Visit Kafka Museum',done:true},{id:1,text:'Watch a puppet show',done:false},{id:2,text:'Lennon Wall pic',done:false},];\n```\n\n\nComponent logic can be easier to read when you separate concerns like this. Now the event handlers only specify what happened by dispatching actions, and the reducer function determines how the state updates in response to them.", "source": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "category": "Extracting State Logic into a Reducer"}
{"instruction": "Tell me about ComparinguseStateanduseReducer.", "input": "", "output": "Reducers are not without downsides! Here\u2019s a few ways you can compare them:\n\n* Code size: Generally, with useState you have to write less code upfront. With useReducer , you have to write both a reducer function and dispatch actions. However, useReducer can help cut down on the code if many event handlers modify state in a similar way.\n* Readability: useState is very easy to read when the state updates are simple. When they get more complex, they can bloat your component\u2019s code and make it difficult to scan. In this case, useReducer lets you cleanly separate the how of update logic from the what happened of event handlers.\n* Debugging: When you have a bug with useState , it can be difficult to tell where the state was set incorrectly, and why . With useReducer , you can add a console log into your reducer to see every state update, and why it happened (due to which action ). If each action is correct, you\u2019ll know that the mistake is in the reducer logic itself. However, you have to step through more code than with useState .\n* Testing: A reducer is a pure function that doesn\u2019t depend on your component. This means that you can export and test it separately in isolation. While generally it\u2019s best to test components in a more realistic environment, for complex state update logic it can be useful to assert that your reducer returns a particular state for a particular initial state and action.\n* Personal preference: Some people like reducers, others don\u2019t. That\u2019s okay. It\u2019s a matter of preference. You can always convert between useState and useReducer back and forth: they are equivalent!\n\nWe recommend using a reducer if you often encounter bugs due to incorrect state updates in some component, and want to introduce more structure to its code. You don\u2019t have to use reducers for everything: feel free to mix and match! You can even useState and useReducer in the same component.", "source": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "category": "Extracting State Logic into a Reducer"}
{"instruction": "Explain the concept of Writing reducers well in React.", "input": "", "output": "Keep these two tips in mind when writing reducers:\n\n* Reducers must be pure. Similar to state updater functions , reducers run during rendering! (Actions are queued until the next render.) This means that reducers must be pure \u2014same inputs always result in the same output. They should not send requests, schedule timeouts, or perform any side effects (operations that impact things outside the component). They should update objects and arrays without mutations.\n* Each action describes a single user interaction, even if that leads to multiple changes in the data. For example, if a user presses \u201cReset\u201d on a form with five fields managed by a reducer, it makes more sense to dispatch one reset_form action rather than five separate set_field actions. If you log every action in a reducer, that log should be clear enough for you to reconstruct what interactions or responses happened in what order. This helps with debugging!", "source": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "category": "Extracting State Logic into a Reducer"}
{"instruction": "Tell me about Writing concise reducers with Immer.", "input": "", "output": "Just like with updating objects and arrays in regular state, you can use the Immer library to make reducers more concise. Here, useImmerReducer lets you mutate the state with push or arr[i] = assignment:\n\n\n```javascript\n{\"dependencies\":{\"immer\":\"1.7.3\",\"react\":\"latest\",\"react-dom\":\"latest\",\"react-scripts\":\"latest\",\"use-immer\":\"0.5.1\"},\"scripts\":{\"start\":\"react-scripts start\",\"build\":\"react-scripts build\",\"test\":\"react-scripts test --env=jsdom\",\"eject\":\"react-scripts eject\"},\"devDependencies\":{}}\n```\n\n\nReducers must be pure, so they shouldn\u2019t mutate state. But Immer provides you with a special draft object which is safe to mutate. Under the hood, Immer will create a copy of your state with the changes you made to the draft . This is why reducers managed by useImmerReducer can mutate their first argument and don\u2019t need to return state.", "source": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "category": "Extracting State Logic into a Reducer"}
{"instruction": "Show me a code example of Writing concise reducers with Immer in React.", "input": "", "output": "Just like with updating objects and arrays in regular state, you can use the Immer library to make reducers more concise. Here, useImmerReducer lets you mutate the state with push or arr[i] = assignment:\n\n\n```javascript\n{\"dependencies\":{\"immer\":\"1.7.3\",\"react\":\"latest\",\"react-dom\":\"latest\",\"react-scripts\":\"latest\",\"use-immer\":\"0.5.1\"},\"scripts\":{\"start\":\"react-scripts start\",\"build\":\"react-scripts build\",\"test\":\"react-scripts test --env=jsdom\",\"eject\":\"react-scripts eject\"},\"devDependencies\":{}}\n```\n\n\nReducers must be pure, so they shouldn\u2019t mutate state. But Immer provides you with a special draft object which is safe to mutate. Under the hood, Immer will create a copy of your state with the changes you made to the draft . This is why reducers managed by useImmerReducer can mutate their first argument and don\u2019t need to return state.", "source": "https://react.dev/learn/extracting-state-logic-into-a-reducer", "category": "Extracting State Logic into a Reducer"}
{"instruction": "What is The root component file in React and how does it work?", "input": "", "output": "In Your First Component , you made a Profile component and a Gallery component that renders it:\n\n\n```javascript\nfunctionProfile(){return(<imgsrc=\"https://i.imgur.com/MK3eW3As.jpg\"alt=\"Katherine Johnson\"/>);}exportdefaultfunctionGallery(){return(<section><h1>Amazing scientists</h1><Profile/><Profile/><Profile/></section>);}\n```\n\n\nThese currently live in a root component file, named App.js in this example. Depending on your setup, your root component could be in another file, though. If you use a framework with file-based routing, such as Next.js, your root component will be different for every page.", "source": "https://react.dev/learn/importing-and-exporting-components", "category": "Importing and Exporting Components"}
{"instruction": "Show me a code example of The root component file in React.", "input": "", "output": "In Your First Component , you made a Profile component and a Gallery component that renders it:\n\n\n```javascript\nfunctionProfile(){return(<imgsrc=\"https://i.imgur.com/MK3eW3As.jpg\"alt=\"Katherine Johnson\"/>);}exportdefaultfunctionGallery(){return(<section><h1>Amazing scientists</h1><Profile/><Profile/><Profile/></section>);}\n```\n\n\nThese currently live in a root component file, named App.js in this example. Depending on your setup, your root component could be in another file, though. If you use a framework with file-based routing, such as Next.js, your root component will be different for every page.", "source": "https://react.dev/learn/importing-and-exporting-components", "category": "Importing and Exporting Components"}
{"instruction": "What is Exporting and importing a component in React and how does it work?", "input": "", "output": "What if you want to change the landing screen in the future and put a list of science books there? Or place all the profiles somewhere else? It makes sense to move Gallery and Profile out of the root component file. This will make them more modular and reusable in other files. You can move a component in three steps:\n\n1. Make a new JS file to put the components in.\n2. Export your function component from that file (using either default or named exports).\n3. Import it in the file where you\u2019ll use the component (using the corresponding technique for importing default or named exports).\n\nHere both Profile and Gallery have been moved out of App.js into a new file called Gallery.js . Now you can change App.js to import Gallery from Gallery.js :\n\n\n```javascript\nimportGalleryfrom'./Gallery.js';exportdefaultfunctionApp(){return(<Gallery/>);}\n```\n\n\nNotice how this example is broken down into two component files now:\n\n1. Gallery.js : Defines the Profile component which is only used within the same file and is not exported. Exports the Gallery component as a default export.\n2. App.js : Imports Gallery as a default import from Gallery.js . Exports the root App component as a default export.\n\n* Defines the Profile component which is only used within the same file and is not exported.\n* Exports the Gallery component as a default export.\n\n* Imports Gallery as a default import from Gallery.js .\n* Exports the root App component as a default export.\n\n\n### Note\n\n\nYou may encounter files that leave off the .js file extension like so:\n\n\n```javascript\nimportGalleryfrom'./Gallery';\n```\n\n\nEither './Gallery.js' or './Gallery' will work with React, though the former is closer to how native ES Modules work.\n\nThere are two primary ways to export values with JavaScript: default exports and named exports. So far, our examples have only used default exports. But you can use one or both of them in the same file. A file can have no more than one default export, but it can have as many named exports as you like.\n\nHow you export your component dictates how you must import it. You will get an error if you try to import a default export the same way you would a named export! This chart can help you keep track:\n\nWhen you write a default import, you can put any name you want after import . For example, you could write import Banana from './Button.js' instead and it would still provide you with the same default export. In contrast, with named imports, the name has to match on both sides. That\u2019s why they are called named imports!\n\nPeople often use default exports if the file exports only one component, and use named exports if it exports multiple components and values. Regardless of which coding style you prefer, always give meaningful names to your component functions and the files that contain them. Components without names, like export default () => {} , are discouraged because they make debugging harder.", "source": "https://react.dev/learn/importing-and-exporting-components", "category": "Importing and Exporting Components"}
{"instruction": "Show me a code example of Exporting and importing a component in React.", "input": "", "output": "What if you want to change the landing screen in the future and put a list of science books there? Or place all the profiles somewhere else? It makes sense to move Gallery and Profile out of the root component file. This will make them more modular and reusable in other files. You can move a component in three steps:\n\n1. Make a new JS file to put the components in.\n2. Export your function component from that file (using either default or named exports).\n3. Import it in the file where you\u2019ll use the component (using the corresponding technique for importing default or named exports).\n\nHere both Profile and Gallery have been moved out of App.js into a new file called Gallery.js . Now you can change App.js to import Gallery from Gallery.js :\n\n\n```javascript\nimportGalleryfrom'./Gallery.js';exportdefaultfunctionApp(){return(<Gallery/>);}\n```\n\n\nNotice how this example is broken down into two component files now:\n\n1. Gallery.js : Defines the Profile component which is only used within the same file and is not exported. Exports the Gallery component as a default export.\n2. App.js : Imports Gallery as a default import from Gallery.js . Exports the root App component as a default export.\n\n* Defines the Profile component which is only used within the same file and is not exported.\n* Exports the Gallery component as a default export.\n\n* Imports Gallery as a default import from Gallery.js .\n* Exports the root App component as a default export.\n\n\n### Note\n\n\nYou may encounter files that leave off the .js file extension like so:\n\n\n```javascript\nimportGalleryfrom'./Gallery';\n```\n\n\nEither './Gallery.js' or './Gallery' will work with React, though the former is closer to how native ES Modules work.\n\nThere are two primary ways to export values with JavaScript: default exports and named exports. So far, our examples have only used default exports. But you can use one or both of them in the same file. A file can have no more than one default export, but it can have as many named exports as you like.\n\nHow you export your component dictates how you must import it. You will get an error if you try to import a default export the same way you would a named export! This chart can help you keep track:\n\nWhen you write a default import, you can put any name you want after import . For example, you could write import Banana from './Button.js' instead and it would still provide you with the same default export. In contrast, with named imports, the name has to match on both sides. That\u2019s why they are called named imports!\n\nPeople often use default exports if the file exports only one component, and use named exports if it exports multiple components and values. Regardless of which coding style you prefer, always give meaningful names to your component functions and the files that contain them. Components without names, like export default () => {} , are discouraged because they make debugging harder.", "source": "https://react.dev/learn/importing-and-exporting-components", "category": "Importing and Exporting Components"}
{"instruction": "What is Exporting and importing multiple components from the same file in React and how does it work?", "input": "", "output": "What if you want to show just one Profile instead of a gallery? You can export the Profile component, too. But Gallery.js already has a default export, and you can\u2019t have two default exports. You could create a new file with a default export, or you could add a named export for Profile . A file can only have one default export, but it can have numerous named exports!\n\n\n### Note\n\n\nTo reduce the potential confusion between default and named exports, some teams choose to only stick to one style (default or named), or avoid mixing them in a single file. Do what works best for you!\n\nFirst, export Profile from Gallery.js using a named export (no default keyword):\n\n\n```javascript\nexportfunctionProfile(){// ...}\n```\n\n\nThen, import Profile from Gallery.js to App.js using a named import (with the curly braces):\n\n\n```javascript\nimport{Profile}from'./Gallery.js';\n```\n\n\nFinally, render <Profile /> from the App component:\n\n\n```javascript\nexportdefaultfunctionApp(){return<Profile/>;}\n```\n\n\nNow Gallery.js contains two exports: a default Gallery export, and a named Profile export. App.js imports both of them. Try editing <Profile /> to <Gallery /> and back in this example:\n\n\n```javascript\nimportGalleryfrom'./Gallery.js';import{Profile}from'./Gallery.js';exportdefaultfunctionApp(){return(<Profile/>);}\n```\n\n\nNow you\u2019re using a mix of default and named exports:\n\n* Gallery.js : Exports the Profile component as a named export called Profile . Exports the Gallery component as a default export.\n* App.js : Imports Profile as a named import called Profile from Gallery.js . Imports Gallery as a default import from Gallery.js . Exports the root App component as a default export.\n\n* Exports the Profile component as a named export called Profile .\n* Exports the Gallery component as a default export.\n\n* Imports Profile as a named import called Profile from Gallery.js .\n* Imports Gallery as a default import from Gallery.js .\n* Exports the root App component as a default export.", "source": "https://react.dev/learn/importing-and-exporting-components", "category": "Importing and Exporting Components"}
{"instruction": "Show me a code example of Exporting and importing multiple components from the same file in React.", "input": "", "output": "What if you want to show just one Profile instead of a gallery? You can export the Profile component, too. But Gallery.js already has a default export, and you can\u2019t have two default exports. You could create a new file with a default export, or you could add a named export for Profile . A file can only have one default export, but it can have numerous named exports!\n\n\n### Note\n\n\nTo reduce the potential confusion between default and named exports, some teams choose to only stick to one style (default or named), or avoid mixing them in a single file. Do what works best for you!\n\nFirst, export Profile from Gallery.js using a named export (no default keyword):\n\n\n```javascript\nexportfunctionProfile(){// ...}\n```\n\n\nThen, import Profile from Gallery.js to App.js using a named import (with the curly braces):\n\n\n```javascript\nimport{Profile}from'./Gallery.js';\n```\n\n\nFinally, render <Profile /> from the App component:\n\n\n```javascript\nexportdefaultfunctionApp(){return<Profile/>;}\n```\n\n\nNow Gallery.js contains two exports: a default Gallery export, and a named Profile export. App.js imports both of them. Try editing <Profile /> to <Gallery /> and back in this example:\n\n\n```javascript\nimportGalleryfrom'./Gallery.js';import{Profile}from'./Gallery.js';exportdefaultfunctionApp(){return(<Profile/>);}\n```\n\n\nNow you\u2019re using a mix of default and named exports:\n\n* Gallery.js : Exports the Profile component as a named export called Profile . Exports the Gallery component as a default export.\n* App.js : Imports Profile as a named import called Profile from Gallery.js . Imports Gallery as a default import from Gallery.js . Exports the root App component as a default export.\n\n* Exports the Profile component as a named export called Profile .\n* Exports the Gallery component as a default export.\n\n* Imports Profile as a named import called Profile from Gallery.js .\n* Imports Gallery as a default import from Gallery.js .\n* Exports the root App component as a default export.", "source": "https://react.dev/learn/importing-and-exporting-components", "category": "Importing and Exporting Components"}
{"instruction": "Can you describe Try React in the context of React?", "input": "", "output": "You don\u2019t need to install anything to play with React. Try editing this sandbox!\n\n\n```javascript\nfunctionGreeting({name}){return<h1>Hello,{name}</h1>;}exportdefaultfunctionApp(){return<Greetingname=\"world\"/>}\n```\n\n\nYou can edit it directly or open it in a new tab by pressing the \u201cFork\u201d button in the upper right corner.\n\nMost pages in the React documentation contain sandboxes like this. Outside of the React documentation, there are many online sandboxes that support React: for example, CodeSandbox , StackBlitz , or CodePen.\n\nTo try React locally on your computer, download this HTML page. Open it in your editor and in your browser!", "source": "https://react.dev/learn/installation", "category": "Installation"}
{"instruction": "Show me a code example of Try React in React.", "input": "", "output": "You don\u2019t need to install anything to play with React. Try editing this sandbox!\n\n\n```javascript\nfunctionGreeting({name}){return<h1>Hello,{name}</h1>;}exportdefaultfunctionApp(){return<Greetingname=\"world\"/>}\n```\n\n\nYou can edit it directly or open it in a new tab by pressing the \u201cFork\u201d button in the upper right corner.\n\nMost pages in the React documentation contain sandboxes like this. Outside of the React documentation, there are many online sandboxes that support React: for example, CodeSandbox , StackBlitz , or CodePen.\n\nTo try React locally on your computer, download this HTML page. Open it in your editor and in your browser!", "source": "https://react.dev/learn/installation", "category": "Installation"}
{"instruction": "What is Creating a React App in React and how does it work?", "input": "", "output": "If you want to start a new React app, you can create a React app using a recommended framework.", "source": "https://react.dev/learn/installation", "category": "Installation"}
{"instruction": "Can you describe Build a React App from Scratch in the context of React?", "input": "", "output": "If a framework is not a good fit for your project, you prefer to build your own framework, or you just want to learn the basics of a React app you can build a React app from scratch .", "source": "https://react.dev/learn/installation", "category": "Installation"}
{"instruction": "Tell me about Add React to an existing project.", "input": "", "output": "If want to try using React in your existing app or a website, you can add React to an existing project.\n\n\n### Note\n\n\nNo. Create React App has been deprecated. For more information, see Sunsetting Create React App .", "source": "https://react.dev/learn/installation", "category": "Installation"}
{"instruction": "What is the process for Passing strings with quotes in a React component?", "input": "", "output": "When you want to pass a string attribute to JSX, you put it in single or double quotes:\n\n\n```javascript\nexportdefaultfunctionAvatar(){return(<imgclassName=\"avatar\"src=\"https://i.imgur.com/7vQD0fPs.jpg\"alt=\"Gregorio Y. Zara\"/>);}\n```\n\n\nHere, \"https://i.imgur.com/7vQD0fPs.jpg\" and \"Gregorio Y. Zara\" are being passed as strings.\n\nBut what if you want to dynamically specify the src or alt text? You could use a value from JavaScript by replacing \" and \" with { and } :\n\n\n```javascript\nexportdefaultfunctionAvatar(){constavatar='https://i.imgur.com/7vQD0fPs.jpg';constdescription='Gregorio Y. Zara';return(<imgclassName=\"avatar\"src={avatar}alt={description}/>);}\n```\n\n\nNotice the difference between className=\"avatar\" , which specifies an \"avatar\" CSS class name that makes the image round, and src={avatar} that reads the value of the JavaScript variable called avatar . That\u2019s because curly braces let you work with JavaScript right there in your markup!", "source": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "category": "JavaScript in JSX with Curly Braces"}
{"instruction": "Show me a code example of Passing strings with quotes in React.", "input": "", "output": "When you want to pass a string attribute to JSX, you put it in single or double quotes:\n\n\n```javascript\nexportdefaultfunctionAvatar(){return(<imgclassName=\"avatar\"src=\"https://i.imgur.com/7vQD0fPs.jpg\"alt=\"Gregorio Y. Zara\"/>);}\n```\n\n\nHere, \"https://i.imgur.com/7vQD0fPs.jpg\" and \"Gregorio Y. Zara\" are being passed as strings.\n\nBut what if you want to dynamically specify the src or alt text? You could use a value from JavaScript by replacing \" and \" with { and } :\n\n\n```javascript\nexportdefaultfunctionAvatar(){constavatar='https://i.imgur.com/7vQD0fPs.jpg';constdescription='Gregorio Y. Zara';return(<imgclassName=\"avatar\"src={avatar}alt={description}/>);}\n```\n\n\nNotice the difference between className=\"avatar\" , which specifies an \"avatar\" CSS class name that makes the image round, and src={avatar} that reads the value of the JavaScript variable called avatar . That\u2019s because curly braces let you work with JavaScript right there in your markup!", "source": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "category": "JavaScript in JSX with Curly Braces"}
{"instruction": "Explain the concept of Using curly braces: A window into the JavaScript world in React.", "input": "", "output": "JSX is a special way of writing JavaScript. That means it\u2019s possible to use JavaScript inside it\u2014with curly braces { } . The example below first declares a name for the scientist, name , then embeds it with curly braces inside the <h1> :\n\n\n```javascript\nexportdefaultfunctionTodoList(){constname='Gregorio Y. Zara';return(<h1>{name}'s To Do List</h1>);}\n```\n\n\nTry changing the name \u2019s value from 'Gregorio Y. Zara' to 'Hedy Lamarr' . See how the list title changes?\n\nAny JavaScript expression will work between curly braces, including function calls like formatDate() :\n\n\n```javascript\nconsttoday=newDate();functionformatDate(date){returnnewIntl.DateTimeFormat('en-US',{weekday:'long'}).format(date);}exportdefaultfunctionTodoList(){return(<h1>To Do List for{formatDate(today)}</h1>);}\n```\n\n\n\n### Where to use curly braces\n\n\nYou can only use curly braces in two ways inside JSX:\n\n1. As text directly inside a JSX tag: <h1>{name}'s To Do List</h1> works, but <{tag}>Gregorio Y. Zara's To Do List</{tag}> will not.\n2. As attributes immediately following the = sign: src={avatar} will read the avatar variable, but src=\"{avatar}\" will pass the string \"{avatar}\" .", "source": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "category": "JavaScript in JSX with Curly Braces"}
{"instruction": "Show me a code example of Using curly braces: A window into the JavaScript world in React.", "input": "", "output": "JSX is a special way of writing JavaScript. That means it\u2019s possible to use JavaScript inside it\u2014with curly braces { } . The example below first declares a name for the scientist, name , then embeds it with curly braces inside the <h1> :\n\n\n```javascript\nexportdefaultfunctionTodoList(){constname='Gregorio Y. Zara';return(<h1>{name}'s To Do List</h1>);}\n```\n\n\nTry changing the name \u2019s value from 'Gregorio Y. Zara' to 'Hedy Lamarr' . See how the list title changes?\n\nAny JavaScript expression will work between curly braces, including function calls like formatDate() :\n\n\n```javascript\nconsttoday=newDate();functionformatDate(date){returnnewIntl.DateTimeFormat('en-US',{weekday:'long'}).format(date);}exportdefaultfunctionTodoList(){return(<h1>To Do List for{formatDate(today)}</h1>);}\n```\n\n\n\n### Where to use curly braces\n\n\nYou can only use curly braces in two ways inside JSX:\n\n1. As text directly inside a JSX tag: <h1>{name}'s To Do List</h1> works, but <{tag}>Gregorio Y. Zara's To Do List</{tag}> will not.\n2. As attributes immediately following the = sign: src={avatar} will read the avatar variable, but src=\"{avatar}\" will pass the string \"{avatar}\" .", "source": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "category": "JavaScript in JSX with Curly Braces"}
{"instruction": "Explain the concept of Using \u201cdouble curlies\u201d: CSS and other objects in JSX in React.", "input": "", "output": "In addition to strings, numbers, and other JavaScript expressions, you can even pass objects in JSX. Objects are also denoted with curly braces, like { name: \"Hedy Lamarr\", inventions: 5 } . Therefore, to pass a JS object in JSX, you must wrap the object in another pair of curly braces: person={{ name: \"Hedy Lamarr\", inventions: 5 }} .\n\nYou may see this with inline CSS styles in JSX. React does not require you to use inline styles (CSS classes work great for most cases). But when you need an inline style, you pass an object to the style attribute:\n\n\n```javascript\nexportdefaultfunctionTodoList(){return(<ulstyle={{backgroundColor:'black',color:'pink'}}><li>Improve the videophone</li><li>Prepare aeronautics lectures</li><li>Work on the alcohol-fuelled engine</li></ul>);}\n```\n\n\nTry changing the values of backgroundColor and color .\n\nYou can really see the JavaScript object inside the curly braces when you write it like this:\n\n\n```javascript\n<ulstyle={{backgroundColor:'black',color:'pink'}}>\n```\n\n\nThe next time you see {{ and }} in JSX, know that it\u2019s nothing more than an object inside the JSX curlies!\n\n\n### Pitfall\n\n\nInline style properties are written in camelCase. For example, HTML <ul style=\"background-color: black\"> would be written as <ul style={{ backgroundColor: 'black' }}> in your component.", "source": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "category": "JavaScript in JSX with Curly Braces"}
{"instruction": "Show me a code example of Using \u201cdouble curlies\u201d: CSS and other objects in JSX in React.", "input": "", "output": "In addition to strings, numbers, and other JavaScript expressions, you can even pass objects in JSX. Objects are also denoted with curly braces, like { name: \"Hedy Lamarr\", inventions: 5 } . Therefore, to pass a JS object in JSX, you must wrap the object in another pair of curly braces: person={{ name: \"Hedy Lamarr\", inventions: 5 }} .\n\nYou may see this with inline CSS styles in JSX. React does not require you to use inline styles (CSS classes work great for most cases). But when you need an inline style, you pass an object to the style attribute:\n\n\n```javascript\nexportdefaultfunctionTodoList(){return(<ulstyle={{backgroundColor:'black',color:'pink'}}><li>Improve the videophone</li><li>Prepare aeronautics lectures</li><li>Work on the alcohol-fuelled engine</li></ul>);}\n```\n\n\nTry changing the values of backgroundColor and color .\n\nYou can really see the JavaScript object inside the curly braces when you write it like this:\n\n\n```javascript\n<ulstyle={{backgroundColor:'black',color:'pink'}}>\n```\n\n\nThe next time you see {{ and }} in JSX, know that it\u2019s nothing more than an object inside the JSX curlies!\n\n\n### Pitfall\n\n\nInline style properties are written in camelCase. For example, HTML <ul style=\"background-color: black\"> would be written as <ul style={{ backgroundColor: 'black' }}> in your component.", "source": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "category": "JavaScript in JSX with Curly Braces"}
{"instruction": "Tell me about More fun with JavaScript objects and curly braces.", "input": "", "output": "You can move several expressions into one object, and reference them in your JSX inside curly braces:\n\n\n```javascript\nconstperson={name:'Gregorio Y. Zara',theme:{backgroundColor:'black',color:'pink'}};exportdefaultfunctionTodoList(){return(<divstyle={person.theme}><h1>{person.name}'s Todos</h1><imgclassName=\"avatar\"src=\"https://i.imgur.com/7vQD0fPs.jpg\"alt=\"Gregorio Y. Zara\"/><ul><li>Improve the videophone</li><li>Prepare aeronautics lectures</li><li>Work on the alcohol-fuelled engine</li></ul></div>);}\n```\n\n\nIn this example, the person JavaScript object contains a name string and a theme object:\n\n\n```javascript\nconstperson={name:'Gregorio Y. Zara',theme:{backgroundColor:'black',color:'pink'}};\n```\n\n\nThe component can use these values from person like so:\n\n\n```javascript\n<divstyle={person.theme}><h1>{person.name}'s Todos</h1>\n```\n\n\nJSX is very minimal as a templating language because it lets you organize data and logic using JavaScript.", "source": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "category": "JavaScript in JSX with Curly Braces"}
{"instruction": "Show me a code example of More fun with JavaScript objects and curly braces in React.", "input": "", "output": "You can move several expressions into one object, and reference them in your JSX inside curly braces:\n\n\n```javascript\nconstperson={name:'Gregorio Y. Zara',theme:{backgroundColor:'black',color:'pink'}};exportdefaultfunctionTodoList(){return(<divstyle={person.theme}><h1>{person.name}'s Todos</h1><imgclassName=\"avatar\"src=\"https://i.imgur.com/7vQD0fPs.jpg\"alt=\"Gregorio Y. Zara\"/><ul><li>Improve the videophone</li><li>Prepare aeronautics lectures</li><li>Work on the alcohol-fuelled engine</li></ul></div>);}\n```\n\n\nIn this example, the person JavaScript object contains a name string and a theme object:\n\n\n```javascript\nconstperson={name:'Gregorio Y. Zara',theme:{backgroundColor:'black',color:'pink'}};\n```\n\n\nThe component can use these values from person like so:\n\n\n```javascript\n<divstyle={person.theme}><h1>{person.name}'s Todos</h1>\n```\n\n\nJSX is very minimal as a templating language because it lets you organize data and logic using JavaScript.", "source": "https://react.dev/learn/javascript-in-jsx-with-curly-braces", "category": "JavaScript in JSX with Curly Braces"}
{"instruction": "Tell me about Purity: Components as formulas.", "input": "", "output": "In computer science (and especially the world of functional programming), a pure function is a function with the following characteristics:\n\n* It minds its own business. It does not change any objects or variables that existed before it was called.\n* Same inputs, same output. Given the same inputs, a pure function should always return the same result.\n\nYou might already be familiar with one example of pure functions: formulas in math.\n\nConsider this math formula: y = 2 x .\n\nIf x = 2 then y = 4 . Always.\n\nIf x = 3 then y = 6 . Always.\n\nIf x = 3 , y won\u2019t sometimes be 9 or \u20131 or 2.5 depending on the time of day or the state of the stock market.\n\nIf y = 2 x and x = 3 , y will always be 6 .\n\nIf we made this into a JavaScript function, it would look like this:\n\n\n```javascript\nfunctiondouble(number){return2*number;}\n```\n\n\nIn the above example, double is a pure function. If you pass it 3 , it will return 6 . Always.\n\nReact is designed around this concept. React assumes that every component you write is a pure function. This means that React components you write must always return the same JSX given the same inputs:\n\n\n```javascript\nfunctionRecipe({drinkers}){return(<ol><li>Boil{drinkers}cups of water.</li><li>Add{drinkers}spoons of tea and{0.5*drinkers}spoons of spice.</li><li>Add{0.5*drinkers}cups of milk to boil and sugar to taste.</li></ol>);}exportdefaultfunctionApp(){return(<section><h1>Spiced Chai Recipe</h1><h2>For two</h2><Recipedrinkers={2}/><h2>For a gathering</h2><Recipedrinkers={4}/></section>);}\n```\n\n\nWhen you pass drinkers={2} to Recipe , it will return JSX containing 2 cups of water . Always.\n\nIf you pass drinkers={4} , it will return JSX containing 4 cups of water . Always.\n\nJust like a math formula.\n\nYou could think of your components as recipes: if you follow them and don\u2019t introduce new ingredients during the cooking process, you will get the same dish every time. That \u201cdish\u201d is the JSX that the component serves to React to render.\n\nIllustrated by Rachel Lee Nabors", "source": "https://react.dev/learn/keeping-components-pure", "category": "Keeping Components Pure"}
{"instruction": "Show me a code example of Purity: Components as formulas in React.", "input": "", "output": "In computer science (and especially the world of functional programming), a pure function is a function with the following characteristics:\n\n* It minds its own business. It does not change any objects or variables that existed before it was called.\n* Same inputs, same output. Given the same inputs, a pure function should always return the same result.\n\nYou might already be familiar with one example of pure functions: formulas in math.\n\nConsider this math formula: y = 2 x .\n\nIf x = 2 then y = 4 . Always.\n\nIf x = 3 then y = 6 . Always.\n\nIf x = 3 , y won\u2019t sometimes be 9 or \u20131 or 2.5 depending on the time of day or the state of the stock market.\n\nIf y = 2 x and x = 3 , y will always be 6 .\n\nIf we made this into a JavaScript function, it would look like this:\n\n\n```javascript\nfunctiondouble(number){return2*number;}\n```\n\n\nIn the above example, double is a pure function. If you pass it 3 , it will return 6 . Always.\n\nReact is designed around this concept. React assumes that every component you write is a pure function. This means that React components you write must always return the same JSX given the same inputs:\n\n\n```javascript\nfunctionRecipe({drinkers}){return(<ol><li>Boil{drinkers}cups of water.</li><li>Add{drinkers}spoons of tea and{0.5*drinkers}spoons of spice.</li><li>Add{0.5*drinkers}cups of milk to boil and sugar to taste.</li></ol>);}exportdefaultfunctionApp(){return(<section><h1>Spiced Chai Recipe</h1><h2>For two</h2><Recipedrinkers={2}/><h2>For a gathering</h2><Recipedrinkers={4}/></section>);}\n```\n\n\nWhen you pass drinkers={2} to Recipe , it will return JSX containing 2 cups of water . Always.\n\nIf you pass drinkers={4} , it will return JSX containing 4 cups of water . Always.\n\nJust like a math formula.\n\nYou could think of your components as recipes: if you follow them and don\u2019t introduce new ingredients during the cooking process, you will get the same dish every time. That \u201cdish\u201d is the JSX that the component serves to React to render.\n\nIllustrated by Rachel Lee Nabors", "source": "https://react.dev/learn/keeping-components-pure", "category": "Keeping Components Pure"}
{"instruction": "What is Side Effects: (un)intended consequences in React and how does it work?", "input": "", "output": "React\u2019s rendering process must always be pure. Components should only return their JSX, and not change any objects or variables that existed before rendering\u2014that would make them impure!\n\nHere is a component that breaks this rule:\n\n\n```javascript\nletguest=0;functionCup(){// Bad: changing a preexisting variable!guest=guest+1;return<h2>Tea cup for guest #{guest}</h2>;}exportdefaultfunctionTeaSet(){return(<><Cup/><Cup/><Cup/></>);}\n```\n\n\nThis component is reading and writing a guest variable declared outside of it. This means that calling this component multiple times will produce different JSX! And what\u2019s more, if other components read guest , they will produce different JSX, too, depending on when they were rendered! That\u2019s not predictable.\n\nGoing back to our formula y = 2 x , now even if x = 2 , we cannot trust that y = 4 . Our tests could fail, our users would be baffled, planes would fall out of the sky\u2014you can see how this would lead to confusing bugs!\n\nYou can fix this component by passing guest as a prop instead :\n\n\n```javascript\nfunctionCup({guest}){return<h2>Tea cup for guest #{guest}</h2>;}exportdefaultfunctionTeaSet(){return(<><Cupguest={1}/><Cupguest={2}/><Cupguest={3}/></>);}\n```\n\n\nNow your component is pure, as the JSX it returns only depends on the guest prop.\n\nIn general, you should not expect your components to be rendered in any particular order. It doesn\u2019t matter if you call y = 2 x before or after y = 5 x : both formulas will resolve independently of each other. In the same way, each component should only \u201cthink for itself\u201d, and not attempt to coordinate with or depend upon others during rendering. Rendering is like a school exam: each component should calculate JSX on their own!\n\nAlthough you might not have used them all yet, in React there are three kinds of inputs that you can read while rendering: props , state , and context. You should always treat these inputs as read-only.\n\nWhen you want to change something in response to user input, you should set state instead of writing to a variable. You should never change preexisting variables or objects while your component is rendering.\n\nReact offers a \u201cStrict Mode\u201d in which it calls each component\u2019s function twice during development. By calling the component functions twice, Strict Mode helps find components that break these rules.\n\nNotice how the original example displayed \u201cGuest #2\u201d, \u201cGuest #4\u201d, and \u201cGuest #6\u201d instead of \u201cGuest #1\u201d, \u201cGuest #2\u201d, and \u201cGuest #3\u201d. The original function was impure, so calling it twice broke it. But the fixed pure version works even if the function is called twice every time. Pure functions only calculate, so calling them twice won\u2019t change anything \u2014just like calling double(2) twice doesn\u2019t change what\u2019s returned, and solving y = 2 x twice doesn\u2019t change what y is. Same inputs, same outputs. Always.\n\nStrict Mode has no effect in production, so it won\u2019t slow down the app for your users. To opt into Strict Mode, you can wrap your root component into <React.StrictMode> . Some frameworks do this by default.\n\n\n### Local mutation: Your component\u2019s little secret\n\n\nIn the above example, the problem was that the component changed a preexisting variable while rendering. This is often called a \u201cmutation\u201d to make it sound a bit scarier. Pure functions don\u2019t mutate variables outside of the function\u2019s scope or objects that were created before the call\u2014that makes them impure!\n\nHowever, it\u2019s completely fine to change variables and objects that you\u2019ve just created while rendering. In this example, you create an [] array, assign it to a cups variable, and then push a dozen cups into it:\n\n\n```javascript\nfunctionCup({guest}){return<h2>Tea cup for guest #{guest}</h2>;}exportdefaultfunctionTeaGathering(){constcups=[];for(leti=1;i<=12;i++){cups.push(<Cupkey={i}guest={i}/>);}returncups;}\n```\n\n\nIf the cups variable or the [] array were created outside the TeaGathering function, this would be a huge problem! You would be changing a preexisting object by pushing items into that array.\n\nHowever, it\u2019s fine because you\u2019ve created them during the same render , inside TeaGathering . No code outside of TeaGathering will ever know that this happened. This is called \u201clocal mutation\u201d \u2014it\u2019s like your component\u2019s little secret.", "source": "https://react.dev/learn/keeping-components-pure", "category": "Keeping Components Pure"}
{"instruction": "Show me a code example of Side Effects: (un)intended consequences in React.", "input": "", "output": "React\u2019s rendering process must always be pure. Components should only return their JSX, and not change any objects or variables that existed before rendering\u2014that would make them impure!\n\nHere is a component that breaks this rule:\n\n\n```javascript\nletguest=0;functionCup(){// Bad: changing a preexisting variable!guest=guest+1;return<h2>Tea cup for guest #{guest}</h2>;}exportdefaultfunctionTeaSet(){return(<><Cup/><Cup/><Cup/></>);}\n```\n\n\nThis component is reading and writing a guest variable declared outside of it. This means that calling this component multiple times will produce different JSX! And what\u2019s more, if other components read guest , they will produce different JSX, too, depending on when they were rendered! That\u2019s not predictable.\n\nGoing back to our formula y = 2 x , now even if x = 2 , we cannot trust that y = 4 . Our tests could fail, our users would be baffled, planes would fall out of the sky\u2014you can see how this would lead to confusing bugs!\n\nYou can fix this component by passing guest as a prop instead :\n\n\n```javascript\nfunctionCup({guest}){return<h2>Tea cup for guest #{guest}</h2>;}exportdefaultfunctionTeaSet(){return(<><Cupguest={1}/><Cupguest={2}/><Cupguest={3}/></>);}\n```\n\n\nNow your component is pure, as the JSX it returns only depends on the guest prop.\n\nIn general, you should not expect your components to be rendered in any particular order. It doesn\u2019t matter if you call y = 2 x before or after y = 5 x : both formulas will resolve independently of each other. In the same way, each component should only \u201cthink for itself\u201d, and not attempt to coordinate with or depend upon others during rendering. Rendering is like a school exam: each component should calculate JSX on their own!\n\nAlthough you might not have used them all yet, in React there are three kinds of inputs that you can read while rendering: props , state , and context. You should always treat these inputs as read-only.\n\nWhen you want to change something in response to user input, you should set state instead of writing to a variable. You should never change preexisting variables or objects while your component is rendering.\n\nReact offers a \u201cStrict Mode\u201d in which it calls each component\u2019s function twice during development. By calling the component functions twice, Strict Mode helps find components that break these rules.\n\nNotice how the original example displayed \u201cGuest #2\u201d, \u201cGuest #4\u201d, and \u201cGuest #6\u201d instead of \u201cGuest #1\u201d, \u201cGuest #2\u201d, and \u201cGuest #3\u201d. The original function was impure, so calling it twice broke it. But the fixed pure version works even if the function is called twice every time. Pure functions only calculate, so calling them twice won\u2019t change anything \u2014just like calling double(2) twice doesn\u2019t change what\u2019s returned, and solving y = 2 x twice doesn\u2019t change what y is. Same inputs, same outputs. Always.\n\nStrict Mode has no effect in production, so it won\u2019t slow down the app for your users. To opt into Strict Mode, you can wrap your root component into <React.StrictMode> . Some frameworks do this by default.\n\n\n### Local mutation: Your component\u2019s little secret\n\n\nIn the above example, the problem was that the component changed a preexisting variable while rendering. This is often called a \u201cmutation\u201d to make it sound a bit scarier. Pure functions don\u2019t mutate variables outside of the function\u2019s scope or objects that were created before the call\u2014that makes them impure!\n\nHowever, it\u2019s completely fine to change variables and objects that you\u2019ve just created while rendering. In this example, you create an [] array, assign it to a cups variable, and then push a dozen cups into it:\n\n\n```javascript\nfunctionCup({guest}){return<h2>Tea cup for guest #{guest}</h2>;}exportdefaultfunctionTeaGathering(){constcups=[];for(leti=1;i<=12;i++){cups.push(<Cupkey={i}guest={i}/>);}returncups;}\n```\n\n\nIf the cups variable or the [] array were created outside the TeaGathering function, this would be a huge problem! You would be changing a preexisting object by pushing items into that array.\n\nHowever, it\u2019s fine because you\u2019ve created them during the same render , inside TeaGathering . No code outside of TeaGathering will ever know that this happened. This is called \u201clocal mutation\u201d \u2014it\u2019s like your component\u2019s little secret.", "source": "https://react.dev/learn/keeping-components-pure", "category": "Keeping Components Pure"}
{"instruction": "What are the best practices for Side Effects: (un)intended consequences in React?", "input": "", "output": "React\u2019s rendering process must always be pure. Components should only return their JSX, and not change any objects or variables that existed before rendering\u2014that would make them impure!\n\nHere is a component that breaks this rule:\n\n\n```javascript\nletguest=0;functionCup(){// Bad: changing a preexisting variable!guest=guest+1;return<h2>Tea cup for guest #{guest}</h2>;}exportdefaultfunctionTeaSet(){return(<><Cup/><Cup/><Cup/></>);}\n```\n\n\nThis component is reading and writing a guest variable declared outside of it. This means that calling this component multiple times will produce different JSX! And what\u2019s more, if other components read guest , they will produce different JSX, too, depending on when they were rendered! That\u2019s not predictable.\n\nGoing back to our formula y = 2 x , now even if x = 2 , we cannot trust that y = 4 . Our tests could fail, our users would be baffled, planes would fall out of the sky\u2014you can see how this would lead to confusing bugs!\n\nYou can fix this component by passing guest as a prop instead :\n\n\n```javascript\nfunctionCup({guest}){return<h2>Tea cup for guest #{guest}</h2>;}exportdefaultfunctionTeaSet(){return(<><Cupguest={1}/><Cupguest={2}/><Cupguest={3}/></>);}\n```\n\n\nNow your component is pure, as the JSX it returns only depends on the guest prop.\n\nIn general, you should not expect your components to be rendered in any particular order. It doesn\u2019t matter if you call y = 2 x before or after y = 5 x : both formulas will resolve independently of each other. In the same way, each component should only \u201cthink for itself\u201d, and not attempt to coordinate with or depend upon others during rendering. Rendering is like a school exam: each component should calculate JSX on their own!\n\nAlthough you might not have used them all yet, in React there are three kinds of inputs that you can read while rendering: props , state , and context. You should always treat these inputs as read-only.\n\nWhen you want to change something in response to user input, you should set state instead of writing to a variable. You should never change preexisting variables or objects while your component is rendering.\n\nReact offers a \u201cStrict Mode\u201d in which it calls each component\u2019s function twice during development. By calling the component functions twice, Strict Mode helps find components that break these rules.\n\nNotice how the original example displayed \u201cGuest #2\u201d, \u201cGuest #4\u201d, and \u201cGuest #6\u201d instead of \u201cGuest #1\u201d, \u201cGuest #2\u201d, and \u201cGuest #3\u201d. The original function was impure, so calling it twice broke it. But the fixed pure version works even if the function is called twice every time. Pure functions only calculate, so calling them twice won\u2019t change anything \u2014just like calling double(2) twice doesn\u2019t change what\u2019s returned, and solving y = 2 x twice doesn\u2019t change what y is. Same inputs, same outputs. Always.\n\nStrict Mode has no effect in production, so it won\u2019t slow down the app for your users. To opt into Strict Mode, you can wrap your root component into <React.StrictMode> . Some frameworks do this by default.\n\n\n### Local mutation: Your component\u2019s little secret\n\n\nIn the above example, the problem was that the component changed a preexisting variable while rendering. This is often called a \u201cmutation\u201d to make it sound a bit scarier. Pure functions don\u2019t mutate variables outside of the function\u2019s scope or objects that were created before the call\u2014that makes them impure!\n\nHowever, it\u2019s completely fine to change variables and objects that you\u2019ve just created while rendering. In this example, you create an [] array, assign it to a cups variable, and then push a dozen cups into it:\n\n\n```javascript\nfunctionCup({guest}){return<h2>Tea cup for guest #{guest}</h2>;}exportdefaultfunctionTeaGathering(){constcups=[];for(leti=1;i<=12;i++){cups.push(<Cupkey={i}guest={i}/>);}returncups;}\n```\n\n\nIf the cups variable or the [] array were created outside the TeaGathering function, this would be a huge problem! You would be changing a preexisting object by pushing items into that array.\n\nHowever, it\u2019s fine because you\u2019ve created them during the same render , inside TeaGathering . No code outside of TeaGathering will ever know that this happened. This is called \u201clocal mutation\u201d \u2014it\u2019s like your component\u2019s little secret.", "source": "https://react.dev/learn/keeping-components-pure", "category": "Keeping Components Pure"}
{"instruction": "Tell me about Where youcancause side effects.", "input": "", "output": "While functional programming relies heavily on purity, at some point, somewhere, something has to change. That\u2019s kind of the point of programming! These changes\u2014updating the screen, starting an animation, changing the data\u2014are called side effects. They\u2019re things that happen \u201con the side\u201d , not during rendering.\n\nIn React, side effects usually belong inside event handlers. Event handlers are functions that React runs when you perform some action\u2014for example, when you click a button. Even though event handlers are defined inside your component, they don\u2019t run during rendering! So event handlers don\u2019t need to be pure.\n\nIf you\u2019ve exhausted all other options and can\u2019t find the right event handler for your side effect, you can still attach it to your returned JSX with a useEffect call in your component. This tells React to execute it later, after rendering, when side effects are allowed. However, this approach should be your last resort.\n\nWhen possible, try to express your logic with rendering alone. You\u2019ll be surprised how far this can take you!\n\nWriting pure functions takes some habit and discipline. But it also unlocks marvelous opportunities:\n\n* Your components could run in a different environment\u2014for example, on the server! Since they return the same result for the same inputs, one component can serve many user requests.\n* You can improve performance by skipping rendering components whose inputs have not changed. This is safe because pure functions always return the same results, so they are safe to cache.\n* If some data changes in the middle of rendering a deep component tree, React can restart rendering without wasting time to finish the outdated render. Purity makes it safe to stop calculating at any time.\n\nEvery new React feature we\u2019re building takes advantage of purity. From data fetching to animations to performance, keeping components pure unlocks the power of the React paradigm.", "source": "https://react.dev/learn/keeping-components-pure", "category": "Keeping Components Pure"}
{"instruction": "Tell me about The lifecycle of an Effect.", "input": "", "output": "Every React component goes through the same lifecycle:\n\n* A component mounts when it\u2019s added to the screen.\n* A component updates when it receives new props or state, usually in response to an interaction.\n* A component unmounts when it\u2019s removed from the screen.\n\nIt\u2019s a good way to think about components, but not about Effects. Instead, try to think about each Effect independently from your component\u2019s lifecycle. An Effect describes how to synchronize an external system to the current props and state. As your code changes, synchronization will need to happen more or less often.\n\nTo illustrate this point, consider this Effect connecting your component to a chat server:\n\n\n```javascript\nconstserverUrl='https://localhost:1234';functionChatRoom({roomId}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};},[roomId]);// ...}\n```\n\n\nYour Effect\u2019s body specifies how to start synchronizing:\n\n\n```javascript\n// ...constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};// ...\n```\n\n\nThe cleanup function returned by your Effect specifies how to stop synchronizing:\n\n\n```javascript\n// ...constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};// ...\n```\n\n\nIntuitively, you might think that React would start synchronizing when your component mounts and stop synchronizing when your component unmounts. However, this is not the end of the story! Sometimes, it may also be necessary to start and stop synchronizing multiple times while the component remains mounted.\n\nLet\u2019s look at why this is necessary, when it happens, and how you can control this behavior.\n\n\n### Note\n\n\nSome Effects don\u2019t return a cleanup function at all. More often than not, you\u2019ll want to return one\u2014but if you don\u2019t, React will behave as if you returned an empty cleanup function.\n\n\n### Why synchronization may need to happen more than once\n\n\nImagine this ChatRoom component receives a roomId prop that the user picks in a dropdown. Let\u2019s say that initially the user picks the \"general\" room as the roomId . Your app displays the \"general\" chat room:\n\n\n```javascript\nconstserverUrl='https://localhost:1234';functionChatRoom({roomId/* \"general\" */}){// ...return<h1>Welcome to the{roomId}room!</h1>;}\n```\n\n\nAfter the UI is displayed, React will run your Effect to start synchronizing. It connects to the \"general\" room:\n\n\n```javascript\nfunctionChatRoom({roomId/* \"general\" */}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);// Connects to the \"general\" roomconnection.connect();return()=>{connection.disconnect();// Disconnects from the \"general\" room};},[roomId]);// ...\n```\n\n\nSo far, so good.\n\nLater, the user picks a different room in the dropdown (for example, \"travel\" ). First, React will update the UI:\n\n\n```javascript\nfunctionChatRoom({roomId/* \"travel\" */}){// ...return<h1>Welcome to the{roomId}room!</h1>;}\n```\n\n\nThink about what should happen next. The user sees that \"travel\" is the selected chat room in the UI. However, the Effect that ran the last time is still connected to the \"general\" room. The roomId prop has changed, so what your Effect did back then (connecting to the \"general\" room) no longer matches the UI.\n\nAt this point, you want React to do two things:\n\n1. Stop synchronizing with the old roomId (disconnect from the \"general\" room)\n2. Start synchronizing with the new roomId (connect to the \"travel\" room)\n\nLuckily, you\u2019ve already taught React how to do both of these things! Your Effect\u2019s body specifies how to start synchronizing, and your cleanup function specifies how to stop synchronizing. All that React needs to do now is to call them in the correct order and with the correct props and state. Let\u2019s see how exactly that happens.\n\n\n### How React re-synchronizes your Effect\n\n\nRecall that your ChatRoom component has received a new value for its roomId prop. It used to be \"general\" , and now it is \"travel\" . React needs to re-synchronize your Effect to re-connect you to a different room.\n\nTo stop synchronizing, React will call the cleanup function that your Effect returned after connecting to the \"general\" room. Since roomId was \"general\" , the cleanup function disconnects from the \"general\" room:\n\n\n```javascript\nfunctionChatRoom({roomId/* \"general\" */}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);// Connects to the \"general\" roomconnection.connect();return()=>{connection.disconnect();// Disconnects from the \"general\" room};// ...\n```\n\n\nThen React will run the Effect that you\u2019ve provided during this render. This time, roomId is \"travel\" so it will start synchronizing to the \"travel\" chat room (until its cleanup function is eventually called too):\n\n\n```javascript\nfunctionChatRoom({roomId/* \"travel\" */}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);// Connects to the \"travel\" roomconnection.connect();// ...\n```\n\n\nThanks to this, you\u2019re now connected to the same room that the user chose in the UI. Disaster averted!\n\nEvery time after your component re-renders with a different roomId , your Effect will re-synchronize. For example, let\u2019s say the user changes roomId from \"travel\" to \"music\" . React will again stop synchronizing your Effect by calling its cleanup function (disconnecting you from the \"travel\" room). Then it will start synchronizing again by running its body with the new roomId prop (connecting you to the \"music\" room).\n\nFinally, when the user goes to a different screen, ChatRoom unmounts. Now there is no need to stay connected at all. React will stop synchronizing your Effect one last time and disconnect you from the \"music\" chat room.\n\n\n### Thinking from the Effect\u2019s perspective\n\n\nLet\u2019s recap everything that\u2019s happened from the ChatRoom component\u2019s perspective:\n\n1. ChatRoom mounted with roomId set to \"general\"\n2. ChatRoom updated with roomId set to \"travel\"\n3. ChatRoom updated with roomId set to \"music\"\n4. ChatRoom unmounted\n\nDuring each of these points in the component\u2019s lifecycle, your Effect did different things:\n\n1. Your Effect connected to the \"general\" room\n2. Your Effect disconnected from the \"general\" room and connected to the \"travel\" room\n3. Your Effect disconnected from the \"travel\" room and connected to the \"music\" room\n4. Your Effect disconnected from the \"music\" room\n\nNow let\u2019s think about what happened from the perspective of the Effect itself:\n\n\n```javascript\nuseEffect(()=>{// Your Effect connected to the room specified with roomId...constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{// ...until it disconnectedconnection.disconnect();};},[roomId]);\n```\n\n\nThis code\u2019s structure might inspire you to see what happened as a sequence of non-overlapping time periods:\n\n1. Your Effect connected to the \"general\" room (until it disconnected)\n2. Your Effect connected to the \"travel\" room (until it disconnected)\n3. Your Effect connected to the \"music\" room (until it disconnected)\n\nPreviously, you were thinking from the component\u2019s perspective. When you looked from the component\u2019s perspective, it was tempting to think of Effects as \u201ccallbacks\u201d or \u201clifecycle events\u201d that fire at a specific time like \u201cafter a render\u201d or \u201cbefore unmount\u201d. This way of thinking gets complicated very fast, so it\u2019s best to avoid.\n\nInstead, always focus on a single start/stop cycle at a time. It shouldn\u2019t matter whether a component is mounting, updating, or unmounting. All you need to do is to describe how to start synchronization and how to stop it. If you do it well, your Effect will be resilient to being started and stopped as many times as it\u2019s needed.\n\nThis might remind you how you don\u2019t think whether a component is mounting or updating when you write the rendering logic that creates JSX. You describe what should be on the screen, and React figures out the rest.\n\n\n### How React verifies that your Effect can re-synchronize\n\n\nHere is a live example that you can play with. Press \u201cOpen chat\u201d to mount the ChatRoom component:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[roomId]);return<h1>Welcome to the{roomId}room!</h1>;}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');const[show,setShow]=useState(false);return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><buttononClick={()=>setShow(!show)}>{show?'Close chat':'Open chat'}</button>{show&&<hr/>}{show&&<ChatRoomroomId={roomId}/>}</>);}\n```\n\n\nNotice that when the component mounts for the first time, you see three logs:\n\n1. \u2705 Connecting to \"general\" room at https://localhost:1234... (development-only)\n2. \u274c Disconnected from \"general\" room at https://localhost:1234. (development-only)\n3. \u2705 Connecting to \"general\" room at https://localhost:1234...\n\nThe first two logs are development-only. In development, React always remounts each component once.\n\nReact verifies that your Effect can re-synchronize by forcing it to do that immediately in development. This might remind you of opening a door and closing it an extra time to check if the door lock works. React starts and stops your Effect one extra time in development to check you\u2019ve implemented its cleanup well.\n\nThe main reason your Effect will re-synchronize in practice is if some data it uses has changed. In the sandbox above, change the selected chat room. Notice how, when the roomId changes, your Effect re-synchronizes.\n\nHowever, there are also more unusual cases in which re-synchronization is necessary. For example, try editing the serverUrl in the sandbox above while the chat is open. Notice how the Effect re-synchronizes in response to your edits to the code. In the future, React may add more features that rely on re-synchronization.\n\n\n### How React knows that it needs to re-synchronize the Effect\n\n\nYou might be wondering how React knew that your Effect needed to re-synchronize after roomId changes. It\u2019s because you told React that its code depends on roomId by including it in the list of dependencies:\n\n\n```javascript\nfunctionChatRoom({roomId}){// The roomId prop may change over timeuseEffect(()=>{constconnection=createConnection(serverUrl,roomId);// This Effect reads roomIdconnection.connect();return()=>{connection.disconnect();};},[roomId]);// So you tell React that this Effect \"depends on\" roomId// ...\n```\n\n\nHere\u2019s how this works:\n\n1. You knew roomId is a prop, which means it can change over time.\n2. You knew that your Effect reads roomId (so its logic depends on a value that may change later).\n3. This is why you specified it as your Effect\u2019s dependency (so that it re-synchronizes when roomId changes).\n\nEvery time after your component re-renders, React will look at the array of dependencies that you have passed. If any of the values in the array is different from the value at the same spot that you passed during the previous render, React will re-synchronize your Effect.\n\nFor example, if you passed [\"general\"] during the initial render, and later you passed [\"travel\"] during the next render, React will compare \"general\" and \"travel\" . These are different values (compared with Object.is ), so React will re-synchronize your Effect. On the other hand, if your component re-renders but roomId has not changed, your Effect will remain connected to the same room.\n\n\n### Each Effect represents a separate synchronization process\n\n\nResist adding unrelated logic to your Effect only because this logic needs to run at the same time as an Effect you already wrote. For example, let\u2019s say you want to send an analytics event when the user visits the room. You already have an Effect that depends on roomId , so you might feel tempted to add the analytics call there:\n\n\n```javascript\nfunctionChatRoom({roomId}){useEffect(()=>{logVisit(roomId);constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};},[roomId]);// ...}\n```\n\n\nBut imagine you later add another dependency to this Effect that needs to re-establish the connection. If this Effect re-synchronizes, it will also call logVisit(roomId) for the same room, which you did not intend. Logging the visit is a separate process from connecting. Write them as two separate Effects:\n\n\n```javascript\nfunctionChatRoom({roomId}){useEffect(()=>{logVisit(roomId);},[roomId]);useEffect(()=>{constconnection=createConnection(serverUrl,roomId);// ...},[roomId]);// ...}\n```\n\n\nEach Effect in your code should represent a separate and independent synchronization process.\n\nIn the above example, deleting one Effect wouldn\u2019t break the other Effect\u2019s logic. This is a good indication that they synchronize different things, and so it made sense to split them up. On the other hand, if you split up a cohesive piece of logic into separate Effects, the code may look \u201ccleaner\u201d but will be more difficult to maintain. This is why you should think whether the processes are same or separate, not whether the code looks cleaner.", "source": "https://react.dev/learn/lifecycle-of-reactive-effects", "category": "Lifecycle of Reactive Effects"}
{"instruction": "Show me a code example of The lifecycle of an Effect in React.", "input": "", "output": "Every React component goes through the same lifecycle:\n\n* A component mounts when it\u2019s added to the screen.\n* A component updates when it receives new props or state, usually in response to an interaction.\n* A component unmounts when it\u2019s removed from the screen.\n\nIt\u2019s a good way to think about components, but not about Effects. Instead, try to think about each Effect independently from your component\u2019s lifecycle. An Effect describes how to synchronize an external system to the current props and state. As your code changes, synchronization will need to happen more or less often.\n\nTo illustrate this point, consider this Effect connecting your component to a chat server:\n\n\n```javascript\nconstserverUrl='https://localhost:1234';functionChatRoom({roomId}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};},[roomId]);// ...}\n```\n\n\nYour Effect\u2019s body specifies how to start synchronizing:\n\n\n```javascript\n// ...constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};// ...\n```\n\n\nThe cleanup function returned by your Effect specifies how to stop synchronizing:\n\n\n```javascript\n// ...constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};// ...\n```\n\n\nIntuitively, you might think that React would start synchronizing when your component mounts and stop synchronizing when your component unmounts. However, this is not the end of the story! Sometimes, it may also be necessary to start and stop synchronizing multiple times while the component remains mounted.\n\nLet\u2019s look at why this is necessary, when it happens, and how you can control this behavior.\n\n\n### Note\n\n\nSome Effects don\u2019t return a cleanup function at all. More often than not, you\u2019ll want to return one\u2014but if you don\u2019t, React will behave as if you returned an empty cleanup function.\n\n\n### Why synchronization may need to happen more than once\n\n\nImagine this ChatRoom component receives a roomId prop that the user picks in a dropdown. Let\u2019s say that initially the user picks the \"general\" room as the roomId . Your app displays the \"general\" chat room:\n\n\n```javascript\nconstserverUrl='https://localhost:1234';functionChatRoom({roomId/* \"general\" */}){// ...return<h1>Welcome to the{roomId}room!</h1>;}\n```\n\n\nAfter the UI is displayed, React will run your Effect to start synchronizing. It connects to the \"general\" room:\n\n\n```javascript\nfunctionChatRoom({roomId/* \"general\" */}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);// Connects to the \"general\" roomconnection.connect();return()=>{connection.disconnect();// Disconnects from the \"general\" room};},[roomId]);// ...\n```\n\n\nSo far, so good.\n\nLater, the user picks a different room in the dropdown (for example, \"travel\" ). First, React will update the UI:\n\n\n```javascript\nfunctionChatRoom({roomId/* \"travel\" */}){// ...return<h1>Welcome to the{roomId}room!</h1>;}\n```\n\n\nThink about what should happen next. The user sees that \"travel\" is the selected chat room in the UI. However, the Effect that ran the last time is still connected to the \"general\" room. The roomId prop has changed, so what your Effect did back then (connecting to the \"general\" room) no longer matches the UI.\n\nAt this point, you want React to do two things:\n\n1. Stop synchronizing with the old roomId (disconnect from the \"general\" room)\n2. Start synchronizing with the new roomId (connect to the \"travel\" room)\n\nLuckily, you\u2019ve already taught React how to do both of these things! Your Effect\u2019s body specifies how to start synchronizing, and your cleanup function specifies how to stop synchronizing. All that React needs to do now is to call them in the correct order and with the correct props and state. Let\u2019s see how exactly that happens.\n\n\n### How React re-synchronizes your Effect\n\n\nRecall that your ChatRoom component has received a new value for its roomId prop. It used to be \"general\" , and now it is \"travel\" . React needs to re-synchronize your Effect to re-connect you to a different room.\n\nTo stop synchronizing, React will call the cleanup function that your Effect returned after connecting to the \"general\" room. Since roomId was \"general\" , the cleanup function disconnects from the \"general\" room:\n\n\n```javascript\nfunctionChatRoom({roomId/* \"general\" */}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);// Connects to the \"general\" roomconnection.connect();return()=>{connection.disconnect();// Disconnects from the \"general\" room};// ...\n```\n\n\nThen React will run the Effect that you\u2019ve provided during this render. This time, roomId is \"travel\" so it will start synchronizing to the \"travel\" chat room (until its cleanup function is eventually called too):\n\n\n```javascript\nfunctionChatRoom({roomId/* \"travel\" */}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);// Connects to the \"travel\" roomconnection.connect();// ...\n```\n\n\nThanks to this, you\u2019re now connected to the same room that the user chose in the UI. Disaster averted!\n\nEvery time after your component re-renders with a different roomId , your Effect will re-synchronize. For example, let\u2019s say the user changes roomId from \"travel\" to \"music\" . React will again stop synchronizing your Effect by calling its cleanup function (disconnecting you from the \"travel\" room). Then it will start synchronizing again by running its body with the new roomId prop (connecting you to the \"music\" room).\n\nFinally, when the user goes to a different screen, ChatRoom unmounts. Now there is no need to stay connected at all. React will stop synchronizing your Effect one last time and disconnect you from the \"music\" chat room.\n\n\n### Thinking from the Effect\u2019s perspective\n\n\nLet\u2019s recap everything that\u2019s happened from the ChatRoom component\u2019s perspective:\n\n1. ChatRoom mounted with roomId set to \"general\"\n2. ChatRoom updated with roomId set to \"travel\"\n3. ChatRoom updated with roomId set to \"music\"\n4. ChatRoom unmounted\n\nDuring each of these points in the component\u2019s lifecycle, your Effect did different things:\n\n1. Your Effect connected to the \"general\" room\n2. Your Effect disconnected from the \"general\" room and connected to the \"travel\" room\n3. Your Effect disconnected from the \"travel\" room and connected to the \"music\" room\n4. Your Effect disconnected from the \"music\" room\n\nNow let\u2019s think about what happened from the perspective of the Effect itself:\n\n\n```javascript\nuseEffect(()=>{// Your Effect connected to the room specified with roomId...constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{// ...until it disconnectedconnection.disconnect();};},[roomId]);\n```\n\n\nThis code\u2019s structure might inspire you to see what happened as a sequence of non-overlapping time periods:\n\n1. Your Effect connected to the \"general\" room (until it disconnected)\n2. Your Effect connected to the \"travel\" room (until it disconnected)\n3. Your Effect connected to the \"music\" room (until it disconnected)\n\nPreviously, you were thinking from the component\u2019s perspective. When you looked from the component\u2019s perspective, it was tempting to think of Effects as \u201ccallbacks\u201d or \u201clifecycle events\u201d that fire at a specific time like \u201cafter a render\u201d or \u201cbefore unmount\u201d. This way of thinking gets complicated very fast, so it\u2019s best to avoid.\n\nInstead, always focus on a single start/stop cycle at a time. It shouldn\u2019t matter whether a component is mounting, updating, or unmounting. All you need to do is to describe how to start synchronization and how to stop it. If you do it well, your Effect will be resilient to being started and stopped as many times as it\u2019s needed.\n\nThis might remind you how you don\u2019t think whether a component is mounting or updating when you write the rendering logic that creates JSX. You describe what should be on the screen, and React figures out the rest.\n\n\n### How React verifies that your Effect can re-synchronize\n\n\nHere is a live example that you can play with. Press \u201cOpen chat\u201d to mount the ChatRoom component:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[roomId]);return<h1>Welcome to the{roomId}room!</h1>;}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');const[show,setShow]=useState(false);return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><buttononClick={()=>setShow(!show)}>{show?'Close chat':'Open chat'}</button>{show&&<hr/>}{show&&<ChatRoomroomId={roomId}/>}</>);}\n```\n\n\nNotice that when the component mounts for the first time, you see three logs:\n\n1. \u2705 Connecting to \"general\" room at https://localhost:1234... (development-only)\n2. \u274c Disconnected from \"general\" room at https://localhost:1234. (development-only)\n3. \u2705 Connecting to \"general\" room at https://localhost:1234...\n\nThe first two logs are development-only. In development, React always remounts each component once.\n\nReact verifies that your Effect can re-synchronize by forcing it to do that immediately in development. This might remind you of opening a door and closing it an extra time to check if the door lock works. React starts and stops your Effect one extra time in development to check you\u2019ve implemented its cleanup well.\n\nThe main reason your Effect will re-synchronize in practice is if some data it uses has changed. In the sandbox above, change the selected chat room. Notice how, when the roomId changes, your Effect re-synchronizes.\n\nHowever, there are also more unusual cases in which re-synchronization is necessary. For example, try editing the serverUrl in the sandbox above while the chat is open. Notice how the Effect re-synchronizes in response to your edits to the code. In the future, React may add more features that rely on re-synchronization.\n\n\n### How React knows that it needs to re-synchronize the Effect\n\n\nYou might be wondering how React knew that your Effect needed to re-synchronize after roomId changes. It\u2019s because you told React that its code depends on roomId by including it in the list of dependencies:\n\n\n```javascript\nfunctionChatRoom({roomId}){// The roomId prop may change over timeuseEffect(()=>{constconnection=createConnection(serverUrl,roomId);// This Effect reads roomIdconnection.connect();return()=>{connection.disconnect();};},[roomId]);// So you tell React that this Effect \"depends on\" roomId// ...\n```\n\n\nHere\u2019s how this works:\n\n1. You knew roomId is a prop, which means it can change over time.\n2. You knew that your Effect reads roomId (so its logic depends on a value that may change later).\n3. This is why you specified it as your Effect\u2019s dependency (so that it re-synchronizes when roomId changes).\n\nEvery time after your component re-renders, React will look at the array of dependencies that you have passed. If any of the values in the array is different from the value at the same spot that you passed during the previous render, React will re-synchronize your Effect.\n\nFor example, if you passed [\"general\"] during the initial render, and later you passed [\"travel\"] during the next render, React will compare \"general\" and \"travel\" . These are different values (compared with Object.is ), so React will re-synchronize your Effect. On the other hand, if your component re-renders but roomId has not changed, your Effect will remain connected to the same room.\n\n\n### Each Effect represents a separate synchronization process\n\n\nResist adding unrelated logic to your Effect only because this logic needs to run at the same time as an Effect you already wrote. For example, let\u2019s say you want to send an analytics event when the user visits the room. You already have an Effect that depends on roomId , so you might feel tempted to add the analytics call there:\n\n\n```javascript\nfunctionChatRoom({roomId}){useEffect(()=>{logVisit(roomId);constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};},[roomId]);// ...}\n```\n\n\nBut imagine you later add another dependency to this Effect that needs to re-establish the connection. If this Effect re-synchronizes, it will also call logVisit(roomId) for the same room, which you did not intend. Logging the visit is a separate process from connecting. Write them as two separate Effects:\n\n\n```javascript\nfunctionChatRoom({roomId}){useEffect(()=>{logVisit(roomId);},[roomId]);useEffect(()=>{constconnection=createConnection(serverUrl,roomId);// ...},[roomId]);// ...}\n```\n\n\nEach Effect in your code should represent a separate and independent synchronization process.\n\nIn the above example, deleting one Effect wouldn\u2019t break the other Effect\u2019s logic. This is a good indication that they synchronize different things, and so it made sense to split them up. On the other hand, if you split up a cohesive piece of logic into separate Effects, the code may look \u201ccleaner\u201d but will be more difficult to maintain. This is why you should think whether the processes are same or separate, not whether the code looks cleaner.", "source": "https://react.dev/learn/lifecycle-of-reactive-effects", "category": "Lifecycle of Reactive Effects"}
{"instruction": "Tell me about Effects \u201creact\u201d to reactive values.", "input": "", "output": "Your Effect reads two variables ( serverUrl and roomId ), but you only specified roomId as a dependency:\n\n\n```javascript\nconstserverUrl='https://localhost:1234';functionChatRoom({roomId}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};},[roomId]);// ...}\n```\n\n\nWhy doesn\u2019t serverUrl need to be a dependency?\n\nThis is because the serverUrl never changes due to a re-render. It\u2019s always the same no matter how many times the component re-renders and why. Since serverUrl never changes, it wouldn\u2019t make sense to specify it as a dependency. After all, dependencies only do something when they change over time!\n\nOn the other hand, roomId may be different on a re-render. Props, state, and other values declared inside the component are reactive because they\u2019re calculated during rendering and participate in the React data flow.\n\nIf serverUrl was a state variable, it would be reactive. Reactive values must be included in dependencies:\n\n\n```javascript\nfunctionChatRoom({roomId}){// Props change over timeconst[serverUrl,setServerUrl]=useState('https://localhost:1234');// State may change over timeuseEffect(()=>{constconnection=createConnection(serverUrl,roomId);// Your Effect reads props and stateconnection.connect();return()=>{connection.disconnect();};},[roomId,serverUrl]);// So you tell React that this Effect \"depends on\" on props and state// ...}\n```\n\n\nBy including serverUrl as a dependency, you ensure that the Effect re-synchronizes after it changes.\n\nTry changing the selected chat room or edit the server URL in this sandbox:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';functionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[roomId,serverUrl]);return(<><label>Server URL:{' '}<inputvalue={serverUrl}onChange={e=>setServerUrl(e.target.value)}/></label><h1>Welcome to the{roomId}room!</h1></>);}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><hr/><ChatRoomroomId={roomId}/></>);}\n```\n\n\nWhenever you change a reactive value like roomId or serverUrl , the Effect re-connects to the chat server.\n\n\n### What an Effect with empty dependencies means\n\n\nWhat happens if you move both serverUrl and roomId outside the component?\n\n\n```javascript\nconstserverUrl='https://localhost:1234';constroomId='general';functionChatRoom(){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};},[]);// \u2705 All dependencies declared// ...}\n```\n\n\nNow your Effect\u2019s code does not use any reactive values, so its dependencies can be empty ( [] ).\n\nThinking from the component\u2019s perspective, the empty [] dependency array means this Effect connects to the chat room only when the component mounts, and disconnects only when the component unmounts. (Keep in mind that React would still re-synchronize it an extra time in development to stress-test your logic.)\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';constserverUrl='https://localhost:1234';constroomId='general';functionChatRoom(){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[]);return<h1>Welcome to the{roomId}room!</h1>;}exportdefaultfunctionApp(){const[show,setShow]=useState(false);return(<><buttononClick={()=>setShow(!show)}>{show?'Close chat':'Open chat'}</button>{show&&<hr/>}{show&&<ChatRoom/>}</>);}\n```\n\n\nHowever, if you think from the Effect\u2019s perspective, you don\u2019t need to think about mounting and unmounting at all. What\u2019s important is you\u2019ve specified what your Effect does to start and stop synchronizing. Today, it has no reactive dependencies. But if you ever want the user to change roomId or serverUrl over time (and they would become reactive), your Effect\u2019s code won\u2019t change. You will only need to add them to the dependencies.\n\n\n### All variables declared in the component body are reactive\n\n\nProps and state aren\u2019t the only reactive values. Values that you calculate from them are also reactive. If the props or state change, your component will re-render, and the values calculated from them will also change. This is why all variables from the component body used by the Effect should be in the Effect dependency list.\n\nLet\u2019s say that the user can pick a chat server in the dropdown, but they can also configure a default server in settings. Suppose you\u2019ve already put the settings state in a context so you read the settings from that context. Now you calculate the serverUrl based on the selected server from props and the default server:\n\n\n```javascript\nfunctionChatRoom({roomId,selectedServerUrl}){// roomId is reactiveconstsettings=useContext(SettingsContext);// settings is reactiveconstserverUrl=selectedServerUrl??settings.defaultServerUrl;// serverUrl is reactiveuseEffect(()=>{constconnection=createConnection(serverUrl,roomId);// Your Effect reads roomId and serverUrlconnection.connect();return()=>{connection.disconnect();};},[roomId,serverUrl]);// So it needs to re-synchronize when either of them changes!// ...}\n```\n\n\nIn this example, serverUrl is not a prop or a state variable. It\u2019s a regular variable that you calculate during rendering. But it\u2019s calculated during rendering, so it can change due to a re-render. This is why it\u2019s reactive.\n\nAll values inside the component (including props, state, and variables in your component\u2019s body) are reactive. Any reactive value can change on a re-render, so you need to include reactive values as Effect\u2019s dependencies.\n\nIn other words, Effects \u201creact\u201d to all values from the component body.\n\nMutable values (including global variables) aren\u2019t reactive.\n\nA mutable value like location.pathname can\u2019t be a dependency. It\u2019s mutable, so it can change at any time completely outside of the React rendering data flow. Changing it wouldn\u2019t trigger a re-render of your component. Therefore, even if you specified it in the dependencies, React wouldn\u2019t know to re-synchronize the Effect when it changes. This also breaks the rules of React because reading mutable data during rendering (which is when you calculate the dependencies) breaks purity of rendering. Instead, you should read and subscribe to an external mutable value with useSyncExternalStore .\n\nA mutable value like ref.current or things you read from it also can\u2019t be a dependency. The ref object returned by useRef itself can be a dependency, but its current property is intentionally mutable. It lets you keep track of something without triggering a re-render. But since changing it doesn\u2019t trigger a re-render, it\u2019s not a reactive value, and React won\u2019t know to re-run your Effect when it changes.\n\nAs you\u2019ll learn below on this page, a linter will check for these issues automatically.\n\n\n### React verifies that you specified every reactive value as a dependency\n\n\nIf your linter is configured for React, it will check that every reactive value used by your Effect\u2019s code is declared as its dependency. For example, this is a lint error because both roomId and serverUrl are reactive:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';functionChatRoom({roomId}){// roomId is reactiveconst[serverUrl,setServerUrl]=useState('https://localhost:1234');// serverUrl is reactiveuseEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[]);// <-- Something's wrong here!return(<><label>Server URL:{' '}<inputvalue={serverUrl}onChange={e=>setServerUrl(e.target.value)}/></label><h1>Welcome to the{roomId}room!</h1></>);}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><hr/><ChatRoomroomId={roomId}/></>);}\n```\n\n\nThis may look like a React error, but really React is pointing out a bug in your code. Both roomId and serverUrl may change over time, but you\u2019re forgetting to re-synchronize your Effect when they change. You will remain connected to the initial roomId and serverUrl even after the user picks different values in the UI.\n\nTo fix the bug, follow the linter\u2019s suggestion to specify roomId and serverUrl as dependencies of your Effect:\n\n\n```javascript\nfunctionChatRoom({roomId}){// roomId is reactiveconst[serverUrl,setServerUrl]=useState('https://localhost:1234');// serverUrl is reactiveuseEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};},[serverUrl,roomId]);// \u2705 All dependencies declared// ...}\n```\n\n\nTry this fix in the sandbox above. Verify that the linter error is gone, and the chat re-connects when needed.\n\n\n### Note\n\n\nIn some cases, React knows that a value never changes even though it\u2019s declared inside the component. For example, the set function returned from useState and the ref object returned by useRef are stable \u2014they are guaranteed to not change on a re-render. Stable values aren\u2019t reactive, so you may omit them from the list. Including them is allowed: they won\u2019t change, so it doesn\u2019t matter.\n\n\n### What to do when you don\u2019t want to re-synchronize\n\n\nIn the previous example, you\u2019ve fixed the lint error by listing roomId and serverUrl as dependencies.\n\nHowever, you could instead \u201cprove\u201d to the linter that these values aren\u2019t reactive values, i.e. that they can\u2019t change as a result of a re-render. For example, if serverUrl and roomId don\u2019t depend on rendering and always have the same values, you can move them outside the component. Now they don\u2019t need to be dependencies:\n\n\n```javascript\nconstserverUrl='https://localhost:1234';// serverUrl is not reactiveconstroomId='general';// roomId is not reactivefunctionChatRoom(){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};},[]);// \u2705 All dependencies declared// ...}\n```\n\n\nYou can also move them inside the Effect. They aren\u2019t calculated during rendering, so they\u2019re not reactive:\n\n\n```javascript\nfunctionChatRoom(){useEffect(()=>{constserverUrl='https://localhost:1234';// serverUrl is not reactiveconstroomId='general';// roomId is not reactiveconstconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};},[]);// \u2705 All dependencies declared// ...}\n```\n\n\nEffects are reactive blocks of code. They re-synchronize when the values you read inside of them change. Unlike event handlers, which only run once per interaction, Effects run whenever synchronization is necessary.\n\nYou can\u2019t \u201cchoose\u201d your dependencies. Your dependencies must include every reactive value you read in the Effect. The linter enforces this. Sometimes this may lead to problems like infinite loops and to your Effect re-synchronizing too often. Don\u2019t fix these problems by suppressing the linter! Here\u2019s what to try instead:\n\n* Check that your Effect represents an independent synchronization process. If your Effect doesn\u2019t synchronize anything, it might be unnecessary. If it synchronizes several independent things, split it up.\n* If you want to read the latest value of props or state without \u201creacting\u201d to it and re-synchronizing the Effect, you can split your Effect into a reactive part (which you\u2019ll keep in the Effect) and a non-reactive part (which you\u2019ll extract into something called an Effect Event ). Read about separating Events from Effects.\n* Avoid relying on objects and functions as dependencies. If you create objects and functions during rendering and then read them from an Effect, they will be different on every render. This will cause your Effect to re-synchronize every time. Read more about removing unnecessary dependencies from Effects.\n\nCheck that your Effect represents an independent synchronization process. If your Effect doesn\u2019t synchronize anything, it might be unnecessary. If it synchronizes several independent things, split it up.\n\nIf you want to read the latest value of props or state without \u201creacting\u201d to it and re-synchronizing the Effect, you can split your Effect into a reactive part (which you\u2019ll keep in the Effect) and a non-reactive part (which you\u2019ll extract into something called an Effect Event ). Read about separating Events from Effects.\n\nAvoid relying on objects and functions as dependencies. If you create objects and functions during rendering and then read them from an Effect, they will be different on every render. This will cause your Effect to re-synchronize every time. Read more about removing unnecessary dependencies from Effects.\n\n\n### Pitfall\n\n\nThe linter is your friend, but its powers are limited. The linter only knows when the dependencies are wrong . It doesn\u2019t know the best way to solve each case. If the linter suggests a dependency, but adding it causes a loop, it doesn\u2019t mean the linter should be ignored. You need to change the code inside (or outside) the Effect so that that value isn\u2019t reactive and doesn\u2019t need to be a dependency.\n\nIf you have an existing codebase, you might have some Effects that suppress the linter like this:\n\n\n```javascript\nuseEffect(()=>{// ...// \ud83d\udd34 Avoid suppressing the linter like this:// eslint-ignore-next-line react-hooks/exhaustive-deps},[]);\n```\n\n\nOn the next pages , you\u2019ll learn how to fix this code without breaking the rules. It\u2019s always worth fixing!", "source": "https://react.dev/learn/lifecycle-of-reactive-effects", "category": "Lifecycle of Reactive Effects"}
{"instruction": "Show me a code example of Effects \u201creact\u201d to reactive values in React.", "input": "", "output": "Your Effect reads two variables ( serverUrl and roomId ), but you only specified roomId as a dependency:\n\n\n```javascript\nconstserverUrl='https://localhost:1234';functionChatRoom({roomId}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};},[roomId]);// ...}\n```\n\n\nWhy doesn\u2019t serverUrl need to be a dependency?\n\nThis is because the serverUrl never changes due to a re-render. It\u2019s always the same no matter how many times the component re-renders and why. Since serverUrl never changes, it wouldn\u2019t make sense to specify it as a dependency. After all, dependencies only do something when they change over time!\n\nOn the other hand, roomId may be different on a re-render. Props, state, and other values declared inside the component are reactive because they\u2019re calculated during rendering and participate in the React data flow.\n\nIf serverUrl was a state variable, it would be reactive. Reactive values must be included in dependencies:\n\n\n```javascript\nfunctionChatRoom({roomId}){// Props change over timeconst[serverUrl,setServerUrl]=useState('https://localhost:1234');// State may change over timeuseEffect(()=>{constconnection=createConnection(serverUrl,roomId);// Your Effect reads props and stateconnection.connect();return()=>{connection.disconnect();};},[roomId,serverUrl]);// So you tell React that this Effect \"depends on\" on props and state// ...}\n```\n\n\nBy including serverUrl as a dependency, you ensure that the Effect re-synchronizes after it changes.\n\nTry changing the selected chat room or edit the server URL in this sandbox:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';functionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[roomId,serverUrl]);return(<><label>Server URL:{' '}<inputvalue={serverUrl}onChange={e=>setServerUrl(e.target.value)}/></label><h1>Welcome to the{roomId}room!</h1></>);}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><hr/><ChatRoomroomId={roomId}/></>);}\n```\n\n\nWhenever you change a reactive value like roomId or serverUrl , the Effect re-connects to the chat server.\n\n\n### What an Effect with empty dependencies means\n\n\nWhat happens if you move both serverUrl and roomId outside the component?\n\n\n```javascript\nconstserverUrl='https://localhost:1234';constroomId='general';functionChatRoom(){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};},[]);// \u2705 All dependencies declared// ...}\n```\n\n\nNow your Effect\u2019s code does not use any reactive values, so its dependencies can be empty ( [] ).\n\nThinking from the component\u2019s perspective, the empty [] dependency array means this Effect connects to the chat room only when the component mounts, and disconnects only when the component unmounts. (Keep in mind that React would still re-synchronize it an extra time in development to stress-test your logic.)\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';constserverUrl='https://localhost:1234';constroomId='general';functionChatRoom(){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[]);return<h1>Welcome to the{roomId}room!</h1>;}exportdefaultfunctionApp(){const[show,setShow]=useState(false);return(<><buttononClick={()=>setShow(!show)}>{show?'Close chat':'Open chat'}</button>{show&&<hr/>}{show&&<ChatRoom/>}</>);}\n```\n\n\nHowever, if you think from the Effect\u2019s perspective, you don\u2019t need to think about mounting and unmounting at all. What\u2019s important is you\u2019ve specified what your Effect does to start and stop synchronizing. Today, it has no reactive dependencies. But if you ever want the user to change roomId or serverUrl over time (and they would become reactive), your Effect\u2019s code won\u2019t change. You will only need to add them to the dependencies.\n\n\n### All variables declared in the component body are reactive\n\n\nProps and state aren\u2019t the only reactive values. Values that you calculate from them are also reactive. If the props or state change, your component will re-render, and the values calculated from them will also change. This is why all variables from the component body used by the Effect should be in the Effect dependency list.\n\nLet\u2019s say that the user can pick a chat server in the dropdown, but they can also configure a default server in settings. Suppose you\u2019ve already put the settings state in a context so you read the settings from that context. Now you calculate the serverUrl based on the selected server from props and the default server:\n\n\n```javascript\nfunctionChatRoom({roomId,selectedServerUrl}){// roomId is reactiveconstsettings=useContext(SettingsContext);// settings is reactiveconstserverUrl=selectedServerUrl??settings.defaultServerUrl;// serverUrl is reactiveuseEffect(()=>{constconnection=createConnection(serverUrl,roomId);// Your Effect reads roomId and serverUrlconnection.connect();return()=>{connection.disconnect();};},[roomId,serverUrl]);// So it needs to re-synchronize when either of them changes!// ...}\n```\n\n\nIn this example, serverUrl is not a prop or a state variable. It\u2019s a regular variable that you calculate during rendering. But it\u2019s calculated during rendering, so it can change due to a re-render. This is why it\u2019s reactive.\n\nAll values inside the component (including props, state, and variables in your component\u2019s body) are reactive. Any reactive value can change on a re-render, so you need to include reactive values as Effect\u2019s dependencies.\n\nIn other words, Effects \u201creact\u201d to all values from the component body.\n\nMutable values (including global variables) aren\u2019t reactive.\n\nA mutable value like location.pathname can\u2019t be a dependency. It\u2019s mutable, so it can change at any time completely outside of the React rendering data flow. Changing it wouldn\u2019t trigger a re-render of your component. Therefore, even if you specified it in the dependencies, React wouldn\u2019t know to re-synchronize the Effect when it changes. This also breaks the rules of React because reading mutable data during rendering (which is when you calculate the dependencies) breaks purity of rendering. Instead, you should read and subscribe to an external mutable value with useSyncExternalStore .\n\nA mutable value like ref.current or things you read from it also can\u2019t be a dependency. The ref object returned by useRef itself can be a dependency, but its current property is intentionally mutable. It lets you keep track of something without triggering a re-render. But since changing it doesn\u2019t trigger a re-render, it\u2019s not a reactive value, and React won\u2019t know to re-run your Effect when it changes.\n\nAs you\u2019ll learn below on this page, a linter will check for these issues automatically.\n\n\n### React verifies that you specified every reactive value as a dependency\n\n\nIf your linter is configured for React, it will check that every reactive value used by your Effect\u2019s code is declared as its dependency. For example, this is a lint error because both roomId and serverUrl are reactive:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';functionChatRoom({roomId}){// roomId is reactiveconst[serverUrl,setServerUrl]=useState('https://localhost:1234');// serverUrl is reactiveuseEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[]);// <-- Something's wrong here!return(<><label>Server URL:{' '}<inputvalue={serverUrl}onChange={e=>setServerUrl(e.target.value)}/></label><h1>Welcome to the{roomId}room!</h1></>);}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><hr/><ChatRoomroomId={roomId}/></>);}\n```\n\n\nThis may look like a React error, but really React is pointing out a bug in your code. Both roomId and serverUrl may change over time, but you\u2019re forgetting to re-synchronize your Effect when they change. You will remain connected to the initial roomId and serverUrl even after the user picks different values in the UI.\n\nTo fix the bug, follow the linter\u2019s suggestion to specify roomId and serverUrl as dependencies of your Effect:\n\n\n```javascript\nfunctionChatRoom({roomId}){// roomId is reactiveconst[serverUrl,setServerUrl]=useState('https://localhost:1234');// serverUrl is reactiveuseEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};},[serverUrl,roomId]);// \u2705 All dependencies declared// ...}\n```\n\n\nTry this fix in the sandbox above. Verify that the linter error is gone, and the chat re-connects when needed.\n\n\n### Note\n\n\nIn some cases, React knows that a value never changes even though it\u2019s declared inside the component. For example, the set function returned from useState and the ref object returned by useRef are stable \u2014they are guaranteed to not change on a re-render. Stable values aren\u2019t reactive, so you may omit them from the list. Including them is allowed: they won\u2019t change, so it doesn\u2019t matter.\n\n\n### What to do when you don\u2019t want to re-synchronize\n\n\nIn the previous example, you\u2019ve fixed the lint error by listing roomId and serverUrl as dependencies.\n\nHowever, you could instead \u201cprove\u201d to the linter that these values aren\u2019t reactive values, i.e. that they can\u2019t change as a result of a re-render. For example, if serverUrl and roomId don\u2019t depend on rendering and always have the same values, you can move them outside the component. Now they don\u2019t need to be dependencies:\n\n\n```javascript\nconstserverUrl='https://localhost:1234';// serverUrl is not reactiveconstroomId='general';// roomId is not reactivefunctionChatRoom(){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};},[]);// \u2705 All dependencies declared// ...}\n```\n\n\nYou can also move them inside the Effect. They aren\u2019t calculated during rendering, so they\u2019re not reactive:\n\n\n```javascript\nfunctionChatRoom(){useEffect(()=>{constserverUrl='https://localhost:1234';// serverUrl is not reactiveconstroomId='general';// roomId is not reactiveconstconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};},[]);// \u2705 All dependencies declared// ...}\n```\n\n\nEffects are reactive blocks of code. They re-synchronize when the values you read inside of them change. Unlike event handlers, which only run once per interaction, Effects run whenever synchronization is necessary.\n\nYou can\u2019t \u201cchoose\u201d your dependencies. Your dependencies must include every reactive value you read in the Effect. The linter enforces this. Sometimes this may lead to problems like infinite loops and to your Effect re-synchronizing too often. Don\u2019t fix these problems by suppressing the linter! Here\u2019s what to try instead:\n\n* Check that your Effect represents an independent synchronization process. If your Effect doesn\u2019t synchronize anything, it might be unnecessary. If it synchronizes several independent things, split it up.\n* If you want to read the latest value of props or state without \u201creacting\u201d to it and re-synchronizing the Effect, you can split your Effect into a reactive part (which you\u2019ll keep in the Effect) and a non-reactive part (which you\u2019ll extract into something called an Effect Event ). Read about separating Events from Effects.\n* Avoid relying on objects and functions as dependencies. If you create objects and functions during rendering and then read them from an Effect, they will be different on every render. This will cause your Effect to re-synchronize every time. Read more about removing unnecessary dependencies from Effects.\n\nCheck that your Effect represents an independent synchronization process. If your Effect doesn\u2019t synchronize anything, it might be unnecessary. If it synchronizes several independent things, split it up.\n\nIf you want to read the latest value of props or state without \u201creacting\u201d to it and re-synchronizing the Effect, you can split your Effect into a reactive part (which you\u2019ll keep in the Effect) and a non-reactive part (which you\u2019ll extract into something called an Effect Event ). Read about separating Events from Effects.\n\nAvoid relying on objects and functions as dependencies. If you create objects and functions during rendering and then read them from an Effect, they will be different on every render. This will cause your Effect to re-synchronize every time. Read more about removing unnecessary dependencies from Effects.\n\n\n### Pitfall\n\n\nThe linter is your friend, but its powers are limited. The linter only knows when the dependencies are wrong . It doesn\u2019t know the best way to solve each case. If the linter suggests a dependency, but adding it causes a loop, it doesn\u2019t mean the linter should be ignored. You need to change the code inside (or outside) the Effect so that that value isn\u2019t reactive and doesn\u2019t need to be a dependency.\n\nIf you have an existing codebase, you might have some Effects that suppress the linter like this:\n\n\n```javascript\nuseEffect(()=>{// ...// \ud83d\udd34 Avoid suppressing the linter like this:// eslint-ignore-next-line react-hooks/exhaustive-deps},[]);\n```\n\n\nOn the next pages , you\u2019ll learn how to fix this code without breaking the rules. It\u2019s always worth fixing!", "source": "https://react.dev/learn/lifecycle-of-reactive-effects", "category": "Lifecycle of Reactive Effects"}
{"instruction": "How do I handle Reacting to input with state in React?", "input": "", "output": "With React, you won\u2019t modify the UI from code directly. For example, you won\u2019t write commands like \u201cdisable the button\u201d, \u201cenable the button\u201d, \u201cshow the success message\u201d, etc. Instead, you will describe the UI you want to see for the different visual states of your component (\u201cinitial state\u201d, \u201ctyping state\u201d, \u201csuccess state\u201d), and then trigger the state changes in response to user input. This is similar to how designers think about UI.\n\nHere is a quiz form built using React. Note how it uses the status state variable to determine whether to enable or disable the submit button, and whether to show the success message instead.\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[answer,setAnswer]=useState('');const[error,setError]=useState(null);const[status,setStatus]=useState('typing');if(status==='success'){return<h1>That's right!</h1>}asyncfunctionhandleSubmit(e){e.preventDefault();setStatus('submitting');try{awaitsubmitForm(answer);setStatus('success');}catch(err){setStatus('typing');setError(err);}}functionhandleTextareaChange(e){setAnswer(e.target.value);}return(<><h2>City quiz</h2><p>In which city is there a billboard that turns air into drinkable water?</p><formonSubmit={handleSubmit}><textareavalue={answer}onChange={handleTextareaChange}disabled={status==='submitting'}/><br/><buttondisabled={answer.length===0||status==='submitting'}>Submit</button>{error!==null&&<pclassName=\"Error\">{error.message}</p>}</form></>);}functionsubmitForm(answer){// Pretend it's hitting the network.returnnewPromise((resolve,reject)=>{setTimeout(()=>{letshouldError=answer.toLowerCase()!=='lima'if(shouldError){reject(newError('Good guess but a wrong answer. Try again!'));}else{resolve();}},1500);});}\n```\n", "source": "https://react.dev/learn/managing-state", "category": "Managing State"}
{"instruction": "Show me a code example of Reacting to input with state in React.", "input": "", "output": "With React, you won\u2019t modify the UI from code directly. For example, you won\u2019t write commands like \u201cdisable the button\u201d, \u201cenable the button\u201d, \u201cshow the success message\u201d, etc. Instead, you will describe the UI you want to see for the different visual states of your component (\u201cinitial state\u201d, \u201ctyping state\u201d, \u201csuccess state\u201d), and then trigger the state changes in response to user input. This is similar to how designers think about UI.\n\nHere is a quiz form built using React. Note how it uses the status state variable to determine whether to enable or disable the submit button, and whether to show the success message instead.\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[answer,setAnswer]=useState('');const[error,setError]=useState(null);const[status,setStatus]=useState('typing');if(status==='success'){return<h1>That's right!</h1>}asyncfunctionhandleSubmit(e){e.preventDefault();setStatus('submitting');try{awaitsubmitForm(answer);setStatus('success');}catch(err){setStatus('typing');setError(err);}}functionhandleTextareaChange(e){setAnswer(e.target.value);}return(<><h2>City quiz</h2><p>In which city is there a billboard that turns air into drinkable water?</p><formonSubmit={handleSubmit}><textareavalue={answer}onChange={handleTextareaChange}disabled={status==='submitting'}/><br/><buttondisabled={answer.length===0||status==='submitting'}>Submit</button>{error!==null&&<pclassName=\"Error\">{error.message}</p>}</form></>);}functionsubmitForm(answer){// Pretend it's hitting the network.returnnewPromise((resolve,reject)=>{setTimeout(()=>{letshouldError=answer.toLowerCase()!=='lima'if(shouldError){reject(newError('Good guess but a wrong answer. Try again!'));}else{resolve();}},1500);});}\n```\n", "source": "https://react.dev/learn/managing-state", "category": "Managing State"}
{"instruction": "What is the process for Choosing the state structure in a React component?", "input": "", "output": "Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. The most important principle is that state shouldn\u2019t contain redundant or duplicated information. If there\u2019s unnecessary state, it\u2019s easy to forget to update it, and introduce bugs!\n\nFor example, this form has a redundant fullName state variable:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[firstName,setFirstName]=useState('');const[lastName,setLastName]=useState('');const[fullName,setFullName]=useState('');functionhandleFirstNameChange(e){setFirstName(e.target.value);setFullName(e.target.value+' '+lastName);}functionhandleLastNameChange(e){setLastName(e.target.value);setFullName(firstName+' '+e.target.value);}return(<><h2>Let\u2019s check you in</h2><label>First name:{' '}<inputvalue={firstName}onChange={handleFirstNameChange}/></label><label>Last name:{' '}<inputvalue={lastName}onChange={handleLastNameChange}/></label><p>Your ticket will be issued to:<b>{fullName}</b></p></>);}\n```\n\n\nYou can remove it and simplify the code by calculating fullName while the component is rendering:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[firstName,setFirstName]=useState('');const[lastName,setLastName]=useState('');constfullName=firstName+' '+lastName;functionhandleFirstNameChange(e){setFirstName(e.target.value);}functionhandleLastNameChange(e){setLastName(e.target.value);}return(<><h2>Let\u2019s check you in</h2><label>First name:{' '}<inputvalue={firstName}onChange={handleFirstNameChange}/></label><label>Last name:{' '}<inputvalue={lastName}onChange={handleLastNameChange}/></label><p>Your ticket will be issued to:<b>{fullName}</b></p></>);}\n```\n\n\nThis might seem like a small change, but many bugs in React apps are fixed this way.", "source": "https://react.dev/learn/managing-state", "category": "Managing State"}
{"instruction": "Show me a code example of Choosing the state structure in React.", "input": "", "output": "Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. The most important principle is that state shouldn\u2019t contain redundant or duplicated information. If there\u2019s unnecessary state, it\u2019s easy to forget to update it, and introduce bugs!\n\nFor example, this form has a redundant fullName state variable:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[firstName,setFirstName]=useState('');const[lastName,setLastName]=useState('');const[fullName,setFullName]=useState('');functionhandleFirstNameChange(e){setFirstName(e.target.value);setFullName(e.target.value+' '+lastName);}functionhandleLastNameChange(e){setLastName(e.target.value);setFullName(firstName+' '+e.target.value);}return(<><h2>Let\u2019s check you in</h2><label>First name:{' '}<inputvalue={firstName}onChange={handleFirstNameChange}/></label><label>Last name:{' '}<inputvalue={lastName}onChange={handleLastNameChange}/></label><p>Your ticket will be issued to:<b>{fullName}</b></p></>);}\n```\n\n\nYou can remove it and simplify the code by calculating fullName while the component is rendering:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[firstName,setFirstName]=useState('');const[lastName,setLastName]=useState('');constfullName=firstName+' '+lastName;functionhandleFirstNameChange(e){setFirstName(e.target.value);}functionhandleLastNameChange(e){setLastName(e.target.value);}return(<><h2>Let\u2019s check you in</h2><label>First name:{' '}<inputvalue={firstName}onChange={handleFirstNameChange}/></label><label>Last name:{' '}<inputvalue={lastName}onChange={handleLastNameChange}/></label><p>Your ticket will be issued to:<b>{fullName}</b></p></>);}\n```\n\n\nThis might seem like a small change, but many bugs in React apps are fixed this way.", "source": "https://react.dev/learn/managing-state", "category": "Managing State"}
{"instruction": "What is the process for Sharing state between components in a React component?", "input": "", "output": "Sometimes, you want the state of two components to always change together. To do it, remove state from both of them, move it to their closest common parent, and then pass it down to them via props. This is known as \u201clifting state up\u201d, and it\u2019s one of the most common things you will do writing React code.\n\nIn this example, only one panel should be active at a time. To achieve this, instead of keeping the active state inside each individual panel, the parent component holds the state and specifies the props for its children.\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionAccordion(){const[activeIndex,setActiveIndex]=useState(0);return(<><h2>Almaty, Kazakhstan</h2><Paneltitle=\"About\"isActive={activeIndex===0}onShow={()=>setActiveIndex(0)}>With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.</Panel><Paneltitle=\"Etymology\"isActive={activeIndex===1}onShow={()=>setActiveIndex(1)}>The name comes from<spanlang=\"kk-KZ\">\u0430\u043b\u043c\u0430</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild<ilang=\"la\">Malus sieversii</i>is considered a likely candidate for the ancestor of the modern domestic apple.</Panel></>);}functionPanel({title,children,isActive,onShow}){return(<sectionclassName=\"panel\"><h3>{title}</h3>{isActive?(<p>{children}</p>):(<buttononClick={onShow}>Show</button>)}</section>);}\n```\n", "source": "https://react.dev/learn/managing-state", "category": "Managing State"}
{"instruction": "Show me a code example of Sharing state between components in React.", "input": "", "output": "Sometimes, you want the state of two components to always change together. To do it, remove state from both of them, move it to their closest common parent, and then pass it down to them via props. This is known as \u201clifting state up\u201d, and it\u2019s one of the most common things you will do writing React code.\n\nIn this example, only one panel should be active at a time. To achieve this, instead of keeping the active state inside each individual panel, the parent component holds the state and specifies the props for its children.\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionAccordion(){const[activeIndex,setActiveIndex]=useState(0);return(<><h2>Almaty, Kazakhstan</h2><Paneltitle=\"About\"isActive={activeIndex===0}onShow={()=>setActiveIndex(0)}>With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.</Panel><Paneltitle=\"Etymology\"isActive={activeIndex===1}onShow={()=>setActiveIndex(1)}>The name comes from<spanlang=\"kk-KZ\">\u0430\u043b\u043c\u0430</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild<ilang=\"la\">Malus sieversii</i>is considered a likely candidate for the ancestor of the modern domestic apple.</Panel></>);}functionPanel({title,children,isActive,onShow}){return(<sectionclassName=\"panel\"><h3>{title}</h3>{isActive?(<p>{children}</p>):(<buttononClick={onShow}>Show</button>)}</section>);}\n```\n", "source": "https://react.dev/learn/managing-state", "category": "Managing State"}
{"instruction": "What is Preserving and resetting state in React and how does it work?", "input": "", "output": "When you re-render a component, React needs to decide which parts of the tree to keep (and update), and which parts to discard or re-create from scratch. In most cases, React\u2019s automatic behavior works well enough. By default, React preserves the parts of the tree that \u201cmatch up\u201d with the previously rendered component tree.\n\nHowever, sometimes this is not what you want. In this chat app, typing a message and then switching the recipient does not reset the input. This can make the user accidentally send a message to the wrong person:\n\n\n```javascript\nimport{useState}from'react';importChatfrom'./Chat.js';importContactListfrom'./ContactList.js';exportdefaultfunctionMessenger(){const[to,setTo]=useState(contacts[0]);return(<div><ContactListcontacts={contacts}selectedContact={to}onSelect={contact=>setTo(contact)}/><Chatcontact={to}/></div>)}constcontacts=[{name:'Taylor',email:'taylor@mail.com'},{name:'Alice',email:'alice@mail.com'},{name:'Bob',email:'bob@mail.com'}];\n```\n\n\nReact lets you override the default behavior, and force a component to reset its state by passing it a different key , like <Chat key={email} /> . This tells React that if the recipient is different, it should be considered a different Chat component that needs to be re-created from scratch with the new data (and UI like inputs). Now switching between the recipients resets the input field\u2014even though you render the same component.\n\n\n```javascript\nimport{useState}from'react';importChatfrom'./Chat.js';importContactListfrom'./ContactList.js';exportdefaultfunctionMessenger(){const[to,setTo]=useState(contacts[0]);return(<div><ContactListcontacts={contacts}selectedContact={to}onSelect={contact=>setTo(contact)}/><Chatkey={to.email}contact={to}/></div>)}constcontacts=[{name:'Taylor',email:'taylor@mail.com'},{name:'Alice',email:'alice@mail.com'},{name:'Bob',email:'bob@mail.com'}];\n```\n", "source": "https://react.dev/learn/managing-state", "category": "Managing State"}
{"instruction": "Show me a code example of Preserving and resetting state in React.", "input": "", "output": "When you re-render a component, React needs to decide which parts of the tree to keep (and update), and which parts to discard or re-create from scratch. In most cases, React\u2019s automatic behavior works well enough. By default, React preserves the parts of the tree that \u201cmatch up\u201d with the previously rendered component tree.\n\nHowever, sometimes this is not what you want. In this chat app, typing a message and then switching the recipient does not reset the input. This can make the user accidentally send a message to the wrong person:\n\n\n```javascript\nimport{useState}from'react';importChatfrom'./Chat.js';importContactListfrom'./ContactList.js';exportdefaultfunctionMessenger(){const[to,setTo]=useState(contacts[0]);return(<div><ContactListcontacts={contacts}selectedContact={to}onSelect={contact=>setTo(contact)}/><Chatcontact={to}/></div>)}constcontacts=[{name:'Taylor',email:'taylor@mail.com'},{name:'Alice',email:'alice@mail.com'},{name:'Bob',email:'bob@mail.com'}];\n```\n\n\nReact lets you override the default behavior, and force a component to reset its state by passing it a different key , like <Chat key={email} /> . This tells React that if the recipient is different, it should be considered a different Chat component that needs to be re-created from scratch with the new data (and UI like inputs). Now switching between the recipients resets the input field\u2014even though you render the same component.\n\n\n```javascript\nimport{useState}from'react';importChatfrom'./Chat.js';importContactListfrom'./ContactList.js';exportdefaultfunctionMessenger(){const[to,setTo]=useState(contacts[0]);return(<div><ContactListcontacts={contacts}selectedContact={to}onSelect={contact=>setTo(contact)}/><Chatkey={to.email}contact={to}/></div>)}constcontacts=[{name:'Taylor',email:'taylor@mail.com'},{name:'Alice',email:'alice@mail.com'},{name:'Bob',email:'bob@mail.com'}];\n```\n", "source": "https://react.dev/learn/managing-state", "category": "Managing State"}
{"instruction": "Explain the concept of Extracting state logic into a reducer in React.", "input": "", "output": "Components with many state updates spread across many event handlers can get overwhelming. For these cases, you can consolidate all the state update logic outside your component in a single function, called \u201creducer\u201d. Your event handlers become concise because they only specify the user \u201cactions\u201d. At the bottom of the file, the reducer function specifies how the state should update in response to each action!\n\n\n```javascript\nimport{useReducer}from'react';importAddTaskfrom'./AddTask.js';importTaskListfrom'./TaskList.js';exportdefaultfunctionTaskApp(){const[tasks,dispatch]=useReducer(tasksReducer,initialTasks);functionhandleAddTask(text){dispatch({type:'added',id:nextId++,text:text,});}functionhandleChangeTask(task){dispatch({type:'changed',task:task});}functionhandleDeleteTask(taskId){dispatch({type:'deleted',id:taskId});}return(<><h1>Prague itinerary</h1><AddTaskonAddTask={handleAddTask}/><TaskListtasks={tasks}onChangeTask={handleChangeTask}onDeleteTask={handleDeleteTask}/></>);}functiontasksReducer(tasks,action){switch(action.type){case'added':{return[...tasks,{id:action.id,text:action.text,done:false}];}case'changed':{returntasks.map(t=>{if(t.id===action.task.id){returnaction.task;}else{returnt;}});}case'deleted':{returntasks.filter(t=>t.id!==action.id);}default:{throwError('Unknown action: '+action.type);}}}letnextId=3;constinitialTasks=[{id:0,text:'Visit Kafka Museum',done:true},{id:1,text:'Watch a puppet show',done:false},{id:2,text:'Lennon Wall pic',done:false}];\n```\n", "source": "https://react.dev/learn/managing-state", "category": "Managing State"}
{"instruction": "Show me a code example of Extracting state logic into a reducer in React.", "input": "", "output": "Components with many state updates spread across many event handlers can get overwhelming. For these cases, you can consolidate all the state update logic outside your component in a single function, called \u201creducer\u201d. Your event handlers become concise because they only specify the user \u201cactions\u201d. At the bottom of the file, the reducer function specifies how the state should update in response to each action!\n\n\n```javascript\nimport{useReducer}from'react';importAddTaskfrom'./AddTask.js';importTaskListfrom'./TaskList.js';exportdefaultfunctionTaskApp(){const[tasks,dispatch]=useReducer(tasksReducer,initialTasks);functionhandleAddTask(text){dispatch({type:'added',id:nextId++,text:text,});}functionhandleChangeTask(task){dispatch({type:'changed',task:task});}functionhandleDeleteTask(taskId){dispatch({type:'deleted',id:taskId});}return(<><h1>Prague itinerary</h1><AddTaskonAddTask={handleAddTask}/><TaskListtasks={tasks}onChangeTask={handleChangeTask}onDeleteTask={handleDeleteTask}/></>);}functiontasksReducer(tasks,action){switch(action.type){case'added':{return[...tasks,{id:action.id,text:action.text,done:false}];}case'changed':{returntasks.map(t=>{if(t.id===action.task.id){returnaction.task;}else{returnt;}});}case'deleted':{returntasks.filter(t=>t.id!==action.id);}default:{throwError('Unknown action: '+action.type);}}}letnextId=3;constinitialTasks=[{id:0,text:'Visit Kafka Museum',done:true},{id:1,text:'Watch a puppet show',done:false},{id:2,text:'Lennon Wall pic',done:false}];\n```\n", "source": "https://react.dev/learn/managing-state", "category": "Managing State"}
{"instruction": "Explain the concept of Passing data deeply with context in React.", "input": "", "output": "Usually, you will pass information from a parent component to a child component via props. But passing props can become inconvenient if you need to pass some prop through many components, or if many components need the same information. Context lets the parent component make some information available to any component in the tree below it\u2014no matter how deep it is\u2014without passing it explicitly through props.\n\nHere, the Heading component determines its heading level by \u201casking\u201d the closest Section for its level. Each Section tracks its own level by asking the parent Section and adding one to it. Every Section provides information to all components below it without passing props\u2014it does that through context.\n\n\n```javascript\nimportHeadingfrom'./Heading.js';importSectionfrom'./Section.js';exportdefaultfunctionPage(){return(<Section><Heading>Title</Heading><Section><Heading>Heading</Heading><Heading>Heading</Heading><Heading>Heading</Heading><Section><Heading>Sub-heading</Heading><Heading>Sub-heading</Heading><Heading>Sub-heading</Heading><Section><Heading>Sub-sub-heading</Heading><Heading>Sub-sub-heading</Heading><Heading>Sub-sub-heading</Heading></Section></Section></Section></Section>);}\n```\n", "source": "https://react.dev/learn/managing-state", "category": "Managing State"}
{"instruction": "Show me a code example of Passing data deeply with context in React.", "input": "", "output": "Usually, you will pass information from a parent component to a child component via props. But passing props can become inconvenient if you need to pass some prop through many components, or if many components need the same information. Context lets the parent component make some information available to any component in the tree below it\u2014no matter how deep it is\u2014without passing it explicitly through props.\n\nHere, the Heading component determines its heading level by \u201casking\u201d the closest Section for its level. Each Section tracks its own level by asking the parent Section and adding one to it. Every Section provides information to all components below it without passing props\u2014it does that through context.\n\n\n```javascript\nimportHeadingfrom'./Heading.js';importSectionfrom'./Section.js';exportdefaultfunctionPage(){return(<Section><Heading>Title</Heading><Section><Heading>Heading</Heading><Heading>Heading</Heading><Heading>Heading</Heading><Section><Heading>Sub-heading</Heading><Heading>Sub-heading</Heading><Heading>Sub-heading</Heading><Section><Heading>Sub-sub-heading</Heading><Heading>Sub-sub-heading</Heading><Heading>Sub-sub-heading</Heading></Section></Section></Section></Section>);}\n```\n", "source": "https://react.dev/learn/managing-state", "category": "Managing State"}
{"instruction": "What is the process for Scaling up with reducer and context in a React component?", "input": "", "output": "Reducers let you consolidate a component\u2019s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.\n\nWith this approach, a parent component with complex state manages it with a reducer. Other components anywhere deep in the tree can read its state via context. They can also dispatch actions to update that state.\n\n\n```javascript\nimportAddTaskfrom'./AddTask.js';importTaskListfrom'./TaskList.js';import{TasksProvider}from'./TasksContext.js';exportdefaultfunctionTaskApp(){return(<TasksProvider><h1>Day off in Kyoto</h1><AddTask/><TaskList/></TasksProvider>);}\n```\n", "source": "https://react.dev/learn/managing-state", "category": "Managing State"}
{"instruction": "Show me a code example of Scaling up with reducer and context in React.", "input": "", "output": "Reducers let you consolidate a component\u2019s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.\n\nWith this approach, a parent component with complex state manages it with a reducer. Other components anywhere deep in the tree can read its state via context. They can also dispatch actions to update that state.\n\n\n```javascript\nimportAddTaskfrom'./AddTask.js';importTaskListfrom'./TaskList.js';import{TasksProvider}from'./TasksContext.js';exportdefaultfunctionTaskApp(){return(<TasksProvider><h1>Day off in Kyoto</h1><AddTask/><TaskList/></TasksProvider>);}\n```\n", "source": "https://react.dev/learn/managing-state", "category": "Managing State"}
{"instruction": "What is What\u2019s next? in React and how does it work?", "input": "", "output": "Head over to Reacting to Input with State to start reading this chapter page by page!\n\nOr, if you\u2019re already familiar with these topics, why not read about Escape Hatches ?", "source": "https://react.dev/learn/managing-state", "category": "Managing State"}
{"instruction": "What is Getting a ref to the node in React and how does it work?", "input": "", "output": "To access a DOM node managed by React, first, import the useRef Hook:\n\n\n```javascript\nimport{useRef}from'react';\n```\n\n\nThen, use it to declare a ref inside your component:\n\n\n```javascript\nconstmyRef=useRef(null);\n```\n\n\nFinally, pass your ref as the ref attribute to the JSX tag for which you want to get the DOM node:\n\n\n```javascript\n<divref={myRef}>\n```\n\n\nThe useRef Hook returns an object with a single property called current . Initially, myRef.current will be null . When React creates a DOM node for this <div> , React will put a reference to this node into myRef.current . You can then access this DOM node from your event handlers and use the built-in browser APIs defined on it.\n\n\n```javascript\n// You can use any browser APIs, for example:myRef.current.scrollIntoView();\n```\n\n\n\n### Example: Focusing a text input\n\n\nIn this example, clicking the button will focus the input:\n\n\n```javascript\nimport{useRef}from'react';exportdefaultfunctionForm(){constinputRef=useRef(null);functionhandleClick(){inputRef.current.focus();}return(<><inputref={inputRef}/><buttononClick={handleClick}>Focus the input</button></>);}\n```\n\n\nTo implement this:\n\n1. Declare inputRef with the useRef Hook.\n2. Pass it as <input ref={inputRef}> . This tells React to put this <input> \u2019s DOM node into inputRef.current .\n3. In the handleClick function, read the input DOM node from inputRef.current and call focus() on it with inputRef.current.focus() .\n4. Pass the handleClick event handler to <button> with onClick .\n\nWhile DOM manipulation is the most common use case for refs, the useRef Hook can be used for storing other things outside React, like timer IDs. Similarly to state, refs remain between renders. Refs are like state variables that don\u2019t trigger re-renders when you set them. Read about refs in Referencing Values with Refs.\n\n\n### Example: Scrolling to an element\n\n\nYou can have more than a single ref in a component. In this example, there is a carousel of three images. Each button centers an image by calling the browser scrollIntoView() method on the corresponding DOM node:\n\n\n```javascript\nimport{useRef}from'react';exportdefaultfunctionCatFriends(){constfirstCatRef=useRef(null);constsecondCatRef=useRef(null);constthirdCatRef=useRef(null);functionhandleScrollToFirstCat(){firstCatRef.current.scrollIntoView({behavior:'smooth',block:'nearest',inline:'center'});}functionhandleScrollToSecondCat(){secondCatRef.current.scrollIntoView({behavior:'smooth',block:'nearest',inline:'center'});}functionhandleScrollToThirdCat(){thirdCatRef.current.scrollIntoView({behavior:'smooth',block:'nearest',inline:'center'});}return(<><nav><buttononClick={handleScrollToFirstCat}>Neo</button><buttononClick={handleScrollToSecondCat}>Millie</button><buttononClick={handleScrollToThirdCat}>Bella</button></nav><div><ul><li><imgsrc=\"https://placecats.com/neo/300/200\"alt=\"Neo\"ref={firstCatRef}/></li><li><imgsrc=\"https://placecats.com/millie/200/200\"alt=\"Millie\"ref={secondCatRef}/></li><li><imgsrc=\"https://placecats.com/bella/199/200\"alt=\"Bella\"ref={thirdCatRef}/></li></ul></div></>);}\n```\n\n\nIn the above examples, there is a predefined number of refs. However, sometimes you might need a ref to each item in the list, and you don\u2019t know how many you will have. Something like this wouldn\u2019t work :\n\n\n```javascript\n<ul>{items.map((item)=>{// Doesn't work!constref=useRef(null);return<liref={ref}/>;})}</ul>\n```\n\n\nThis is because Hooks must only be called at the top-level of your component. You can\u2019t call useRef in a loop, in a condition, or inside a map() call.\n\nOne possible way around this is to get a single ref to their parent element, and then use DOM manipulation methods like querySelectorAll to \u201cfind\u201d the individual child nodes from it. However, this is brittle and can break if your DOM structure changes.\n\nAnother solution is to pass a function to the ref attribute. This is called a ref callback. React will call your ref callback with the DOM node when it\u2019s time to set the ref, and with null when it\u2019s time to clear it. This lets you maintain your own array or a Map , and access any ref by its index or some kind of ID.\n\nThis example shows how you can use this approach to scroll to an arbitrary node in a long list:\n\n\n```javascript\nimport{useRef,useState}from\"react\";exportdefaultfunctionCatFriends(){constitemsRef=useRef(null);const[catList,setCatList]=useState(setupCatList);functionscrollToCat(cat){constmap=getMap();constnode=map.get(cat);node.scrollIntoView({behavior:\"smooth\",block:\"nearest\",inline:\"center\",});}functiongetMap(){if(!itemsRef.current){// Initialize the Map on first usage.itemsRef.current=newMap();}returnitemsRef.current;}return(<><nav><buttononClick={()=>scrollToCat(catList[0])}>Neo</button><buttononClick={()=>scrollToCat(catList[5])}>Millie</button><buttononClick={()=>scrollToCat(catList[9])}>Bella</button></nav><div><ul>{catList.map((cat)=>(<likey={cat}ref={(node)=>{constmap=getMap();map.set(cat,node);return()=>{map.delete(cat);};}}><imgsrc={cat}/></li>))}</ul></div></>);}functionsetupCatList(){constcatList=[];for(leti=0;i<10;i++){catList.push(\"https://loremflickr.com/320/240/cat?lock=\"+i);}returncatList;}\n```\n\n\nIn this example, itemsRef doesn\u2019t hold a single DOM node. Instead, it holds a Map from item ID to a DOM node. ( Refs can hold any values! ) The ref callback on every list item takes care to update the Map:\n\n\n```javascript\n<likey={cat.id}ref={node=>{constmap=getMap();// Add to the Mapmap.set(cat,node);return()=>{// Remove from the Mapmap.delete(cat);};}}>\n```\n\n\nThis lets you read individual DOM nodes from the Map later.\n\n\n### Note\n\n\nWhen Strict Mode is enabled, ref callbacks will run twice in development.\n\nRead more about how this helps find bugs in callback refs.", "source": "https://react.dev/learn/manipulating-the-dom-with-refs", "category": "Manipulating the DOM with Refs"}
{"instruction": "Show me a code example of Getting a ref to the node in React.", "input": "", "output": "To access a DOM node managed by React, first, import the useRef Hook:\n\n\n```javascript\nimport{useRef}from'react';\n```\n\n\nThen, use it to declare a ref inside your component:\n\n\n```javascript\nconstmyRef=useRef(null);\n```\n\n\nFinally, pass your ref as the ref attribute to the JSX tag for which you want to get the DOM node:\n\n\n```javascript\n<divref={myRef}>\n```\n\n\nThe useRef Hook returns an object with a single property called current . Initially, myRef.current will be null . When React creates a DOM node for this <div> , React will put a reference to this node into myRef.current . You can then access this DOM node from your event handlers and use the built-in browser APIs defined on it.\n\n\n```javascript\n// You can use any browser APIs, for example:myRef.current.scrollIntoView();\n```\n\n\n\n### Example: Focusing a text input\n\n\nIn this example, clicking the button will focus the input:\n\n\n```javascript\nimport{useRef}from'react';exportdefaultfunctionForm(){constinputRef=useRef(null);functionhandleClick(){inputRef.current.focus();}return(<><inputref={inputRef}/><buttononClick={handleClick}>Focus the input</button></>);}\n```\n\n\nTo implement this:\n\n1. Declare inputRef with the useRef Hook.\n2. Pass it as <input ref={inputRef}> . This tells React to put this <input> \u2019s DOM node into inputRef.current .\n3. In the handleClick function, read the input DOM node from inputRef.current and call focus() on it with inputRef.current.focus() .\n4. Pass the handleClick event handler to <button> with onClick .\n\nWhile DOM manipulation is the most common use case for refs, the useRef Hook can be used for storing other things outside React, like timer IDs. Similarly to state, refs remain between renders. Refs are like state variables that don\u2019t trigger re-renders when you set them. Read about refs in Referencing Values with Refs.\n\n\n### Example: Scrolling to an element\n\n\nYou can have more than a single ref in a component. In this example, there is a carousel of three images. Each button centers an image by calling the browser scrollIntoView() method on the corresponding DOM node:\n\n\n```javascript\nimport{useRef}from'react';exportdefaultfunctionCatFriends(){constfirstCatRef=useRef(null);constsecondCatRef=useRef(null);constthirdCatRef=useRef(null);functionhandleScrollToFirstCat(){firstCatRef.current.scrollIntoView({behavior:'smooth',block:'nearest',inline:'center'});}functionhandleScrollToSecondCat(){secondCatRef.current.scrollIntoView({behavior:'smooth',block:'nearest',inline:'center'});}functionhandleScrollToThirdCat(){thirdCatRef.current.scrollIntoView({behavior:'smooth',block:'nearest',inline:'center'});}return(<><nav><buttononClick={handleScrollToFirstCat}>Neo</button><buttononClick={handleScrollToSecondCat}>Millie</button><buttononClick={handleScrollToThirdCat}>Bella</button></nav><div><ul><li><imgsrc=\"https://placecats.com/neo/300/200\"alt=\"Neo\"ref={firstCatRef}/></li><li><imgsrc=\"https://placecats.com/millie/200/200\"alt=\"Millie\"ref={secondCatRef}/></li><li><imgsrc=\"https://placecats.com/bella/199/200\"alt=\"Bella\"ref={thirdCatRef}/></li></ul></div></>);}\n```\n\n\nIn the above examples, there is a predefined number of refs. However, sometimes you might need a ref to each item in the list, and you don\u2019t know how many you will have. Something like this wouldn\u2019t work :\n\n\n```javascript\n<ul>{items.map((item)=>{// Doesn't work!constref=useRef(null);return<liref={ref}/>;})}</ul>\n```\n\n\nThis is because Hooks must only be called at the top-level of your component. You can\u2019t call useRef in a loop, in a condition, or inside a map() call.\n\nOne possible way around this is to get a single ref to their parent element, and then use DOM manipulation methods like querySelectorAll to \u201cfind\u201d the individual child nodes from it. However, this is brittle and can break if your DOM structure changes.\n\nAnother solution is to pass a function to the ref attribute. This is called a ref callback. React will call your ref callback with the DOM node when it\u2019s time to set the ref, and with null when it\u2019s time to clear it. This lets you maintain your own array or a Map , and access any ref by its index or some kind of ID.\n\nThis example shows how you can use this approach to scroll to an arbitrary node in a long list:\n\n\n```javascript\nimport{useRef,useState}from\"react\";exportdefaultfunctionCatFriends(){constitemsRef=useRef(null);const[catList,setCatList]=useState(setupCatList);functionscrollToCat(cat){constmap=getMap();constnode=map.get(cat);node.scrollIntoView({behavior:\"smooth\",block:\"nearest\",inline:\"center\",});}functiongetMap(){if(!itemsRef.current){// Initialize the Map on first usage.itemsRef.current=newMap();}returnitemsRef.current;}return(<><nav><buttononClick={()=>scrollToCat(catList[0])}>Neo</button><buttononClick={()=>scrollToCat(catList[5])}>Millie</button><buttononClick={()=>scrollToCat(catList[9])}>Bella</button></nav><div><ul>{catList.map((cat)=>(<likey={cat}ref={(node)=>{constmap=getMap();map.set(cat,node);return()=>{map.delete(cat);};}}><imgsrc={cat}/></li>))}</ul></div></>);}functionsetupCatList(){constcatList=[];for(leti=0;i<10;i++){catList.push(\"https://loremflickr.com/320/240/cat?lock=\"+i);}returncatList;}\n```\n\n\nIn this example, itemsRef doesn\u2019t hold a single DOM node. Instead, it holds a Map from item ID to a DOM node. ( Refs can hold any values! ) The ref callback on every list item takes care to update the Map:\n\n\n```javascript\n<likey={cat.id}ref={node=>{constmap=getMap();// Add to the Mapmap.set(cat,node);return()=>{// Remove from the Mapmap.delete(cat);};}}>\n```\n\n\nThis lets you read individual DOM nodes from the Map later.\n\n\n### Note\n\n\nWhen Strict Mode is enabled, ref callbacks will run twice in development.\n\nRead more about how this helps find bugs in callback refs.", "source": "https://react.dev/learn/manipulating-the-dom-with-refs", "category": "Manipulating the DOM with Refs"}
{"instruction": "Can you describe Accessing another component\u2019s DOM nodes in the context of React?", "input": "", "output": "\n### Pitfall\n\n\nRefs are an escape hatch. Manually manipulating another component\u2019s DOM nodes can make your code fragile.\n\nYou can pass refs from parent component to child components just like any other prop .\n\n\n```javascript\nimport{useRef}from'react';functionMyInput({ref}){return<inputref={ref}/>;}functionMyForm(){constinputRef=useRef(null);return<MyInputref={inputRef}/>}\n```\n\n\nIn the above example, a ref is created in the parent component, MyForm , and is passed to the child component, MyInput . MyInput then passes the ref to <input> . Because <input> is a built-in component React sets the .current property of the ref to the <input> DOM element.\n\nThe inputRef created in MyForm now points to the <input> DOM element returned by MyInput . A click handler created in MyForm can access inputRef and call focus() to set the focus on <input> .\n\n\n```javascript\nimport{useRef}from'react';functionMyInput({ref}){return<inputref={ref}/>;}exportdefaultfunctionMyForm(){constinputRef=useRef(null);functionhandleClick(){inputRef.current.focus();}return(<><MyInputref={inputRef}/><buttononClick={handleClick}>Focus the input</button></>);}\n```\n\n\nIn the above example, the ref passed to MyInput is passed on to the original DOM input element. This lets the parent component call focus() on it. However, this also lets the parent component do something else\u2014for example, change its CSS styles. In uncommon cases, you may want to restrict the exposed functionality. You can do that with useImperativeHandle :\n\n\n```javascript\nimport{useRef,useImperativeHandle}from\"react\";functionMyInput({ref}){constrealInputRef=useRef(null);useImperativeHandle(ref,()=>({// Only expose focus and nothing elsefocus(){realInputRef.current.focus();},}));return<inputref={realInputRef}/>;};exportdefaultfunctionForm(){constinputRef=useRef(null);functionhandleClick(){inputRef.current.focus();}return(<><MyInputref={inputRef}/><buttononClick={handleClick}>Focus the input</button></>);}\n```\n\n\nHere, realInputRef inside MyInput holds the actual input DOM node. However, useImperativeHandle instructs React to provide your own special object as the value of a ref to the parent component. So inputRef.current inside the Form component will only have the focus method. In this case, the ref \u201chandle\u201d is not the DOM node, but the custom object you create inside useImperativeHandle call.", "source": "https://react.dev/learn/manipulating-the-dom-with-refs", "category": "Manipulating the DOM with Refs"}
{"instruction": "Show me a code example of Accessing another component\u2019s DOM nodes in React.", "input": "", "output": "\n### Pitfall\n\n\nRefs are an escape hatch. Manually manipulating another component\u2019s DOM nodes can make your code fragile.\n\nYou can pass refs from parent component to child components just like any other prop .\n\n\n```javascript\nimport{useRef}from'react';functionMyInput({ref}){return<inputref={ref}/>;}functionMyForm(){constinputRef=useRef(null);return<MyInputref={inputRef}/>}\n```\n\n\nIn the above example, a ref is created in the parent component, MyForm , and is passed to the child component, MyInput . MyInput then passes the ref to <input> . Because <input> is a built-in component React sets the .current property of the ref to the <input> DOM element.\n\nThe inputRef created in MyForm now points to the <input> DOM element returned by MyInput . A click handler created in MyForm can access inputRef and call focus() to set the focus on <input> .\n\n\n```javascript\nimport{useRef}from'react';functionMyInput({ref}){return<inputref={ref}/>;}exportdefaultfunctionMyForm(){constinputRef=useRef(null);functionhandleClick(){inputRef.current.focus();}return(<><MyInputref={inputRef}/><buttononClick={handleClick}>Focus the input</button></>);}\n```\n\n\nIn the above example, the ref passed to MyInput is passed on to the original DOM input element. This lets the parent component call focus() on it. However, this also lets the parent component do something else\u2014for example, change its CSS styles. In uncommon cases, you may want to restrict the exposed functionality. You can do that with useImperativeHandle :\n\n\n```javascript\nimport{useRef,useImperativeHandle}from\"react\";functionMyInput({ref}){constrealInputRef=useRef(null);useImperativeHandle(ref,()=>({// Only expose focus and nothing elsefocus(){realInputRef.current.focus();},}));return<inputref={realInputRef}/>;};exportdefaultfunctionForm(){constinputRef=useRef(null);functionhandleClick(){inputRef.current.focus();}return(<><MyInputref={inputRef}/><buttononClick={handleClick}>Focus the input</button></>);}\n```\n\n\nHere, realInputRef inside MyInput holds the actual input DOM node. However, useImperativeHandle instructs React to provide your own special object as the value of a ref to the parent component. So inputRef.current inside the Form component will only have the focus method. In this case, the ref \u201chandle\u201d is not the DOM node, but the custom object you create inside useImperativeHandle call.", "source": "https://react.dev/learn/manipulating-the-dom-with-refs", "category": "Manipulating the DOM with Refs"}
{"instruction": "Tell me about When React attaches the refs.", "input": "", "output": "In React, every update is split in two phases :\n\n* During render, React calls your components to figure out what should be on the screen.\n* During commit, React applies changes to the DOM.\n\nIn general, you don\u2019t want to access refs during rendering. That goes for refs holding DOM nodes as well. During the first render, the DOM nodes have not yet been created, so ref.current will be null . And during the rendering of updates, the DOM nodes haven\u2019t been updated yet. So it\u2019s too early to read them.\n\nReact sets ref.current during the commit. Before updating the DOM, React sets the affected ref.current values to null . After updating the DOM, React immediately sets them to the corresponding DOM nodes.\n\nUsually, you will access refs from event handlers. If you want to do something with a ref, but there is no particular event to do it in, you might need an Effect. We will discuss Effects on the next pages.\n\nConsider code like this, which adds a new todo and scrolls the screen down to the last child of the list. Notice how, for some reason, it always scrolls to the todo that was just before the last added one:\n\n\n```javascript\nimport{useState,useRef}from'react';exportdefaultfunctionTodoList(){constlistRef=useRef(null);const[text,setText]=useState('');const[todos,setTodos]=useState(initialTodos);functionhandleAdd(){constnewTodo={id:nextId++,text:text};setText('');setTodos([...todos,newTodo]);listRef.current.lastChild.scrollIntoView({behavior:'smooth',block:'nearest'});}return(<><buttononClick={handleAdd}>Add</button><inputvalue={text}onChange={e=>setText(e.target.value)}/><ulref={listRef}>{todos.map(todo=>(<likey={todo.id}>{todo.text}</li>))}</ul></>);}letnextId=0;letinitialTodos=[];for(leti=0;i<20;i++){initialTodos.push({id:nextId++,text:'Todo #'+(i+1)});}\n```\n\n\nThe issue is with these two lines:\n\n\n```javascript\nsetTodos([...todos,newTodo]);listRef.current.lastChild.scrollIntoView();\n```\n\n\nIn React, state updates are queued. Usually, this is what you want. However, here it causes a problem because setTodos does not immediately update the DOM. So the time you scroll the list to its last element, the todo has not yet been added. This is why scrolling always \u201clags behind\u201d by one item.\n\nTo fix this issue, you can force React to update (\u201cflush\u201d) the DOM synchronously. To do this, import flushSync from react-dom and wrap the state update into a flushSync call:\n\n\n```javascript\nflushSync(()=>{setTodos([...todos,newTodo]);});listRef.current.lastChild.scrollIntoView();\n```\n\n\nThis will instruct React to update the DOM synchronously right after the code wrapped in flushSync executes. As a result, the last todo will already be in the DOM by the time you try to scroll to it:\n\n\n```javascript\nimport{useState,useRef}from'react';import{flushSync}from'react-dom';exportdefaultfunctionTodoList(){constlistRef=useRef(null);const[text,setText]=useState('');const[todos,setTodos]=useState(initialTodos);functionhandleAdd(){constnewTodo={id:nextId++,text:text};flushSync(()=>{setText('');setTodos([...todos,newTodo]);});listRef.current.lastChild.scrollIntoView({behavior:'smooth',block:'nearest'});}return(<><buttononClick={handleAdd}>Add</button><inputvalue={text}onChange={e=>setText(e.target.value)}/><ulref={listRef}>{todos.map(todo=>(<likey={todo.id}>{todo.text}</li>))}</ul></>);}letnextId=0;letinitialTodos=[];for(leti=0;i<20;i++){initialTodos.push({id:nextId++,text:'Todo #'+(i+1)});}\n```\n", "source": "https://react.dev/learn/manipulating-the-dom-with-refs", "category": "Manipulating the DOM with Refs"}
{"instruction": "Show me a code example of When React attaches the refs in React.", "input": "", "output": "In React, every update is split in two phases :\n\n* During render, React calls your components to figure out what should be on the screen.\n* During commit, React applies changes to the DOM.\n\nIn general, you don\u2019t want to access refs during rendering. That goes for refs holding DOM nodes as well. During the first render, the DOM nodes have not yet been created, so ref.current will be null . And during the rendering of updates, the DOM nodes haven\u2019t been updated yet. So it\u2019s too early to read them.\n\nReact sets ref.current during the commit. Before updating the DOM, React sets the affected ref.current values to null . After updating the DOM, React immediately sets them to the corresponding DOM nodes.\n\nUsually, you will access refs from event handlers. If you want to do something with a ref, but there is no particular event to do it in, you might need an Effect. We will discuss Effects on the next pages.\n\nConsider code like this, which adds a new todo and scrolls the screen down to the last child of the list. Notice how, for some reason, it always scrolls to the todo that was just before the last added one:\n\n\n```javascript\nimport{useState,useRef}from'react';exportdefaultfunctionTodoList(){constlistRef=useRef(null);const[text,setText]=useState('');const[todos,setTodos]=useState(initialTodos);functionhandleAdd(){constnewTodo={id:nextId++,text:text};setText('');setTodos([...todos,newTodo]);listRef.current.lastChild.scrollIntoView({behavior:'smooth',block:'nearest'});}return(<><buttononClick={handleAdd}>Add</button><inputvalue={text}onChange={e=>setText(e.target.value)}/><ulref={listRef}>{todos.map(todo=>(<likey={todo.id}>{todo.text}</li>))}</ul></>);}letnextId=0;letinitialTodos=[];for(leti=0;i<20;i++){initialTodos.push({id:nextId++,text:'Todo #'+(i+1)});}\n```\n\n\nThe issue is with these two lines:\n\n\n```javascript\nsetTodos([...todos,newTodo]);listRef.current.lastChild.scrollIntoView();\n```\n\n\nIn React, state updates are queued. Usually, this is what you want. However, here it causes a problem because setTodos does not immediately update the DOM. So the time you scroll the list to its last element, the todo has not yet been added. This is why scrolling always \u201clags behind\u201d by one item.\n\nTo fix this issue, you can force React to update (\u201cflush\u201d) the DOM synchronously. To do this, import flushSync from react-dom and wrap the state update into a flushSync call:\n\n\n```javascript\nflushSync(()=>{setTodos([...todos,newTodo]);});listRef.current.lastChild.scrollIntoView();\n```\n\n\nThis will instruct React to update the DOM synchronously right after the code wrapped in flushSync executes. As a result, the last todo will already be in the DOM by the time you try to scroll to it:\n\n\n```javascript\nimport{useState,useRef}from'react';import{flushSync}from'react-dom';exportdefaultfunctionTodoList(){constlistRef=useRef(null);const[text,setText]=useState('');const[todos,setTodos]=useState(initialTodos);functionhandleAdd(){constnewTodo={id:nextId++,text:text};flushSync(()=>{setText('');setTodos([...todos,newTodo]);});listRef.current.lastChild.scrollIntoView({behavior:'smooth',block:'nearest'});}return(<><buttononClick={handleAdd}>Add</button><inputvalue={text}onChange={e=>setText(e.target.value)}/><ulref={listRef}>{todos.map(todo=>(<likey={todo.id}>{todo.text}</li>))}</ul></>);}letnextId=0;letinitialTodos=[];for(leti=0;i<20;i++){initialTodos.push({id:nextId++,text:'Todo #'+(i+1)});}\n```\n", "source": "https://react.dev/learn/manipulating-the-dom-with-refs", "category": "Manipulating the DOM with Refs"}
{"instruction": "What is Best practices for DOM manipulation with refs in React and how does it work?", "input": "", "output": "Refs are an escape hatch. You should only use them when you have to \u201cstep outside React\u201d. Common examples of this include managing focus, scroll position, or calling browser APIs that React does not expose.\n\nIf you stick to non-destructive actions like focusing and scrolling, you shouldn\u2019t encounter any problems. However, if you try to modify the DOM manually, you can risk conflicting with the changes React is making.\n\nTo illustrate this problem, this example includes a welcome message and two buttons. The first button toggles its presence using conditional rendering and state , as you would usually do in React. The second button uses the remove() DOM API to forcefully remove it from the DOM outside of React\u2019s control.\n\nTry pressing \u201cToggle with setState\u201d a few times. The message should disappear and appear again. Then press \u201cRemove from the DOM\u201d. This will forcefully remove it. Finally, press \u201cToggle with setState\u201d:\n\n\n```javascript\nimport{useState,useRef}from'react';exportdefaultfunctionCounter(){const[show,setShow]=useState(true);constref=useRef(null);return(<div><buttononClick={()=>{setShow(!show);}}>Toggle with setState</button><buttononClick={()=>{ref.current.remove();}}>Remove from the DOM</button>{show&&<pref={ref}>Hello world</p>}</div>);}\n```\n\n\nAfter you\u2019ve manually removed the DOM element, trying to use setState to show it again will lead to a crash. This is because you\u2019ve changed the DOM, and React doesn\u2019t know how to continue managing it correctly.\n\nAvoid changing DOM nodes managed by React. Modifying, adding children to, or removing children from elements that are managed by React can lead to inconsistent visual results or crashes like above.\n\nHowever, this doesn\u2019t mean that you can\u2019t do it at all. It requires caution. You can safely modify parts of the DOM that React has no reason to update. For example, if some <div> is always empty in the JSX, React won\u2019t have a reason to touch its children list. Therefore, it is safe to manually add or remove elements there.", "source": "https://react.dev/learn/manipulating-the-dom-with-refs", "category": "Manipulating the DOM with Refs"}
{"instruction": "Show me a code example of Best practices for DOM manipulation with refs in React.", "input": "", "output": "Refs are an escape hatch. You should only use them when you have to \u201cstep outside React\u201d. Common examples of this include managing focus, scroll position, or calling browser APIs that React does not expose.\n\nIf you stick to non-destructive actions like focusing and scrolling, you shouldn\u2019t encounter any problems. However, if you try to modify the DOM manually, you can risk conflicting with the changes React is making.\n\nTo illustrate this problem, this example includes a welcome message and two buttons. The first button toggles its presence using conditional rendering and state , as you would usually do in React. The second button uses the remove() DOM API to forcefully remove it from the DOM outside of React\u2019s control.\n\nTry pressing \u201cToggle with setState\u201d a few times. The message should disappear and appear again. Then press \u201cRemove from the DOM\u201d. This will forcefully remove it. Finally, press \u201cToggle with setState\u201d:\n\n\n```javascript\nimport{useState,useRef}from'react';exportdefaultfunctionCounter(){const[show,setShow]=useState(true);constref=useRef(null);return(<div><buttononClick={()=>{setShow(!show);}}>Toggle with setState</button><buttononClick={()=>{ref.current.remove();}}>Remove from the DOM</button>{show&&<pref={ref}>Hello world</p>}</div>);}\n```\n\n\nAfter you\u2019ve manually removed the DOM element, trying to use setState to show it again will lead to a crash. This is because you\u2019ve changed the DOM, and React doesn\u2019t know how to continue managing it correctly.\n\nAvoid changing DOM nodes managed by React. Modifying, adding children to, or removing children from elements that are managed by React can lead to inconsistent visual results or crashes like above.\n\nHowever, this doesn\u2019t mean that you can\u2019t do it at all. It requires caution. You can safely modify parts of the DOM that React has no reason to update. For example, if some <div> is always empty in the JSX, React won\u2019t have a reason to touch its children list. Therefore, it is safe to manually add or remove elements there.", "source": "https://react.dev/learn/manipulating-the-dom-with-refs", "category": "Manipulating the DOM with Refs"}
{"instruction": "What is the process for The problem with passing props in a React component?", "input": "", "output": "Passing props is a great way to explicitly pipe data through your UI tree to the components that use it.\n\nBut passing props can become verbose and inconvenient when you need to pass some prop deeply through the tree, or if many components need the same prop. The nearest common ancestor could be far removed from the components that need data, and lifting state up that high can lead to a situation called \u201cprop drilling\u201d.\n\nLifting state up\n\nProp drilling\n\nWouldn\u2019t it be great if there were a way to \u201cteleport\u201d data to the components in the tree that need it without passing props? With React\u2019s context feature, there is!", "source": "https://react.dev/learn/passing-data-deeply-with-context", "category": "Passing Data Deeply with Context"}
{"instruction": "Can you describe Context: an alternative to passing props in the context of React?", "input": "", "output": "Context lets a parent component provide data to the entire tree below it. There are many uses for context. Here is one example. Consider this Heading component that accepts a level for its size:\n\n\n```javascript\nimportHeadingfrom'./Heading.js';importSectionfrom'./Section.js';exportdefaultfunctionPage(){return(<Section><Headinglevel={1}>Title</Heading><Headinglevel={2}>Heading</Heading><Headinglevel={3}>Sub-heading</Heading><Headinglevel={4}>Sub-sub-heading</Heading><Headinglevel={5}>Sub-sub-sub-heading</Heading><Headinglevel={6}>Sub-sub-sub-sub-heading</Heading></Section>);}\n```\n\n\nLet\u2019s say you want multiple headings within the same Section to always have the same size:\n\n\n```javascript\nimportHeadingfrom'./Heading.js';importSectionfrom'./Section.js';exportdefaultfunctionPage(){return(<Section><Headinglevel={1}>Title</Heading><Section><Headinglevel={2}>Heading</Heading><Headinglevel={2}>Heading</Heading><Headinglevel={2}>Heading</Heading><Section><Headinglevel={3}>Sub-heading</Heading><Headinglevel={3}>Sub-heading</Heading><Headinglevel={3}>Sub-heading</Heading><Section><Headinglevel={4}>Sub-sub-heading</Heading><Headinglevel={4}>Sub-sub-heading</Heading><Headinglevel={4}>Sub-sub-heading</Heading></Section></Section></Section></Section>);}\n```\n\n\nCurrently, you pass the level prop to each <Heading> separately:\n\n\n```javascript\n<Section><Headinglevel={3}>About</Heading><Headinglevel={3}>Photos</Heading><Headinglevel={3}>Videos</Heading></Section>\n```\n\n\nIt would be nice if you could pass the level prop to the <Section> component instead and remove it from the <Heading> . This way you could enforce that all headings in the same section have the same size:\n\n\n```javascript\n<Sectionlevel={3}><Heading>About</Heading><Heading>Photos</Heading><Heading>Videos</Heading></Section>\n```\n\n\nBut how can the <Heading> component know the level of its closest <Section> ? That would require some way for a child to \u201cask\u201d for data from somewhere above in the tree.\n\nYou can\u2019t do it with props alone. This is where context comes into play. You will do it in three steps:\n\n1. Create a context. (You can call it LevelContext , since it\u2019s for the heading level.)\n2. Use that context from the component that needs the data. ( Heading will use LevelContext .)\n3. Provide that context from the component that specifies the data. ( Section will provide LevelContext .)\n\nContext lets a parent\u2014even a distant one!\u2014provide some data to the entire tree inside of it.\n\nUsing context in close children\n\nUsing context in distant children\n\n\n### Step 1: Create the context\n\n\nFirst, you need to create the context. You\u2019ll need to export it from a file so that your components can use it:\n\n\n```javascript\nimport{createContext}from'react';exportconstLevelContext=createContext(1);\n```\n\n\nThe only argument to createContext is the default value. Here, 1 refers to the biggest heading level, but you could pass any kind of value (even an object). You will see the significance of the default value in the next step.\n\n\n### Step 2: Use the context\n\n\nImport the useContext Hook from React and your context:\n\n\n```javascript\nimport{useContext}from'react';import{LevelContext}from'./LevelContext.js';\n```\n\n\nCurrently, the Heading component reads level from props:\n\n\n```javascript\nexportdefaultfunctionHeading({level,children}){// ...}\n```\n\n\nInstead, remove the level prop and read the value from the context you just imported, LevelContext :\n\n\n```javascript\nexportdefaultfunctionHeading({children}){constlevel=useContext(LevelContext);// ...}\n```\n\n\nuseContext is a Hook. Just like useState and useReducer , you can only call a Hook immediately inside a React component (not inside loops or conditions). useContext tells React that the Heading component wants to read the LevelContext .\n\nNow that the Heading component doesn\u2019t have a level prop, you don\u2019t need to pass the level prop to Heading in your JSX like this anymore:\n\n\n```javascript\n<Section><Headinglevel={4}>Sub-sub-heading</Heading><Headinglevel={4}>Sub-sub-heading</Heading><Headinglevel={4}>Sub-sub-heading</Heading></Section>\n```\n\n\nUpdate the JSX so that it\u2019s the Section that receives it instead:\n\n\n```javascript\n<Sectionlevel={4}><Heading>Sub-sub-heading</Heading><Heading>Sub-sub-heading</Heading><Heading>Sub-sub-heading</Heading></Section>\n```\n\n\nAs a reminder, this is the markup that you were trying to get working:\n\n\n```javascript\nimportHeadingfrom'./Heading.js';importSectionfrom'./Section.js';exportdefaultfunctionPage(){return(<Sectionlevel={1}><Heading>Title</Heading><Sectionlevel={2}><Heading>Heading</Heading><Heading>Heading</Heading><Heading>Heading</Heading><Sectionlevel={3}><Heading>Sub-heading</Heading><Heading>Sub-heading</Heading><Heading>Sub-heading</Heading><Sectionlevel={4}><Heading>Sub-sub-heading</Heading><Heading>Sub-sub-heading</Heading><Heading>Sub-sub-heading</Heading></Section></Section></Section></Section>);}\n```\n\n\nNotice this example doesn\u2019t quite work, yet! All the headings have the same size because even though you\u2019re using the context, you have not provided it yet. React doesn\u2019t know where to get it!\n\nIf you don\u2019t provide the context, React will use the default value you\u2019ve specified in the previous step. In this example, you specified 1 as the argument to createContext , so useContext(LevelContext) returns 1 , setting all those headings to <h1> . Let\u2019s fix this problem by having each Section provide its own context.\n\n\n### Step 3: Provide the context\n\n\nThe Section component currently renders its children:\n\n\n```javascript\nexportdefaultfunctionSection({children}){return(<sectionclassName=\"section\">{children}</section>);}\n```\n\n\nWrap them with a context provider to provide the LevelContext to them:\n\n\n```javascript\nimport{LevelContext}from'./LevelContext.js';exportdefaultfunctionSection({level,children}){return(<sectionclassName=\"section\"><LevelContextvalue={level}>{children}</LevelContext></section>);}\n```\n\n\nThis tells React: \u201cif any component inside this <Section> asks for LevelContext , give them this level .\u201d The component will use the value of the nearest <LevelContext> in the UI tree above it.\n\n\n```javascript\nimportHeadingfrom'./Heading.js';importSectionfrom'./Section.js';exportdefaultfunctionPage(){return(<Sectionlevel={1}><Heading>Title</Heading><Sectionlevel={2}><Heading>Heading</Heading><Heading>Heading</Heading><Heading>Heading</Heading><Sectionlevel={3}><Heading>Sub-heading</Heading><Heading>Sub-heading</Heading><Heading>Sub-heading</Heading><Sectionlevel={4}><Heading>Sub-sub-heading</Heading><Heading>Sub-sub-heading</Heading><Heading>Sub-sub-heading</Heading></Section></Section></Section></Section>);}\n```\n\n\nIt\u2019s the same result as the original code, but you did not need to pass the level prop to each Heading component! Instead, it \u201cfigures out\u201d its heading level by asking the closest Section above:\n\n1. You pass a level prop to the <Section> .\n2. Section wraps its children into <LevelContext value={level}> .\n3. Heading asks the closest value of LevelContext above with useContext(LevelContext) .", "source": "https://react.dev/learn/passing-data-deeply-with-context", "category": "Passing Data Deeply with Context"}
{"instruction": "Show me a code example of Context: an alternative to passing props in React.", "input": "", "output": "Context lets a parent component provide data to the entire tree below it. There are many uses for context. Here is one example. Consider this Heading component that accepts a level for its size:\n\n\n```javascript\nimportHeadingfrom'./Heading.js';importSectionfrom'./Section.js';exportdefaultfunctionPage(){return(<Section><Headinglevel={1}>Title</Heading><Headinglevel={2}>Heading</Heading><Headinglevel={3}>Sub-heading</Heading><Headinglevel={4}>Sub-sub-heading</Heading><Headinglevel={5}>Sub-sub-sub-heading</Heading><Headinglevel={6}>Sub-sub-sub-sub-heading</Heading></Section>);}\n```\n\n\nLet\u2019s say you want multiple headings within the same Section to always have the same size:\n\n\n```javascript\nimportHeadingfrom'./Heading.js';importSectionfrom'./Section.js';exportdefaultfunctionPage(){return(<Section><Headinglevel={1}>Title</Heading><Section><Headinglevel={2}>Heading</Heading><Headinglevel={2}>Heading</Heading><Headinglevel={2}>Heading</Heading><Section><Headinglevel={3}>Sub-heading</Heading><Headinglevel={3}>Sub-heading</Heading><Headinglevel={3}>Sub-heading</Heading><Section><Headinglevel={4}>Sub-sub-heading</Heading><Headinglevel={4}>Sub-sub-heading</Heading><Headinglevel={4}>Sub-sub-heading</Heading></Section></Section></Section></Section>);}\n```\n\n\nCurrently, you pass the level prop to each <Heading> separately:\n\n\n```javascript\n<Section><Headinglevel={3}>About</Heading><Headinglevel={3}>Photos</Heading><Headinglevel={3}>Videos</Heading></Section>\n```\n\n\nIt would be nice if you could pass the level prop to the <Section> component instead and remove it from the <Heading> . This way you could enforce that all headings in the same section have the same size:\n\n\n```javascript\n<Sectionlevel={3}><Heading>About</Heading><Heading>Photos</Heading><Heading>Videos</Heading></Section>\n```\n\n\nBut how can the <Heading> component know the level of its closest <Section> ? That would require some way for a child to \u201cask\u201d for data from somewhere above in the tree.\n\nYou can\u2019t do it with props alone. This is where context comes into play. You will do it in three steps:\n\n1. Create a context. (You can call it LevelContext , since it\u2019s for the heading level.)\n2. Use that context from the component that needs the data. ( Heading will use LevelContext .)\n3. Provide that context from the component that specifies the data. ( Section will provide LevelContext .)\n\nContext lets a parent\u2014even a distant one!\u2014provide some data to the entire tree inside of it.\n\nUsing context in close children\n\nUsing context in distant children\n\n\n### Step 1: Create the context\n\n\nFirst, you need to create the context. You\u2019ll need to export it from a file so that your components can use it:\n\n\n```javascript\nimport{createContext}from'react';exportconstLevelContext=createContext(1);\n```\n\n\nThe only argument to createContext is the default value. Here, 1 refers to the biggest heading level, but you could pass any kind of value (even an object). You will see the significance of the default value in the next step.\n\n\n### Step 2: Use the context\n\n\nImport the useContext Hook from React and your context:\n\n\n```javascript\nimport{useContext}from'react';import{LevelContext}from'./LevelContext.js';\n```\n\n\nCurrently, the Heading component reads level from props:\n\n\n```javascript\nexportdefaultfunctionHeading({level,children}){// ...}\n```\n\n\nInstead, remove the level prop and read the value from the context you just imported, LevelContext :\n\n\n```javascript\nexportdefaultfunctionHeading({children}){constlevel=useContext(LevelContext);// ...}\n```\n\n\nuseContext is a Hook. Just like useState and useReducer , you can only call a Hook immediately inside a React component (not inside loops or conditions). useContext tells React that the Heading component wants to read the LevelContext .\n\nNow that the Heading component doesn\u2019t have a level prop, you don\u2019t need to pass the level prop to Heading in your JSX like this anymore:\n\n\n```javascript\n<Section><Headinglevel={4}>Sub-sub-heading</Heading><Headinglevel={4}>Sub-sub-heading</Heading><Headinglevel={4}>Sub-sub-heading</Heading></Section>\n```\n\n\nUpdate the JSX so that it\u2019s the Section that receives it instead:\n\n\n```javascript\n<Sectionlevel={4}><Heading>Sub-sub-heading</Heading><Heading>Sub-sub-heading</Heading><Heading>Sub-sub-heading</Heading></Section>\n```\n\n\nAs a reminder, this is the markup that you were trying to get working:\n\n\n```javascript\nimportHeadingfrom'./Heading.js';importSectionfrom'./Section.js';exportdefaultfunctionPage(){return(<Sectionlevel={1}><Heading>Title</Heading><Sectionlevel={2}><Heading>Heading</Heading><Heading>Heading</Heading><Heading>Heading</Heading><Sectionlevel={3}><Heading>Sub-heading</Heading><Heading>Sub-heading</Heading><Heading>Sub-heading</Heading><Sectionlevel={4}><Heading>Sub-sub-heading</Heading><Heading>Sub-sub-heading</Heading><Heading>Sub-sub-heading</Heading></Section></Section></Section></Section>);}\n```\n\n\nNotice this example doesn\u2019t quite work, yet! All the headings have the same size because even though you\u2019re using the context, you have not provided it yet. React doesn\u2019t know where to get it!\n\nIf you don\u2019t provide the context, React will use the default value you\u2019ve specified in the previous step. In this example, you specified 1 as the argument to createContext , so useContext(LevelContext) returns 1 , setting all those headings to <h1> . Let\u2019s fix this problem by having each Section provide its own context.\n\n\n### Step 3: Provide the context\n\n\nThe Section component currently renders its children:\n\n\n```javascript\nexportdefaultfunctionSection({children}){return(<sectionclassName=\"section\">{children}</section>);}\n```\n\n\nWrap them with a context provider to provide the LevelContext to them:\n\n\n```javascript\nimport{LevelContext}from'./LevelContext.js';exportdefaultfunctionSection({level,children}){return(<sectionclassName=\"section\"><LevelContextvalue={level}>{children}</LevelContext></section>);}\n```\n\n\nThis tells React: \u201cif any component inside this <Section> asks for LevelContext , give them this level .\u201d The component will use the value of the nearest <LevelContext> in the UI tree above it.\n\n\n```javascript\nimportHeadingfrom'./Heading.js';importSectionfrom'./Section.js';exportdefaultfunctionPage(){return(<Sectionlevel={1}><Heading>Title</Heading><Sectionlevel={2}><Heading>Heading</Heading><Heading>Heading</Heading><Heading>Heading</Heading><Sectionlevel={3}><Heading>Sub-heading</Heading><Heading>Sub-heading</Heading><Heading>Sub-heading</Heading><Sectionlevel={4}><Heading>Sub-sub-heading</Heading><Heading>Sub-sub-heading</Heading><Heading>Sub-sub-heading</Heading></Section></Section></Section></Section>);}\n```\n\n\nIt\u2019s the same result as the original code, but you did not need to pass the level prop to each Heading component! Instead, it \u201cfigures out\u201d its heading level by asking the closest Section above:\n\n1. You pass a level prop to the <Section> .\n2. Section wraps its children into <LevelContext value={level}> .\n3. Heading asks the closest value of LevelContext above with useContext(LevelContext) .", "source": "https://react.dev/learn/passing-data-deeply-with-context", "category": "Passing Data Deeply with Context"}
{"instruction": "What is the process for Using and providing context from the same component in a React component?", "input": "", "output": "Currently, you still have to specify each section\u2019s level manually:\n\n\n```javascript\nexportdefaultfunctionPage(){return(<Sectionlevel={1}>...<Sectionlevel={2}>...<Sectionlevel={3}>...\n```\n\n\nSince context lets you read information from a component above, each Section could read the level from the Section above, and pass level + 1 down automatically. Here is how you could do it:\n\n\n```javascript\nimport{useContext}from'react';import{LevelContext}from'./LevelContext.js';exportdefaultfunctionSection({children}){constlevel=useContext(LevelContext);return(<sectionclassName=\"section\"><LevelContextvalue={level+1}>{children}</LevelContext></section>);}\n```\n\n\nWith this change, you don\u2019t need to pass the level prop either to the <Section> or to the <Heading> :\n\n\n```javascript\nimportHeadingfrom'./Heading.js';importSectionfrom'./Section.js';exportdefaultfunctionPage(){return(<Section><Heading>Title</Heading><Section><Heading>Heading</Heading><Heading>Heading</Heading><Heading>Heading</Heading><Section><Heading>Sub-heading</Heading><Heading>Sub-heading</Heading><Heading>Sub-heading</Heading><Section><Heading>Sub-sub-heading</Heading><Heading>Sub-sub-heading</Heading><Heading>Sub-sub-heading</Heading></Section></Section></Section></Section>);}\n```\n\n\nNow both Heading and Section read the LevelContext to figure out how \u201cdeep\u201d they are. And the Section wraps its children into the LevelContext to specify that anything inside of it is at a \u201cdeeper\u201d level.\n\n\n### Note\n\n\nThis example uses heading levels because they show visually how nested components can override context. But context is useful for many other use cases too. You can pass down any information needed by the entire subtree: the current color theme, the currently logged in user, and so on.", "source": "https://react.dev/learn/passing-data-deeply-with-context", "category": "Passing Data Deeply with Context"}
{"instruction": "Show me a code example of Using and providing context from the same component in React.", "input": "", "output": "Currently, you still have to specify each section\u2019s level manually:\n\n\n```javascript\nexportdefaultfunctionPage(){return(<Sectionlevel={1}>...<Sectionlevel={2}>...<Sectionlevel={3}>...\n```\n\n\nSince context lets you read information from a component above, each Section could read the level from the Section above, and pass level + 1 down automatically. Here is how you could do it:\n\n\n```javascript\nimport{useContext}from'react';import{LevelContext}from'./LevelContext.js';exportdefaultfunctionSection({children}){constlevel=useContext(LevelContext);return(<sectionclassName=\"section\"><LevelContextvalue={level+1}>{children}</LevelContext></section>);}\n```\n\n\nWith this change, you don\u2019t need to pass the level prop either to the <Section> or to the <Heading> :\n\n\n```javascript\nimportHeadingfrom'./Heading.js';importSectionfrom'./Section.js';exportdefaultfunctionPage(){return(<Section><Heading>Title</Heading><Section><Heading>Heading</Heading><Heading>Heading</Heading><Heading>Heading</Heading><Section><Heading>Sub-heading</Heading><Heading>Sub-heading</Heading><Heading>Sub-heading</Heading><Section><Heading>Sub-sub-heading</Heading><Heading>Sub-sub-heading</Heading><Heading>Sub-sub-heading</Heading></Section></Section></Section></Section>);}\n```\n\n\nNow both Heading and Section read the LevelContext to figure out how \u201cdeep\u201d they are. And the Section wraps its children into the LevelContext to specify that anything inside of it is at a \u201cdeeper\u201d level.\n\n\n### Note\n\n\nThis example uses heading levels because they show visually how nested components can override context. But context is useful for many other use cases too. You can pass down any information needed by the entire subtree: the current color theme, the currently logged in user, and so on.", "source": "https://react.dev/learn/passing-data-deeply-with-context", "category": "Passing Data Deeply with Context"}
{"instruction": "Explain the concept of Context passes through intermediate components in React.", "input": "", "output": "You can insert as many components as you like between the component that provides context and the one that uses it. This includes both built-in components like <div> and components you might build yourself.\n\nIn this example, the same Post component (with a dashed border) is rendered at two different nesting levels. Notice that the <Heading> inside of it gets its level automatically from the closest <Section> :\n\n\n```javascript\nimportHeadingfrom'./Heading.js';importSectionfrom'./Section.js';exportdefaultfunctionProfilePage(){return(<Section><Heading>My Profile</Heading><Posttitle=\"Hello traveller!\"body=\"Read about my adventures.\"/><AllPosts/></Section>);}functionAllPosts(){return(<Section><Heading>Posts</Heading><RecentPosts/></Section>);}functionRecentPosts(){return(<Section><Heading>Recent Posts</Heading><Posttitle=\"Flavors of Lisbon\"body=\"...those past\u00e9is de nata!\"/><Posttitle=\"Buenos Aires in the rhythm of tango\"body=\"I loved it!\"/></Section>);}functionPost({title,body}){return(<SectionisFancy={true}><Heading>{title}</Heading><p><i>{body}</i></p></Section>);}\n```\n\n\nYou didn\u2019t do anything special for this to work. A Section specifies the context for the tree inside it, so you can insert a <Heading> anywhere, and it will have the correct size. Try it in the sandbox above!\n\nContext lets you write components that \u201cadapt to their surroundings\u201d and display themselves differently depending on where (or, in other words, in which context ) they are being rendered.\n\nHow context works might remind you of CSS property inheritance. In CSS, you can specify color: blue for a <div> , and any DOM node inside of it, no matter how deep, will inherit that color unless some other DOM node in the middle overrides it with color: green . Similarly, in React, the only way to override some context coming from above is to wrap children into a context provider with a different value.\n\nIn CSS, different properties like color and background-color don\u2019t override each other. You can set all <div> \u2019s color to red without impacting background-color . Similarly, different React contexts don\u2019t override each other. Each context that you make with createContext() is completely separate from other ones, and ties together components using and providing that particular context. One component may use or provide many different contexts without a problem.", "source": "https://react.dev/learn/passing-data-deeply-with-context", "category": "Passing Data Deeply with Context"}
{"instruction": "Show me a code example of Context passes through intermediate components in React.", "input": "", "output": "You can insert as many components as you like between the component that provides context and the one that uses it. This includes both built-in components like <div> and components you might build yourself.\n\nIn this example, the same Post component (with a dashed border) is rendered at two different nesting levels. Notice that the <Heading> inside of it gets its level automatically from the closest <Section> :\n\n\n```javascript\nimportHeadingfrom'./Heading.js';importSectionfrom'./Section.js';exportdefaultfunctionProfilePage(){return(<Section><Heading>My Profile</Heading><Posttitle=\"Hello traveller!\"body=\"Read about my adventures.\"/><AllPosts/></Section>);}functionAllPosts(){return(<Section><Heading>Posts</Heading><RecentPosts/></Section>);}functionRecentPosts(){return(<Section><Heading>Recent Posts</Heading><Posttitle=\"Flavors of Lisbon\"body=\"...those past\u00e9is de nata!\"/><Posttitle=\"Buenos Aires in the rhythm of tango\"body=\"I loved it!\"/></Section>);}functionPost({title,body}){return(<SectionisFancy={true}><Heading>{title}</Heading><p><i>{body}</i></p></Section>);}\n```\n\n\nYou didn\u2019t do anything special for this to work. A Section specifies the context for the tree inside it, so you can insert a <Heading> anywhere, and it will have the correct size. Try it in the sandbox above!\n\nContext lets you write components that \u201cadapt to their surroundings\u201d and display themselves differently depending on where (or, in other words, in which context ) they are being rendered.\n\nHow context works might remind you of CSS property inheritance. In CSS, you can specify color: blue for a <div> , and any DOM node inside of it, no matter how deep, will inherit that color unless some other DOM node in the middle overrides it with color: green . Similarly, in React, the only way to override some context coming from above is to wrap children into a context provider with a different value.\n\nIn CSS, different properties like color and background-color don\u2019t override each other. You can set all <div> \u2019s color to red without impacting background-color . Similarly, different React contexts don\u2019t override each other. Each context that you make with createContext() is completely separate from other ones, and ties together components using and providing that particular context. One component may use or provide many different contexts without a problem.", "source": "https://react.dev/learn/passing-data-deeply-with-context", "category": "Passing Data Deeply with Context"}
{"instruction": "Explain the concept of Before you use context in React.", "input": "", "output": "Context is very tempting to use! However, this also means it\u2019s too easy to overuse it. Just because you need to pass some props several levels deep doesn\u2019t mean you should put that information into context.\n\nHere\u2019s a few alternatives you should consider before using context:\n\n1. Start by passing props. If your components are not trivial, it\u2019s not unusual to pass a dozen props down through a dozen components. It may feel like a slog, but it makes it very clear which components use which data! The person maintaining your code will be glad you\u2019ve made the data flow explicit with props.\n2. Extract components and pass JSX as children to them. If you pass some data through many layers of intermediate components that don\u2019t use that data (and only pass it further down), this often means that you forgot to extract some components along the way. For example, maybe you pass data props like posts to visual components that don\u2019t use them directly, like <Layout posts={posts} /> . Instead, make Layout take children as a prop, and render <Layout><Posts posts={posts} /></Layout> . This reduces the number of layers between the component specifying the data and the one that needs it.\n\nIf neither of these approaches works well for you, consider context.", "source": "https://react.dev/learn/passing-data-deeply-with-context", "category": "Passing Data Deeply with Context"}
{"instruction": "What is Use cases for context in React and how does it work?", "input": "", "output": "* Theming: If your app lets the user change its appearance (e.g. dark mode), you can put a context provider at the top of your app, and use that context in components that need to adjust their visual look.\n* Current account: Many components might need to know the currently logged in user. Putting it in context makes it convenient to read it anywhere in the tree. Some apps also let you operate multiple accounts at the same time (e.g. to leave a comment as a different user). In those cases, it can be convenient to wrap a part of the UI into a nested provider with a different current account value.\n* Routing: Most routing solutions use context internally to hold the current route. This is how every link \u201cknows\u201d whether it\u2019s active or not. If you build your own router, you might want to do it too.\n* Managing state: As your app grows, you might end up with a lot of state closer to the top of your app. Many distant components below may want to change it. It is common to use a reducer together with context to manage complex state and pass it down to distant components without too much hassle.\n\nContext is not limited to static values. If you pass a different value on the next render, React will update all the components reading it below! This is why context is often used in combination with state.\n\nIn general, if some information is needed by distant components in different parts of the tree, it\u2019s a good indication that context will help you.", "source": "https://react.dev/learn/passing-data-deeply-with-context", "category": "Passing Data Deeply with Context"}
{"instruction": "What is Familiar props in React and how does it work?", "input": "", "output": "Props are the information that you pass to a JSX tag. For example, className , src , alt , width , and height are some of the props you can pass to an <img> :\n\n\n```javascript\nfunctionAvatar(){return(<imgclassName=\"avatar\"src=\"https://i.imgur.com/1bX5QH6.jpg\"alt=\"Lin Lanying\"width={100}height={100}/>);}exportdefaultfunctionProfile(){return(<Avatar/>);}\n```\n\n\nThe props you can pass to an <img> tag are predefined (ReactDOM conforms to the HTML standard ). But you can pass any props to your own components, such as <Avatar> , to customize them. Here\u2019s how!", "source": "https://react.dev/learn/passing-props-to-a-component", "category": "Passing Props to a Component"}
{"instruction": "Show me a code example of Familiar props in React.", "input": "", "output": "Props are the information that you pass to a JSX tag. For example, className , src , alt , width , and height are some of the props you can pass to an <img> :\n\n\n```javascript\nfunctionAvatar(){return(<imgclassName=\"avatar\"src=\"https://i.imgur.com/1bX5QH6.jpg\"alt=\"Lin Lanying\"width={100}height={100}/>);}exportdefaultfunctionProfile(){return(<Avatar/>);}\n```\n\n\nThe props you can pass to an <img> tag are predefined (ReactDOM conforms to the HTML standard ). But you can pass any props to your own components, such as <Avatar> , to customize them. Here\u2019s how!", "source": "https://react.dev/learn/passing-props-to-a-component", "category": "Passing Props to a Component"}
{"instruction": "How do I handle Passing props to a component in React?", "input": "", "output": "In this code, the Profile component isn\u2019t passing any props to its child component, Avatar :\n\n\n```javascript\nexportdefaultfunctionProfile(){return(<Avatar/>);}\n```\n\n\nYou can give Avatar some props in two steps.\n\n\n### Step 1: Pass props to the child component\n\n\nFirst, pass some props to Avatar . For example, let\u2019s pass two props: person (an object), and size (a number):\n\n\n```javascript\nexportdefaultfunctionProfile(){return(<Avatarperson={{name:'Lin Lanying',imageId:'1bX5QH6'}}size={100}/>);}\n```\n\n\n\n### Note\n\n\nIf double curly braces after person= confuse you, recall they\u2019re merely an object inside the JSX curlies.\n\nNow you can read these props inside the Avatar component.\n\n\n### Step 2: Read props inside the child component\n\n\nYou can read these props by listing their names person, size separated by the commas inside ({ and }) directly after function Avatar . This lets you use them inside the Avatar code, like you would with a variable.\n\n\n```javascript\nfunctionAvatar({person,size}){// person and size are available here}\n```\n\n\nAdd some logic to Avatar that uses the person and size props for rendering, and you\u2019re done.\n\nNow you can configure Avatar to render in many different ways with different props. Try tweaking the values!\n\n\n```javascript\nimport{getImageUrl}from'./utils.js';functionAvatar({person,size}){return(<imgclassName=\"avatar\"src={getImageUrl(person)}alt={person.name}width={size}height={size}/>);}exportdefaultfunctionProfile(){return(<div><Avatarsize={100}person={{name:'Katsuko Saruhashi',imageId:'YfeOqp2'}}/><Avatarsize={80}person={{name:'Aklilu Lemma',imageId:'OKS67lh'}}/><Avatarsize={50}person={{name:'Lin Lanying',imageId:'1bX5QH6'}}/></div>);}\n```\n\n\nProps let you think about parent and child components independently. For example, you can change the person or the size props inside Profile without having to think about how Avatar uses them. Similarly, you can change how the Avatar uses these props, without looking at the Profile .\n\nYou can think of props like \u201cknobs\u201d that you can adjust. They serve the same role as arguments serve for functions\u2014in fact, props are the only argument to your component! React component functions accept a single argument, a props object:\n\n\n```javascript\nfunctionAvatar(props){letperson=props.person;letsize=props.size;// ...}\n```\n\n\nUsually you don\u2019t need the whole props object itself, so you destructure it into individual props.\n\n\n### Pitfall\n\n\nDon\u2019t miss the pair of { and } curlies inside of ( and ) when declaring props:\n\n\n```javascript\nfunctionAvatar({person,size}){// ...}\n```\n\n\nThis syntax is called \u201cdestructuring\u201d and is equivalent to reading properties from a function parameter:\n\n\n```javascript\nfunctionAvatar(props){letperson=props.person;letsize=props.size;// ...}\n```\n", "source": "https://react.dev/learn/passing-props-to-a-component", "category": "Passing Props to a Component"}
{"instruction": "Show me a code example of Passing props to a component in React.", "input": "", "output": "In this code, the Profile component isn\u2019t passing any props to its child component, Avatar :\n\n\n```javascript\nexportdefaultfunctionProfile(){return(<Avatar/>);}\n```\n\n\nYou can give Avatar some props in two steps.\n\n\n### Step 1: Pass props to the child component\n\n\nFirst, pass some props to Avatar . For example, let\u2019s pass two props: person (an object), and size (a number):\n\n\n```javascript\nexportdefaultfunctionProfile(){return(<Avatarperson={{name:'Lin Lanying',imageId:'1bX5QH6'}}size={100}/>);}\n```\n\n\n\n### Note\n\n\nIf double curly braces after person= confuse you, recall they\u2019re merely an object inside the JSX curlies.\n\nNow you can read these props inside the Avatar component.\n\n\n### Step 2: Read props inside the child component\n\n\nYou can read these props by listing their names person, size separated by the commas inside ({ and }) directly after function Avatar . This lets you use them inside the Avatar code, like you would with a variable.\n\n\n```javascript\nfunctionAvatar({person,size}){// person and size are available here}\n```\n\n\nAdd some logic to Avatar that uses the person and size props for rendering, and you\u2019re done.\n\nNow you can configure Avatar to render in many different ways with different props. Try tweaking the values!\n\n\n```javascript\nimport{getImageUrl}from'./utils.js';functionAvatar({person,size}){return(<imgclassName=\"avatar\"src={getImageUrl(person)}alt={person.name}width={size}height={size}/>);}exportdefaultfunctionProfile(){return(<div><Avatarsize={100}person={{name:'Katsuko Saruhashi',imageId:'YfeOqp2'}}/><Avatarsize={80}person={{name:'Aklilu Lemma',imageId:'OKS67lh'}}/><Avatarsize={50}person={{name:'Lin Lanying',imageId:'1bX5QH6'}}/></div>);}\n```\n\n\nProps let you think about parent and child components independently. For example, you can change the person or the size props inside Profile without having to think about how Avatar uses them. Similarly, you can change how the Avatar uses these props, without looking at the Profile .\n\nYou can think of props like \u201cknobs\u201d that you can adjust. They serve the same role as arguments serve for functions\u2014in fact, props are the only argument to your component! React component functions accept a single argument, a props object:\n\n\n```javascript\nfunctionAvatar(props){letperson=props.person;letsize=props.size;// ...}\n```\n\n\nUsually you don\u2019t need the whole props object itself, so you destructure it into individual props.\n\n\n### Pitfall\n\n\nDon\u2019t miss the pair of { and } curlies inside of ( and ) when declaring props:\n\n\n```javascript\nfunctionAvatar({person,size}){// ...}\n```\n\n\nThis syntax is called \u201cdestructuring\u201d and is equivalent to reading properties from a function parameter:\n\n\n```javascript\nfunctionAvatar(props){letperson=props.person;letsize=props.size;// ...}\n```\n", "source": "https://react.dev/learn/passing-props-to-a-component", "category": "Passing Props to a Component"}
{"instruction": "Tell me about Specifying a default value for a prop.", "input": "", "output": "If you want to give a prop a default value to fall back on when no value is specified, you can do it with the destructuring by putting = and the default value right after the parameter:\n\n\n```javascript\nfunctionAvatar({person,size=100}){// ...}\n```\n\n\nNow, if <Avatar person={...} /> is rendered with no size prop, the size will be set to 100 .\n\nThe default value is only used if the size prop is missing or if you pass size={undefined} . But if you pass size={null} or size={0} , the default value will not be used.", "source": "https://react.dev/learn/passing-props-to-a-component", "category": "Passing Props to a Component"}
{"instruction": "Show me a code example of Specifying a default value for a prop in React.", "input": "", "output": "If you want to give a prop a default value to fall back on when no value is specified, you can do it with the destructuring by putting = and the default value right after the parameter:\n\n\n```javascript\nfunctionAvatar({person,size=100}){// ...}\n```\n\n\nNow, if <Avatar person={...} /> is rendered with no size prop, the size will be set to 100 .\n\nThe default value is only used if the size prop is missing or if you pass size={undefined} . But if you pass size={null} or size={0} , the default value will not be used.", "source": "https://react.dev/learn/passing-props-to-a-component", "category": "Passing Props to a Component"}
{"instruction": "How do I handle Forwarding props with the JSX spread syntax in React?", "input": "", "output": "Sometimes, passing props gets very repetitive:\n\n\n```javascript\nfunctionProfile({person,size,isSepia,thickBorder}){return(<divclassName=\"card\"><Avatarperson={person}size={size}isSepia={isSepia}thickBorder={thickBorder}/></div>);}\n```\n\n\nThere\u2019s nothing wrong with repetitive code\u2014it can be more legible. But at times you may value conciseness. Some components forward all of their props to their children, like how this Profile does with Avatar . Because they don\u2019t use any of their props directly, it can make sense to use a more concise \u201cspread\u201d syntax:\n\n\n```javascript\nfunctionProfile(props){return(<divclassName=\"card\"><Avatar{...props}/></div>);}\n```\n\n\nThis forwards all of Profile \u2019s props to the Avatar without listing each of their names.\n\nUse spread syntax with restraint. If you\u2019re using it in every other component, something is wrong. Often, it indicates that you should split your components and pass children as JSX. More on that next!", "source": "https://react.dev/learn/passing-props-to-a-component", "category": "Passing Props to a Component"}
{"instruction": "Show me a code example of Forwarding props with the JSX spread syntax in React.", "input": "", "output": "Sometimes, passing props gets very repetitive:\n\n\n```javascript\nfunctionProfile({person,size,isSepia,thickBorder}){return(<divclassName=\"card\"><Avatarperson={person}size={size}isSepia={isSepia}thickBorder={thickBorder}/></div>);}\n```\n\n\nThere\u2019s nothing wrong with repetitive code\u2014it can be more legible. But at times you may value conciseness. Some components forward all of their props to their children, like how this Profile does with Avatar . Because they don\u2019t use any of their props directly, it can make sense to use a more concise \u201cspread\u201d syntax:\n\n\n```javascript\nfunctionProfile(props){return(<divclassName=\"card\"><Avatar{...props}/></div>);}\n```\n\n\nThis forwards all of Profile \u2019s props to the Avatar without listing each of their names.\n\nUse spread syntax with restraint. If you\u2019re using it in every other component, something is wrong. Often, it indicates that you should split your components and pass children as JSX. More on that next!", "source": "https://react.dev/learn/passing-props-to-a-component", "category": "Passing Props to a Component"}
{"instruction": "Tell me about Passing JSX as children.", "input": "", "output": "It is common to nest built-in browser tags:\n\n\n```javascript\n<div><img/></div>\n```\n\n\nSometimes you\u2019ll want to nest your own components the same way:\n\n\n```javascript\n<Card><Avatar/></Card>\n```\n\n\nWhen you nest content inside a JSX tag, the parent component will receive that content in a prop called children . For example, the Card component below will receive a children prop set to <Avatar /> and render it in a wrapper div:\n\n\n```javascript\nimportAvatarfrom'./Avatar.js';functionCard({children}){return(<divclassName=\"card\">{children}</div>);}exportdefaultfunctionProfile(){return(<Card><Avatarsize={100}person={{name:'Katsuko Saruhashi',imageId:'YfeOqp2'}}/></Card>);}\n```\n\n\nTry replacing the <Avatar> inside <Card> with some text to see how the Card component can wrap any nested content. It doesn\u2019t need to \u201cknow\u201d what\u2019s being rendered inside of it. You will see this flexible pattern in many places.\n\nYou can think of a component with a children prop as having a \u201chole\u201d that can be \u201cfilled in\u201d by its parent components with arbitrary JSX. You will often use the children prop for visual wrappers: panels, grids, etc.\n\nIllustrated by Rachel Lee Nabors", "source": "https://react.dev/learn/passing-props-to-a-component", "category": "Passing Props to a Component"}
{"instruction": "Show me a code example of Passing JSX as children in React.", "input": "", "output": "It is common to nest built-in browser tags:\n\n\n```javascript\n<div><img/></div>\n```\n\n\nSometimes you\u2019ll want to nest your own components the same way:\n\n\n```javascript\n<Card><Avatar/></Card>\n```\n\n\nWhen you nest content inside a JSX tag, the parent component will receive that content in a prop called children . For example, the Card component below will receive a children prop set to <Avatar /> and render it in a wrapper div:\n\n\n```javascript\nimportAvatarfrom'./Avatar.js';functionCard({children}){return(<divclassName=\"card\">{children}</div>);}exportdefaultfunctionProfile(){return(<Card><Avatarsize={100}person={{name:'Katsuko Saruhashi',imageId:'YfeOqp2'}}/></Card>);}\n```\n\n\nTry replacing the <Avatar> inside <Card> with some text to see how the Card component can wrap any nested content. It doesn\u2019t need to \u201cknow\u201d what\u2019s being rendered inside of it. You will see this flexible pattern in many places.\n\nYou can think of a component with a children prop as having a \u201chole\u201d that can be \u201cfilled in\u201d by its parent components with arbitrary JSX. You will often use the children prop for visual wrappers: panels, grids, etc.\n\nIllustrated by Rachel Lee Nabors", "source": "https://react.dev/learn/passing-props-to-a-component", "category": "Passing Props to a Component"}
{"instruction": "Can you describe How props change over time in the context of React?", "input": "", "output": "The Clock component below receives two props from its parent component: color and time . (The parent component\u2019s code is omitted because it uses state , which we won\u2019t dive into just yet.)\n\nTry changing the color in the select box below:\n\n\n```javascript\nexportdefaultfunctionClock({color,time}){return(<h1style={{color:color}}>{time}</h1>);}\n```\n\n\nThis example illustrates that a component may receive different props over time. Props are not always static! Here, the time prop changes every second, and the color prop changes when you select another color. Props reflect a component\u2019s data at any point in time, rather than only in the beginning.\n\nHowever, props are immutable \u2014a term from computer science meaning \u201cunchangeable\u201d. When a component needs to change its props (for example, in response to a user interaction or new data), it will have to \u201cask\u201d its parent component to pass it different props \u2014a new object! Its old props will then be cast aside, and eventually the JavaScript engine will reclaim the memory taken by them.\n\nDon\u2019t try to \u201cchange props\u201d. When you need to respond to the user input (like changing the selected color), you will need to \u201cset state\u201d, which you can learn about in State: A Component\u2019s Memory.", "source": "https://react.dev/learn/passing-props-to-a-component", "category": "Passing Props to a Component"}
{"instruction": "Show me a code example of How props change over time in React.", "input": "", "output": "The Clock component below receives two props from its parent component: color and time . (The parent component\u2019s code is omitted because it uses state , which we won\u2019t dive into just yet.)\n\nTry changing the color in the select box below:\n\n\n```javascript\nexportdefaultfunctionClock({color,time}){return(<h1style={{color:color}}>{time}</h1>);}\n```\n\n\nThis example illustrates that a component may receive different props over time. Props are not always static! Here, the time prop changes every second, and the color prop changes when you select another color. Props reflect a component\u2019s data at any point in time, rather than only in the beginning.\n\nHowever, props are immutable \u2014a term from computer science meaning \u201cunchangeable\u201d. When a component needs to change its props (for example, in response to a user interaction or new data), it will have to \u201cask\u201d its parent component to pass it different props \u2014a new object! Its old props will then be cast aside, and eventually the JavaScript engine will reclaim the memory taken by them.\n\nDon\u2019t try to \u201cchange props\u201d. When you need to respond to the user input (like changing the selected color), you will need to \u201cset state\u201d, which you can learn about in State: A Component\u2019s Memory.", "source": "https://react.dev/learn/passing-props-to-a-component", "category": "Passing Props to a Component"}
{"instruction": "Tell me about State is tied to a position in the render tree.", "input": "", "output": "React builds render trees for the component structure in your UI.\n\nWhen you give a component state, you might think the state \u201clives\u201d inside the component. But the state is actually held inside React. React associates each piece of state it\u2019s holding with the correct component by where that component sits in the render tree.\n\nHere, there is only one <Counter /> JSX tag, but it\u2019s rendered at two different positions:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionApp(){constcounter=<Counter/>;return(<div>{counter}{counter}</div>);}functionCounter(){const[score,setScore]=useState(0);const[hover,setHover]=useState(false);letclassName='counter';if(hover){className+=' hover';}return(<divclassName={className}onPointerEnter={()=>setHover(true)}onPointerLeave={()=>setHover(false)}><h1>{score}</h1><buttononClick={()=>setScore(score+1)}>Add one</button></div>);}\n```\n\n\nHere\u2019s how these look as a tree:\n\nReact tree\n\nThese are two separate counters because each is rendered at its own position in the tree. You don\u2019t usually have to think about these positions to use React, but it can be useful to understand how it works.\n\nIn React, each component on the screen has fully isolated state. For example, if you render two Counter components side by side, each of them will get its own, independent, score and hover states.\n\nTry clicking both counters and notice they don\u2019t affect each other:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionApp(){return(<div><Counter/><Counter/></div>);}functionCounter(){const[score,setScore]=useState(0);const[hover,setHover]=useState(false);letclassName='counter';if(hover){className+=' hover';}return(<divclassName={className}onPointerEnter={()=>setHover(true)}onPointerLeave={()=>setHover(false)}><h1>{score}</h1><buttononClick={()=>setScore(score+1)}>Add one</button></div>);}\n```\n\n\nAs you can see, when one counter is updated, only the state for that component is updated:\n\nUpdating state\n\nReact will keep the state around for as long as you render the same component at the same position in the tree. To see this, increment both counters, then remove the second component by unchecking \u201cRender the second counter\u201d checkbox, and then add it back by ticking it again:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionApp(){const[showB,setShowB]=useState(true);return(<div><Counter/>{showB&&<Counter/>}<label><inputtype=\"checkbox\"checked={showB}onChange={e=>{setShowB(e.target.checked)}}/>Render the second counter</label></div>);}functionCounter(){const[score,setScore]=useState(0);const[hover,setHover]=useState(false);letclassName='counter';if(hover){className+=' hover';}return(<divclassName={className}onPointerEnter={()=>setHover(true)}onPointerLeave={()=>setHover(false)}><h1>{score}</h1><buttononClick={()=>setScore(score+1)}>Add one</button></div>);}\n```\n\n\nNotice how the moment you stop rendering the second counter, its state disappears completely. That\u2019s because when React removes a component, it destroys its state.\n\nDeleting a component\n\nWhen you tick \u201cRender the second counter\u201d, a second Counter and its state are initialized from scratch ( score = 0 ) and added to the DOM.\n\nAdding a component\n\nReact preserves a component\u2019s state for as long as it\u2019s being rendered at its position in the UI tree. If it gets removed, or a different component gets rendered at the same position, React discards its state.", "source": "https://react.dev/learn/preserving-and-resetting-state", "category": "Preserving and Resetting State"}
{"instruction": "Show me a code example of State is tied to a position in the render tree in React.", "input": "", "output": "React builds render trees for the component structure in your UI.\n\nWhen you give a component state, you might think the state \u201clives\u201d inside the component. But the state is actually held inside React. React associates each piece of state it\u2019s holding with the correct component by where that component sits in the render tree.\n\nHere, there is only one <Counter /> JSX tag, but it\u2019s rendered at two different positions:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionApp(){constcounter=<Counter/>;return(<div>{counter}{counter}</div>);}functionCounter(){const[score,setScore]=useState(0);const[hover,setHover]=useState(false);letclassName='counter';if(hover){className+=' hover';}return(<divclassName={className}onPointerEnter={()=>setHover(true)}onPointerLeave={()=>setHover(false)}><h1>{score}</h1><buttononClick={()=>setScore(score+1)}>Add one</button></div>);}\n```\n\n\nHere\u2019s how these look as a tree:\n\nReact tree\n\nThese are two separate counters because each is rendered at its own position in the tree. You don\u2019t usually have to think about these positions to use React, but it can be useful to understand how it works.\n\nIn React, each component on the screen has fully isolated state. For example, if you render two Counter components side by side, each of them will get its own, independent, score and hover states.\n\nTry clicking both counters and notice they don\u2019t affect each other:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionApp(){return(<div><Counter/><Counter/></div>);}functionCounter(){const[score,setScore]=useState(0);const[hover,setHover]=useState(false);letclassName='counter';if(hover){className+=' hover';}return(<divclassName={className}onPointerEnter={()=>setHover(true)}onPointerLeave={()=>setHover(false)}><h1>{score}</h1><buttononClick={()=>setScore(score+1)}>Add one</button></div>);}\n```\n\n\nAs you can see, when one counter is updated, only the state for that component is updated:\n\nUpdating state\n\nReact will keep the state around for as long as you render the same component at the same position in the tree. To see this, increment both counters, then remove the second component by unchecking \u201cRender the second counter\u201d checkbox, and then add it back by ticking it again:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionApp(){const[showB,setShowB]=useState(true);return(<div><Counter/>{showB&&<Counter/>}<label><inputtype=\"checkbox\"checked={showB}onChange={e=>{setShowB(e.target.checked)}}/>Render the second counter</label></div>);}functionCounter(){const[score,setScore]=useState(0);const[hover,setHover]=useState(false);letclassName='counter';if(hover){className+=' hover';}return(<divclassName={className}onPointerEnter={()=>setHover(true)}onPointerLeave={()=>setHover(false)}><h1>{score}</h1><buttononClick={()=>setScore(score+1)}>Add one</button></div>);}\n```\n\n\nNotice how the moment you stop rendering the second counter, its state disappears completely. That\u2019s because when React removes a component, it destroys its state.\n\nDeleting a component\n\nWhen you tick \u201cRender the second counter\u201d, a second Counter and its state are initialized from scratch ( score = 0 ) and added to the DOM.\n\nAdding a component\n\nReact preserves a component\u2019s state for as long as it\u2019s being rendered at its position in the UI tree. If it gets removed, or a different component gets rendered at the same position, React discards its state.", "source": "https://react.dev/learn/preserving-and-resetting-state", "category": "Preserving and Resetting State"}
{"instruction": "Tell me about Same component at the same position preserves state.", "input": "", "output": "In this example, there are two different <Counter /> tags:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionApp(){const[isFancy,setIsFancy]=useState(false);return(<div>{isFancy?(<CounterisFancy={true}/>):(<CounterisFancy={false}/>)}<label><inputtype=\"checkbox\"checked={isFancy}onChange={e=>{setIsFancy(e.target.checked)}}/>Use fancy styling</label></div>);}functionCounter({isFancy}){const[score,setScore]=useState(0);const[hover,setHover]=useState(false);letclassName='counter';if(hover){className+=' hover';}if(isFancy){className+=' fancy';}return(<divclassName={className}onPointerEnter={()=>setHover(true)}onPointerLeave={()=>setHover(false)}><h1>{score}</h1><buttononClick={()=>setScore(score+1)}>Add one</button></div>);}\n```\n\n\nWhen you tick or clear the checkbox, the counter state does not get reset. Whether isFancy is true or false , you always have a <Counter /> as the first child of the div returned from the root App component:\n\nUpdating the App state does not reset the Counter because Counter stays in the same position\n\nIt\u2019s the same component at the same position, so from React\u2019s perspective, it\u2019s the same counter.\n\n\n### Pitfall\n\n\nRemember that it\u2019s the position in the UI tree\u2014not in the JSX markup\u2014that matters to React! This component has two return clauses with different <Counter /> JSX tags inside and outside the if :\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionApp(){const[isFancy,setIsFancy]=useState(false);if(isFancy){return(<div><CounterisFancy={true}/><label><inputtype=\"checkbox\"checked={isFancy}onChange={e=>{setIsFancy(e.target.checked)}}/>Use fancy styling</label></div>);}return(<div><CounterisFancy={false}/><label><inputtype=\"checkbox\"checked={isFancy}onChange={e=>{setIsFancy(e.target.checked)}}/>Use fancy styling</label></div>);}functionCounter({isFancy}){const[score,setScore]=useState(0);const[hover,setHover]=useState(false);letclassName='counter';if(hover){className+=' hover';}if(isFancy){className+=' fancy';}return(<divclassName={className}onPointerEnter={()=>setHover(true)}onPointerLeave={()=>setHover(false)}><h1>{score}</h1><buttononClick={()=>setScore(score+1)}>Add one</button></div>);}\n```\n\n\nYou might expect the state to reset when you tick checkbox, but it doesn\u2019t! This is because both of these <Counter /> tags are rendered at the same position. React doesn\u2019t know where you place the conditions in your function. All it \u201csees\u201d is the tree you return.\n\nIn both cases, the App component returns a <div> with <Counter /> as a first child. To React, these two counters have the same \u201caddress\u201d: the first child of the first child of the root. This is how React matches them up between the previous and next renders, regardless of how you structure your logic.", "source": "https://react.dev/learn/preserving-and-resetting-state", "category": "Preserving and Resetting State"}
{"instruction": "Show me a code example of Same component at the same position preserves state in React.", "input": "", "output": "In this example, there are two different <Counter /> tags:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionApp(){const[isFancy,setIsFancy]=useState(false);return(<div>{isFancy?(<CounterisFancy={true}/>):(<CounterisFancy={false}/>)}<label><inputtype=\"checkbox\"checked={isFancy}onChange={e=>{setIsFancy(e.target.checked)}}/>Use fancy styling</label></div>);}functionCounter({isFancy}){const[score,setScore]=useState(0);const[hover,setHover]=useState(false);letclassName='counter';if(hover){className+=' hover';}if(isFancy){className+=' fancy';}return(<divclassName={className}onPointerEnter={()=>setHover(true)}onPointerLeave={()=>setHover(false)}><h1>{score}</h1><buttononClick={()=>setScore(score+1)}>Add one</button></div>);}\n```\n\n\nWhen you tick or clear the checkbox, the counter state does not get reset. Whether isFancy is true or false , you always have a <Counter /> as the first child of the div returned from the root App component:\n\nUpdating the App state does not reset the Counter because Counter stays in the same position\n\nIt\u2019s the same component at the same position, so from React\u2019s perspective, it\u2019s the same counter.\n\n\n### Pitfall\n\n\nRemember that it\u2019s the position in the UI tree\u2014not in the JSX markup\u2014that matters to React! This component has two return clauses with different <Counter /> JSX tags inside and outside the if :\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionApp(){const[isFancy,setIsFancy]=useState(false);if(isFancy){return(<div><CounterisFancy={true}/><label><inputtype=\"checkbox\"checked={isFancy}onChange={e=>{setIsFancy(e.target.checked)}}/>Use fancy styling</label></div>);}return(<div><CounterisFancy={false}/><label><inputtype=\"checkbox\"checked={isFancy}onChange={e=>{setIsFancy(e.target.checked)}}/>Use fancy styling</label></div>);}functionCounter({isFancy}){const[score,setScore]=useState(0);const[hover,setHover]=useState(false);letclassName='counter';if(hover){className+=' hover';}if(isFancy){className+=' fancy';}return(<divclassName={className}onPointerEnter={()=>setHover(true)}onPointerLeave={()=>setHover(false)}><h1>{score}</h1><buttononClick={()=>setScore(score+1)}>Add one</button></div>);}\n```\n\n\nYou might expect the state to reset when you tick checkbox, but it doesn\u2019t! This is because both of these <Counter /> tags are rendered at the same position. React doesn\u2019t know where you place the conditions in your function. All it \u201csees\u201d is the tree you return.\n\nIn both cases, the App component returns a <div> with <Counter /> as a first child. To React, these two counters have the same \u201caddress\u201d: the first child of the first child of the root. This is how React matches them up between the previous and next renders, regardless of how you structure your logic.", "source": "https://react.dev/learn/preserving-and-resetting-state", "category": "Preserving and Resetting State"}
{"instruction": "Tell me about Different components at the same position reset state.", "input": "", "output": "In this example, ticking the checkbox will replace <Counter> with a <p> :\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionApp(){const[isPaused,setIsPaused]=useState(false);return(<div>{isPaused?(<p>See you later!</p>):(<Counter/>)}<label><inputtype=\"checkbox\"checked={isPaused}onChange={e=>{setIsPaused(e.target.checked)}}/>Take a break</label></div>);}functionCounter(){const[score,setScore]=useState(0);const[hover,setHover]=useState(false);letclassName='counter';if(hover){className+=' hover';}return(<divclassName={className}onPointerEnter={()=>setHover(true)}onPointerLeave={()=>setHover(false)}><h1>{score}</h1><buttononClick={()=>setScore(score+1)}>Add one</button></div>);}\n```\n\n\nHere, you switch between different component types at the same position. Initially, the first child of the <div> contained a Counter . But when you swapped in a p , React removed the Counter from the UI tree and destroyed its state.\n\nWhen Counter changes to p , the Counter is deleted and the p is added\n\nWhen switching back, the p is deleted and the Counter is added\n\nAlso, when you render a different component in the same position, it resets the state of its entire subtree. To see how this works, increment the counter and then tick the checkbox:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionApp(){const[isFancy,setIsFancy]=useState(false);return(<div>{isFancy?(<div><CounterisFancy={true}/></div>):(<section><CounterisFancy={false}/></section>)}<label><inputtype=\"checkbox\"checked={isFancy}onChange={e=>{setIsFancy(e.target.checked)}}/>Use fancy styling</label></div>);}functionCounter({isFancy}){const[score,setScore]=useState(0);const[hover,setHover]=useState(false);letclassName='counter';if(hover){className+=' hover';}if(isFancy){className+=' fancy';}return(<divclassName={className}onPointerEnter={()=>setHover(true)}onPointerLeave={()=>setHover(false)}><h1>{score}</h1><buttononClick={()=>setScore(score+1)}>Add one</button></div>);}\n```\n\n\nThe counter state gets reset when you click the checkbox. Although you render a Counter , the first child of the div changes from a section to a div . When the child section was removed from the DOM, the whole tree below it (including the Counter and its state) was destroyed as well.\n\nWhen section changes to div , the section is deleted and the new div is added\n\nWhen switching back, the div is deleted and the new section is added\n\nAs a rule of thumb, if you want to preserve the state between re-renders, the structure of your tree needs to \u201cmatch up\u201d from one render to another. If the structure is different, the state gets destroyed because React destroys state when it removes a component from the tree.\n\n\n### Pitfall\n\n\nThis is why you should not nest component function definitions.\n\nHere, the MyTextField component function is defined inside MyComponent :\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionMyComponent(){const[counter,setCounter]=useState(0);functionMyTextField(){const[text,setText]=useState('');return(<inputvalue={text}onChange={e=>setText(e.target.value)}/>);}return(<><MyTextField/><buttononClick={()=>{setCounter(counter+1)}}>Clicked{counter}times</button></>);}\n```\n\n\nEvery time you click the button, the input state disappears! This is because a different MyTextField function is created for every render of MyComponent . You\u2019re rendering a different component in the same position, so React resets all state below. This leads to bugs and performance problems. To avoid this problem, always declare component functions at the top level, and don\u2019t nest their definitions.", "source": "https://react.dev/learn/preserving-and-resetting-state", "category": "Preserving and Resetting State"}
{"instruction": "Show me a code example of Different components at the same position reset state in React.", "input": "", "output": "In this example, ticking the checkbox will replace <Counter> with a <p> :\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionApp(){const[isPaused,setIsPaused]=useState(false);return(<div>{isPaused?(<p>See you later!</p>):(<Counter/>)}<label><inputtype=\"checkbox\"checked={isPaused}onChange={e=>{setIsPaused(e.target.checked)}}/>Take a break</label></div>);}functionCounter(){const[score,setScore]=useState(0);const[hover,setHover]=useState(false);letclassName='counter';if(hover){className+=' hover';}return(<divclassName={className}onPointerEnter={()=>setHover(true)}onPointerLeave={()=>setHover(false)}><h1>{score}</h1><buttononClick={()=>setScore(score+1)}>Add one</button></div>);}\n```\n\n\nHere, you switch between different component types at the same position. Initially, the first child of the <div> contained a Counter . But when you swapped in a p , React removed the Counter from the UI tree and destroyed its state.\n\nWhen Counter changes to p , the Counter is deleted and the p is added\n\nWhen switching back, the p is deleted and the Counter is added\n\nAlso, when you render a different component in the same position, it resets the state of its entire subtree. To see how this works, increment the counter and then tick the checkbox:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionApp(){const[isFancy,setIsFancy]=useState(false);return(<div>{isFancy?(<div><CounterisFancy={true}/></div>):(<section><CounterisFancy={false}/></section>)}<label><inputtype=\"checkbox\"checked={isFancy}onChange={e=>{setIsFancy(e.target.checked)}}/>Use fancy styling</label></div>);}functionCounter({isFancy}){const[score,setScore]=useState(0);const[hover,setHover]=useState(false);letclassName='counter';if(hover){className+=' hover';}if(isFancy){className+=' fancy';}return(<divclassName={className}onPointerEnter={()=>setHover(true)}onPointerLeave={()=>setHover(false)}><h1>{score}</h1><buttononClick={()=>setScore(score+1)}>Add one</button></div>);}\n```\n\n\nThe counter state gets reset when you click the checkbox. Although you render a Counter , the first child of the div changes from a section to a div . When the child section was removed from the DOM, the whole tree below it (including the Counter and its state) was destroyed as well.\n\nWhen section changes to div , the section is deleted and the new div is added\n\nWhen switching back, the div is deleted and the new section is added\n\nAs a rule of thumb, if you want to preserve the state between re-renders, the structure of your tree needs to \u201cmatch up\u201d from one render to another. If the structure is different, the state gets destroyed because React destroys state when it removes a component from the tree.\n\n\n### Pitfall\n\n\nThis is why you should not nest component function definitions.\n\nHere, the MyTextField component function is defined inside MyComponent :\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionMyComponent(){const[counter,setCounter]=useState(0);functionMyTextField(){const[text,setText]=useState('');return(<inputvalue={text}onChange={e=>setText(e.target.value)}/>);}return(<><MyTextField/><buttononClick={()=>{setCounter(counter+1)}}>Clicked{counter}times</button></>);}\n```\n\n\nEvery time you click the button, the input state disappears! This is because a different MyTextField function is created for every render of MyComponent . You\u2019re rendering a different component in the same position, so React resets all state below. This leads to bugs and performance problems. To avoid this problem, always declare component functions at the top level, and don\u2019t nest their definitions.", "source": "https://react.dev/learn/preserving-and-resetting-state", "category": "Preserving and Resetting State"}
{"instruction": "What are the best practices for Different components at the same position reset state in React?", "input": "", "output": "In this example, ticking the checkbox will replace <Counter> with a <p> :\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionApp(){const[isPaused,setIsPaused]=useState(false);return(<div>{isPaused?(<p>See you later!</p>):(<Counter/>)}<label><inputtype=\"checkbox\"checked={isPaused}onChange={e=>{setIsPaused(e.target.checked)}}/>Take a break</label></div>);}functionCounter(){const[score,setScore]=useState(0);const[hover,setHover]=useState(false);letclassName='counter';if(hover){className+=' hover';}return(<divclassName={className}onPointerEnter={()=>setHover(true)}onPointerLeave={()=>setHover(false)}><h1>{score}</h1><buttononClick={()=>setScore(score+1)}>Add one</button></div>);}\n```\n\n\nHere, you switch between different component types at the same position. Initially, the first child of the <div> contained a Counter . But when you swapped in a p , React removed the Counter from the UI tree and destroyed its state.\n\nWhen Counter changes to p , the Counter is deleted and the p is added\n\nWhen switching back, the p is deleted and the Counter is added\n\nAlso, when you render a different component in the same position, it resets the state of its entire subtree. To see how this works, increment the counter and then tick the checkbox:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionApp(){const[isFancy,setIsFancy]=useState(false);return(<div>{isFancy?(<div><CounterisFancy={true}/></div>):(<section><CounterisFancy={false}/></section>)}<label><inputtype=\"checkbox\"checked={isFancy}onChange={e=>{setIsFancy(e.target.checked)}}/>Use fancy styling</label></div>);}functionCounter({isFancy}){const[score,setScore]=useState(0);const[hover,setHover]=useState(false);letclassName='counter';if(hover){className+=' hover';}if(isFancy){className+=' fancy';}return(<divclassName={className}onPointerEnter={()=>setHover(true)}onPointerLeave={()=>setHover(false)}><h1>{score}</h1><buttononClick={()=>setScore(score+1)}>Add one</button></div>);}\n```\n\n\nThe counter state gets reset when you click the checkbox. Although you render a Counter , the first child of the div changes from a section to a div . When the child section was removed from the DOM, the whole tree below it (including the Counter and its state) was destroyed as well.\n\nWhen section changes to div , the section is deleted and the new div is added\n\nWhen switching back, the div is deleted and the new section is added\n\nAs a rule of thumb, if you want to preserve the state between re-renders, the structure of your tree needs to \u201cmatch up\u201d from one render to another. If the structure is different, the state gets destroyed because React destroys state when it removes a component from the tree.\n\n\n### Pitfall\n\n\nThis is why you should not nest component function definitions.\n\nHere, the MyTextField component function is defined inside MyComponent :\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionMyComponent(){const[counter,setCounter]=useState(0);functionMyTextField(){const[text,setText]=useState('');return(<inputvalue={text}onChange={e=>setText(e.target.value)}/>);}return(<><MyTextField/><buttononClick={()=>{setCounter(counter+1)}}>Clicked{counter}times</button></>);}\n```\n\n\nEvery time you click the button, the input state disappears! This is because a different MyTextField function is created for every render of MyComponent . You\u2019re rendering a different component in the same position, so React resets all state below. This leads to bugs and performance problems. To avoid this problem, always declare component functions at the top level, and don\u2019t nest their definitions.", "source": "https://react.dev/learn/preserving-and-resetting-state", "category": "Preserving and Resetting State"}
{"instruction": "Tell me about Resetting state at the same position.", "input": "", "output": "By default, React preserves state of a component while it stays at the same position. Usually, this is exactly what you want, so it makes sense as the default behavior. But sometimes, you may want to reset a component\u2019s state. Consider this app that lets two players keep track of their scores during each turn:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionScoreboard(){const[isPlayerA,setIsPlayerA]=useState(true);return(<div>{isPlayerA?(<Counterperson=\"Taylor\"/>):(<Counterperson=\"Sarah\"/>)}<buttononClick={()=>{setIsPlayerA(!isPlayerA);}}>Next player!</button></div>);}functionCounter({person}){const[score,setScore]=useState(0);const[hover,setHover]=useState(false);letclassName='counter';if(hover){className+=' hover';}return(<divclassName={className}onPointerEnter={()=>setHover(true)}onPointerLeave={()=>setHover(false)}><h1>{person}'s score:{score}</h1><buttononClick={()=>setScore(score+1)}>Add one</button></div>);}\n```\n\n\nCurrently, when you change the player, the score is preserved. The two Counter s appear in the same position, so React sees them as the same Counter whose person prop has changed.\n\nBut conceptually, in this app they should be two separate counters. They might appear in the same place in the UI, but one is a counter for Taylor, and another is a counter for Sarah.\n\nThere are two ways to reset state when switching between them:\n\n1. Render components in different positions\n2. Give each component an explicit identity with key\n\n\n### Option 1: Rendering a component in different positions\n\n\nIf you want these two Counter s to be independent, you can render them in two different positions:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionScoreboard(){const[isPlayerA,setIsPlayerA]=useState(true);return(<div>{isPlayerA&&<Counterperson=\"Taylor\"/>}{!isPlayerA&&<Counterperson=\"Sarah\"/>}<buttononClick={()=>{setIsPlayerA(!isPlayerA);}}>Next player!</button></div>);}functionCounter({person}){const[score,setScore]=useState(0);const[hover,setHover]=useState(false);letclassName='counter';if(hover){className+=' hover';}return(<divclassName={className}onPointerEnter={()=>setHover(true)}onPointerLeave={()=>setHover(false)}><h1>{person}'s score:{score}</h1><buttononClick={()=>setScore(score+1)}>Add one</button></div>);}\n```\n\n\n* Initially, isPlayerA is true . So the first position contains Counter state, and the second one is empty.\n* When you click the \u201cNext player\u201d button the first position clears but the second one now contains a Counter .\n\nInitial state\n\nClicking \u201cnext\u201d\n\nClicking \u201cnext\u201d again\n\nEach Counter \u2019s state gets destroyed each time it\u2019s removed from the DOM. This is why they reset every time you click the button.\n\nThis solution is convenient when you only have a few independent components rendered in the same place. In this example, you only have two, so it\u2019s not a hassle to render both separately in the JSX.\n\n\n### Option 2: Resetting state with a key\n\n\nThere is also another, more generic, way to reset a component\u2019s state.\n\nYou might have seen key s when rendering lists. Keys aren\u2019t just for lists! You can use keys to make React distinguish between any components. By default, React uses order within the parent (\u201cfirst counter\u201d, \u201csecond counter\u201d) to discern between components. But keys let you tell React that this is not just a first counter, or a second counter, but a specific counter\u2014for example, Taylor\u2019s counter. This way, React will know Taylor\u2019s counter wherever it appears in the tree!\n\nIn this example, the two <Counter /> s don\u2019t share state even though they appear in the same place in JSX:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionScoreboard(){const[isPlayerA,setIsPlayerA]=useState(true);return(<div>{isPlayerA?(<Counterkey=\"Taylor\"person=\"Taylor\"/>):(<Counterkey=\"Sarah\"person=\"Sarah\"/>)}<buttononClick={()=>{setIsPlayerA(!isPlayerA);}}>Next player!</button></div>);}functionCounter({person}){const[score,setScore]=useState(0);const[hover,setHover]=useState(false);letclassName='counter';if(hover){className+=' hover';}return(<divclassName={className}onPointerEnter={()=>setHover(true)}onPointerLeave={()=>setHover(false)}><h1>{person}'s score:{score}</h1><buttononClick={()=>setScore(score+1)}>Add one</button></div>);}\n```\n\n\nSwitching between Taylor and Sarah does not preserve the state. This is because you gave them different key s:\n\n\n```javascript\n{isPlayerA?(<Counterkey=\"Taylor\"person=\"Taylor\"/>):(<Counterkey=\"Sarah\"person=\"Sarah\"/>)}\n```\n\n\nSpecifying a key tells React to use the key itself as part of the position, instead of their order within the parent. This is why, even though you render them in the same place in JSX, React sees them as two different counters, and so they will never share state. Every time a counter appears on the screen, its state is created. Every time it is removed, its state is destroyed. Toggling between them resets their state over and over.\n\n\n### Note\n\n\nRemember that keys are not globally unique. They only specify the position within the parent .\n\n\n### Resetting a form with a key\n\n\nResetting state with a key is particularly useful when dealing with forms.\n\nIn this chat app, the <Chat> component contains the text input state:\n\n\n```javascript\nimport{useState}from'react';importChatfrom'./Chat.js';importContactListfrom'./ContactList.js';exportdefaultfunctionMessenger(){const[to,setTo]=useState(contacts[0]);return(<div><ContactListcontacts={contacts}selectedContact={to}onSelect={contact=>setTo(contact)}/><Chatcontact={to}/></div>)}constcontacts=[{id:0,name:'Taylor',email:'taylor@mail.com'},{id:1,name:'Alice',email:'alice@mail.com'},{id:2,name:'Bob',email:'bob@mail.com'}];\n```\n\n\nTry entering something into the input, and then press \u201cAlice\u201d or \u201cBob\u201d to choose a different recipient. You will notice that the input state is preserved because the <Chat> is rendered at the same position in the tree.\n\nIn many apps, this may be the desired behavior, but not in a chat app! You don\u2019t want to let the user send a message they already typed to a wrong person due to an accidental click. To fix it, add a key :\n\n\n```javascript\n<Chatkey={to.id}contact={to}/>\n```\n\n\nThis ensures that when you select a different recipient, the Chat component will be recreated from scratch, including any state in the tree below it. React will also re-create the DOM elements instead of reusing them.\n\nNow switching the recipient always clears the text field:\n\n\n```javascript\nimport{useState}from'react';importChatfrom'./Chat.js';importContactListfrom'./ContactList.js';exportdefaultfunctionMessenger(){const[to,setTo]=useState(contacts[0]);return(<div><ContactListcontacts={contacts}selectedContact={to}onSelect={contact=>setTo(contact)}/><Chatkey={to.id}contact={to}/></div>)}constcontacts=[{id:0,name:'Taylor',email:'taylor@mail.com'},{id:1,name:'Alice',email:'alice@mail.com'},{id:2,name:'Bob',email:'bob@mail.com'}];\n```\n\n\nIn a real chat app, you\u2019d probably want to recover the input state when the user selects the previous recipient again. There are a few ways to keep the state \u201calive\u201d for a component that\u2019s no longer visible:\n\n* You could render all chats instead of just the current one, but hide all the others with CSS. The chats would not get removed from the tree, so their local state would be preserved. This solution works great for simple UIs. But it can get very slow if the hidden trees are large and contain a lot of DOM nodes.\n* You could lift the state up and hold the pending message for each recipient in the parent component. This way, when the child components get removed, it doesn\u2019t matter, because it\u2019s the parent that keeps the important information. This is the most common solution.\n* You might also use a different source in addition to React state. For example, you probably want a message draft to persist even if the user accidentally closes the page. To implement this, you could have the Chat component initialize its state by reading from the localStorage , and save the drafts there too.\n\nNo matter which strategy you pick, a chat with Alice is conceptually distinct from a chat with Bob , so it makes sense to give a key to the <Chat> tree based on the current recipient.", "source": "https://react.dev/learn/preserving-and-resetting-state", "category": "Preserving and Resetting State"}
{"instruction": "Show me a code example of Resetting state at the same position in React.", "input": "", "output": "By default, React preserves state of a component while it stays at the same position. Usually, this is exactly what you want, so it makes sense as the default behavior. But sometimes, you may want to reset a component\u2019s state. Consider this app that lets two players keep track of their scores during each turn:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionScoreboard(){const[isPlayerA,setIsPlayerA]=useState(true);return(<div>{isPlayerA?(<Counterperson=\"Taylor\"/>):(<Counterperson=\"Sarah\"/>)}<buttononClick={()=>{setIsPlayerA(!isPlayerA);}}>Next player!</button></div>);}functionCounter({person}){const[score,setScore]=useState(0);const[hover,setHover]=useState(false);letclassName='counter';if(hover){className+=' hover';}return(<divclassName={className}onPointerEnter={()=>setHover(true)}onPointerLeave={()=>setHover(false)}><h1>{person}'s score:{score}</h1><buttononClick={()=>setScore(score+1)}>Add one</button></div>);}\n```\n\n\nCurrently, when you change the player, the score is preserved. The two Counter s appear in the same position, so React sees them as the same Counter whose person prop has changed.\n\nBut conceptually, in this app they should be two separate counters. They might appear in the same place in the UI, but one is a counter for Taylor, and another is a counter for Sarah.\n\nThere are two ways to reset state when switching between them:\n\n1. Render components in different positions\n2. Give each component an explicit identity with key\n\n\n### Option 1: Rendering a component in different positions\n\n\nIf you want these two Counter s to be independent, you can render them in two different positions:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionScoreboard(){const[isPlayerA,setIsPlayerA]=useState(true);return(<div>{isPlayerA&&<Counterperson=\"Taylor\"/>}{!isPlayerA&&<Counterperson=\"Sarah\"/>}<buttononClick={()=>{setIsPlayerA(!isPlayerA);}}>Next player!</button></div>);}functionCounter({person}){const[score,setScore]=useState(0);const[hover,setHover]=useState(false);letclassName='counter';if(hover){className+=' hover';}return(<divclassName={className}onPointerEnter={()=>setHover(true)}onPointerLeave={()=>setHover(false)}><h1>{person}'s score:{score}</h1><buttononClick={()=>setScore(score+1)}>Add one</button></div>);}\n```\n\n\n* Initially, isPlayerA is true . So the first position contains Counter state, and the second one is empty.\n* When you click the \u201cNext player\u201d button the first position clears but the second one now contains a Counter .\n\nInitial state\n\nClicking \u201cnext\u201d\n\nClicking \u201cnext\u201d again\n\nEach Counter \u2019s state gets destroyed each time it\u2019s removed from the DOM. This is why they reset every time you click the button.\n\nThis solution is convenient when you only have a few independent components rendered in the same place. In this example, you only have two, so it\u2019s not a hassle to render both separately in the JSX.\n\n\n### Option 2: Resetting state with a key\n\n\nThere is also another, more generic, way to reset a component\u2019s state.\n\nYou might have seen key s when rendering lists. Keys aren\u2019t just for lists! You can use keys to make React distinguish between any components. By default, React uses order within the parent (\u201cfirst counter\u201d, \u201csecond counter\u201d) to discern between components. But keys let you tell React that this is not just a first counter, or a second counter, but a specific counter\u2014for example, Taylor\u2019s counter. This way, React will know Taylor\u2019s counter wherever it appears in the tree!\n\nIn this example, the two <Counter /> s don\u2019t share state even though they appear in the same place in JSX:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionScoreboard(){const[isPlayerA,setIsPlayerA]=useState(true);return(<div>{isPlayerA?(<Counterkey=\"Taylor\"person=\"Taylor\"/>):(<Counterkey=\"Sarah\"person=\"Sarah\"/>)}<buttononClick={()=>{setIsPlayerA(!isPlayerA);}}>Next player!</button></div>);}functionCounter({person}){const[score,setScore]=useState(0);const[hover,setHover]=useState(false);letclassName='counter';if(hover){className+=' hover';}return(<divclassName={className}onPointerEnter={()=>setHover(true)}onPointerLeave={()=>setHover(false)}><h1>{person}'s score:{score}</h1><buttononClick={()=>setScore(score+1)}>Add one</button></div>);}\n```\n\n\nSwitching between Taylor and Sarah does not preserve the state. This is because you gave them different key s:\n\n\n```javascript\n{isPlayerA?(<Counterkey=\"Taylor\"person=\"Taylor\"/>):(<Counterkey=\"Sarah\"person=\"Sarah\"/>)}\n```\n\n\nSpecifying a key tells React to use the key itself as part of the position, instead of their order within the parent. This is why, even though you render them in the same place in JSX, React sees them as two different counters, and so they will never share state. Every time a counter appears on the screen, its state is created. Every time it is removed, its state is destroyed. Toggling between them resets their state over and over.\n\n\n### Note\n\n\nRemember that keys are not globally unique. They only specify the position within the parent .\n\n\n### Resetting a form with a key\n\n\nResetting state with a key is particularly useful when dealing with forms.\n\nIn this chat app, the <Chat> component contains the text input state:\n\n\n```javascript\nimport{useState}from'react';importChatfrom'./Chat.js';importContactListfrom'./ContactList.js';exportdefaultfunctionMessenger(){const[to,setTo]=useState(contacts[0]);return(<div><ContactListcontacts={contacts}selectedContact={to}onSelect={contact=>setTo(contact)}/><Chatcontact={to}/></div>)}constcontacts=[{id:0,name:'Taylor',email:'taylor@mail.com'},{id:1,name:'Alice',email:'alice@mail.com'},{id:2,name:'Bob',email:'bob@mail.com'}];\n```\n\n\nTry entering something into the input, and then press \u201cAlice\u201d or \u201cBob\u201d to choose a different recipient. You will notice that the input state is preserved because the <Chat> is rendered at the same position in the tree.\n\nIn many apps, this may be the desired behavior, but not in a chat app! You don\u2019t want to let the user send a message they already typed to a wrong person due to an accidental click. To fix it, add a key :\n\n\n```javascript\n<Chatkey={to.id}contact={to}/>\n```\n\n\nThis ensures that when you select a different recipient, the Chat component will be recreated from scratch, including any state in the tree below it. React will also re-create the DOM elements instead of reusing them.\n\nNow switching the recipient always clears the text field:\n\n\n```javascript\nimport{useState}from'react';importChatfrom'./Chat.js';importContactListfrom'./ContactList.js';exportdefaultfunctionMessenger(){const[to,setTo]=useState(contacts[0]);return(<div><ContactListcontacts={contacts}selectedContact={to}onSelect={contact=>setTo(contact)}/><Chatkey={to.id}contact={to}/></div>)}constcontacts=[{id:0,name:'Taylor',email:'taylor@mail.com'},{id:1,name:'Alice',email:'alice@mail.com'},{id:2,name:'Bob',email:'bob@mail.com'}];\n```\n\n\nIn a real chat app, you\u2019d probably want to recover the input state when the user selects the previous recipient again. There are a few ways to keep the state \u201calive\u201d for a component that\u2019s no longer visible:\n\n* You could render all chats instead of just the current one, but hide all the others with CSS. The chats would not get removed from the tree, so their local state would be preserved. This solution works great for simple UIs. But it can get very slow if the hidden trees are large and contain a lot of DOM nodes.\n* You could lift the state up and hold the pending message for each recipient in the parent component. This way, when the child components get removed, it doesn\u2019t matter, because it\u2019s the parent that keeps the important information. This is the most common solution.\n* You might also use a different source in addition to React state. For example, you probably want a message draft to persist even if the user accidentally closes the page. To implement this, you could have the Chat component initialize its state by reading from the localStorage , and save the drafts there too.\n\nNo matter which strategy you pick, a chat with Alice is conceptually distinct from a chat with Bob , so it makes sense to give a key to the <Chat> tree based on the current recipient.", "source": "https://react.dev/learn/preserving-and-resetting-state", "category": "Preserving and Resetting State"}
{"instruction": "Can you describe React batches state updates in the context of React?", "input": "", "output": "You might expect that clicking the \u201c+3\u201d button will increment the counter three times because it calls setNumber(number + 1) three times:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionCounter(){const[number,setNumber]=useState(0);return(<><h1>{number}</h1><buttononClick={()=>{setNumber(number+1);setNumber(number+1);setNumber(number+1);}}>+3</button></>)}\n```\n\n\nHowever, as you might recall from the previous section, each render\u2019s state values are fixed , so the value of number inside the first render\u2019s event handler is always 0 , no matter how many times you call setNumber(1) :\n\n\n```javascript\nsetNumber(0+1);setNumber(0+1);setNumber(0+1);\n```\n\n\nBut there is one other factor at play here. React waits until all code in the event handlers has run before processing your state updates. This is why the re-render only happens after all these setNumber() calls.\n\nThis might remind you of a waiter taking an order at the restaurant. A waiter doesn\u2019t run to the kitchen at the mention of your first dish! Instead, they let you finish your order, let you make changes to it, and even take orders from other people at the table.\n\nIllustrated by Rachel Lee Nabors\n\nThis lets you update multiple state variables\u2014even from multiple components\u2014without triggering too many re-renders. But this also means that the UI won\u2019t be updated until after your event handler, and any code in it, completes. This behavior, also known as batching, makes your React app run much faster. It also avoids dealing with confusing \u201chalf-finished\u201d renders where only some of the variables have been updated.\n\nReact does not batch across multiple intentional events like clicks \u2014each click is handled separately. Rest assured that React only does batching when it\u2019s generally safe to do. This ensures that, for example, if the first button click disables a form, the second click would not submit it again.", "source": "https://react.dev/learn/queueing-a-series-of-state-updates", "category": "Queueing a Series of State Updates"}
{"instruction": "Show me a code example of React batches state updates in React.", "input": "", "output": "You might expect that clicking the \u201c+3\u201d button will increment the counter three times because it calls setNumber(number + 1) three times:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionCounter(){const[number,setNumber]=useState(0);return(<><h1>{number}</h1><buttononClick={()=>{setNumber(number+1);setNumber(number+1);setNumber(number+1);}}>+3</button></>)}\n```\n\n\nHowever, as you might recall from the previous section, each render\u2019s state values are fixed , so the value of number inside the first render\u2019s event handler is always 0 , no matter how many times you call setNumber(1) :\n\n\n```javascript\nsetNumber(0+1);setNumber(0+1);setNumber(0+1);\n```\n\n\nBut there is one other factor at play here. React waits until all code in the event handlers has run before processing your state updates. This is why the re-render only happens after all these setNumber() calls.\n\nThis might remind you of a waiter taking an order at the restaurant. A waiter doesn\u2019t run to the kitchen at the mention of your first dish! Instead, they let you finish your order, let you make changes to it, and even take orders from other people at the table.\n\nIllustrated by Rachel Lee Nabors\n\nThis lets you update multiple state variables\u2014even from multiple components\u2014without triggering too many re-renders. But this also means that the UI won\u2019t be updated until after your event handler, and any code in it, completes. This behavior, also known as batching, makes your React app run much faster. It also avoids dealing with confusing \u201chalf-finished\u201d renders where only some of the variables have been updated.\n\nReact does not batch across multiple intentional events like clicks \u2014each click is handled separately. Rest assured that React only does batching when it\u2019s generally safe to do. This ensures that, for example, if the first button click disables a form, the second click would not submit it again.", "source": "https://react.dev/learn/queueing-a-series-of-state-updates", "category": "Queueing a Series of State Updates"}
{"instruction": "What is Updating the same state multiple times before the next render in React and how does it work?", "input": "", "output": "It is an uncommon use case, but if you would like to update the same state variable multiple times before the next render, instead of passing the next state value like setNumber(number + 1) , you can pass a function that calculates the next state based on the previous one in the queue, like setNumber(n => n + 1) . It is a way to tell React to \u201cdo something with the state value\u201d instead of just replacing it.\n\nTry incrementing the counter now:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionCounter(){const[number,setNumber]=useState(0);return(<><h1>{number}</h1><buttononClick={()=>{setNumber(n=>n+1);setNumber(n=>n+1);setNumber(n=>n+1);}}>+3</button></>)}\n```\n\n\nHere, n => n + 1 is called an updater function. When you pass it to a state setter:\n\n1. React queues this function to be processed after all the other code in the event handler has run.\n2. During the next render, React goes through the queue and gives you the final updated state.\n\n\n```javascript\nsetNumber(n=>n+1);setNumber(n=>n+1);setNumber(n=>n+1);\n```\n\n\nHere\u2019s how React works through these lines of code while executing the event handler:\n\n1. setNumber(n => n + 1) : n => n + 1 is a function. React adds it to a queue.\n2. setNumber(n => n + 1) : n => n + 1 is a function. React adds it to a queue.\n3. setNumber(n => n + 1) : n => n + 1 is a function. React adds it to a queue.\n\nWhen you call useState during the next render, React goes through the queue. The previous number state was 0 , so that\u2019s what React passes to the first updater function as the n argument. Then React takes the return value of your previous updater function and passes it to the next updater as n , and so on:\n\nReact stores 3 as the final result and returns it from useState .\n\nThis is why clicking \u201c+3\u201d in the above example correctly increments the value by 3.\n\n\n### What happens if you update state after replacing it\n\n\nWhat about this event handler? What do you think number will be in the next render?\n\n\n```javascript\n<buttononClick={()=>{setNumber(number+5);setNumber(n=>n+1);}}>\n```\n\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionCounter(){const[number,setNumber]=useState(0);return(<><h1>{number}</h1><buttononClick={()=>{setNumber(number+5);setNumber(n=>n+1);}}>Increase the number</button></>)}\n```\n\n\nHere\u2019s what this event handler tells React to do:\n\n1. setNumber(number + 5) : number is 0 , so setNumber(0 + 5) . React adds \u201creplace with 5 \u201d to its queue.\n2. setNumber(n => n + 1) : n => n + 1 is an updater function. React adds that function to its queue.\n\nDuring the next render, React goes through the state queue:\n\nReact stores 6 as the final result and returns it from useState .\n\n\n### Note\n\n\nYou may have noticed that setState(5) actually works like setState(n => 5) , but n is unused!\n\n\n### What happens if you replace state after updating it\n\n\nLet\u2019s try one more example. What do you think number will be in the next render?\n\n\n```javascript\n<buttononClick={()=>{setNumber(number+5);setNumber(n=>n+1);setNumber(42);}}>\n```\n\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionCounter(){const[number,setNumber]=useState(0);return(<><h1>{number}</h1><buttononClick={()=>{setNumber(number+5);setNumber(n=>n+1);setNumber(42);}}>Increase the number</button></>)}\n```\n\n\nHere\u2019s how React works through these lines of code while executing this event handler:\n\n1. setNumber(number + 5) : number is 0 , so setNumber(0 + 5) . React adds \u201creplace with 5 \u201d to its queue.\n2. setNumber(n => n + 1) : n => n + 1 is an updater function. React adds that function to its queue.\n3. setNumber(42) : React adds \u201creplace with 42 \u201d to its queue.\n\nDuring the next render, React goes through the state queue:\n\nThen React stores 42 as the final result and returns it from useState .\n\nTo summarize, here\u2019s how you can think of what you\u2019re passing to the setNumber state setter:\n\n* An updater function (e.g. n => n + 1 ) gets added to the queue.\n* Any other value (e.g. number 5 ) adds \u201creplace with 5 \u201d to the queue, ignoring what\u2019s already queued.\n\nAfter the event handler completes, React will trigger a re-render. During the re-render, React will process the queue. Updater functions run during rendering, so updater functions must be pure and only return the result. Don\u2019t try to set state from inside of them or run other side effects. In Strict Mode, React will run each updater function twice (but discard the second result) to help you find mistakes.\n\n\n### Naming conventions\n\n\nIt\u2019s common to name the updater function argument by the first letters of the corresponding state variable:\n\n\n```javascript\nsetEnabled(e=>!e);setLastName(ln=>ln.reverse());setFriendCount(fc=>fc*2);\n```\n\n\nIf you prefer more verbose code, another common convention is to repeat the full state variable name, like setEnabled(enabled => !enabled) , or to use a prefix like setEnabled(prevEnabled => !prevEnabled) .", "source": "https://react.dev/learn/queueing-a-series-of-state-updates", "category": "Queueing a Series of State Updates"}
{"instruction": "Show me a code example of Updating the same state multiple times before the next render in React.", "input": "", "output": "It is an uncommon use case, but if you would like to update the same state variable multiple times before the next render, instead of passing the next state value like setNumber(number + 1) , you can pass a function that calculates the next state based on the previous one in the queue, like setNumber(n => n + 1) . It is a way to tell React to \u201cdo something with the state value\u201d instead of just replacing it.\n\nTry incrementing the counter now:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionCounter(){const[number,setNumber]=useState(0);return(<><h1>{number}</h1><buttononClick={()=>{setNumber(n=>n+1);setNumber(n=>n+1);setNumber(n=>n+1);}}>+3</button></>)}\n```\n\n\nHere, n => n + 1 is called an updater function. When you pass it to a state setter:\n\n1. React queues this function to be processed after all the other code in the event handler has run.\n2. During the next render, React goes through the queue and gives you the final updated state.\n\n\n```javascript\nsetNumber(n=>n+1);setNumber(n=>n+1);setNumber(n=>n+1);\n```\n\n\nHere\u2019s how React works through these lines of code while executing the event handler:\n\n1. setNumber(n => n + 1) : n => n + 1 is a function. React adds it to a queue.\n2. setNumber(n => n + 1) : n => n + 1 is a function. React adds it to a queue.\n3. setNumber(n => n + 1) : n => n + 1 is a function. React adds it to a queue.\n\nWhen you call useState during the next render, React goes through the queue. The previous number state was 0 , so that\u2019s what React passes to the first updater function as the n argument. Then React takes the return value of your previous updater function and passes it to the next updater as n , and so on:\n\nReact stores 3 as the final result and returns it from useState .\n\nThis is why clicking \u201c+3\u201d in the above example correctly increments the value by 3.\n\n\n### What happens if you update state after replacing it\n\n\nWhat about this event handler? What do you think number will be in the next render?\n\n\n```javascript\n<buttononClick={()=>{setNumber(number+5);setNumber(n=>n+1);}}>\n```\n\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionCounter(){const[number,setNumber]=useState(0);return(<><h1>{number}</h1><buttononClick={()=>{setNumber(number+5);setNumber(n=>n+1);}}>Increase the number</button></>)}\n```\n\n\nHere\u2019s what this event handler tells React to do:\n\n1. setNumber(number + 5) : number is 0 , so setNumber(0 + 5) . React adds \u201creplace with 5 \u201d to its queue.\n2. setNumber(n => n + 1) : n => n + 1 is an updater function. React adds that function to its queue.\n\nDuring the next render, React goes through the state queue:\n\nReact stores 6 as the final result and returns it from useState .\n\n\n### Note\n\n\nYou may have noticed that setState(5) actually works like setState(n => 5) , but n is unused!\n\n\n### What happens if you replace state after updating it\n\n\nLet\u2019s try one more example. What do you think number will be in the next render?\n\n\n```javascript\n<buttononClick={()=>{setNumber(number+5);setNumber(n=>n+1);setNumber(42);}}>\n```\n\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionCounter(){const[number,setNumber]=useState(0);return(<><h1>{number}</h1><buttononClick={()=>{setNumber(number+5);setNumber(n=>n+1);setNumber(42);}}>Increase the number</button></>)}\n```\n\n\nHere\u2019s how React works through these lines of code while executing this event handler:\n\n1. setNumber(number + 5) : number is 0 , so setNumber(0 + 5) . React adds \u201creplace with 5 \u201d to its queue.\n2. setNumber(n => n + 1) : n => n + 1 is an updater function. React adds that function to its queue.\n3. setNumber(42) : React adds \u201creplace with 42 \u201d to its queue.\n\nDuring the next render, React goes through the state queue:\n\nThen React stores 42 as the final result and returns it from useState .\n\nTo summarize, here\u2019s how you can think of what you\u2019re passing to the setNumber state setter:\n\n* An updater function (e.g. n => n + 1 ) gets added to the queue.\n* Any other value (e.g. number 5 ) adds \u201creplace with 5 \u201d to the queue, ignoring what\u2019s already queued.\n\nAfter the event handler completes, React will trigger a re-render. During the re-render, React will process the queue. Updater functions run during rendering, so updater functions must be pure and only return the result. Don\u2019t try to set state from inside of them or run other side effects. In Strict Mode, React will run each updater function twice (but discard the second result) to help you find mistakes.\n\n\n### Naming conventions\n\n\nIt\u2019s common to name the updater function argument by the first letters of the corresponding state variable:\n\n\n```javascript\nsetEnabled(e=>!e);setLastName(ln=>ln.reverse());setFriendCount(fc=>fc*2);\n```\n\n\nIf you prefer more verbose code, another common convention is to repeat the full state variable name, like setEnabled(enabled => !enabled) , or to use a prefix like setEnabled(prevEnabled => !prevEnabled) .", "source": "https://react.dev/learn/queueing-a-series-of-state-updates", "category": "Queueing a Series of State Updates"}
{"instruction": "Explain the concept of Introduction in React.", "input": "", "output": "Learn what React Compiler does and how it automatically optimizes your React application by handling memoization for you, eliminating the need for manual useMemo , useCallback , and React.memo .", "source": "https://react.dev/learn/react-compiler", "category": "React Compiler"}
{"instruction": "Can you describe Installation in the context of React?", "input": "", "output": "Get started with installing React Compiler and learn how to configure it with your build tools.", "source": "https://react.dev/learn/react-compiler", "category": "React Compiler"}
{"instruction": "What is Incremental Adoption in React and how does it work?", "input": "", "output": "Learn strategies for gradually adopting React Compiler in your existing codebase if you\u2019re not ready to enable it everywhere yet.", "source": "https://react.dev/learn/react-compiler", "category": "React Compiler"}
{"instruction": "What is Debugging and Troubleshooting in React and how does it work?", "input": "", "output": "When things don\u2019t work as expected, use our debugging guide to understand the difference between compiler errors and runtime issues, identify common breaking patterns, and follow a systematic debugging workflow.", "source": "https://react.dev/learn/react-compiler", "category": "React Compiler"}
{"instruction": "Tell me about Configuration and Reference.", "input": "", "output": "For detailed configuration options and API reference:\n\n* Configuration Options - All compiler configuration options including React version compatibility\n* Directives - Function-level compilation control\n* Compiling Libraries - Shipping pre-compiled libraries", "source": "https://react.dev/learn/react-compiler", "category": "React Compiler"}
{"instruction": "What is Additional resources in React and how does it work?", "input": "", "output": "In addition to these docs, we recommend checking the React Compiler Working Group for additional information and discussion about the compiler.", "source": "https://react.dev/learn/react-compiler", "category": "React Compiler"}
{"instruction": "What is the process for Understanding Compiler Behavior in a React component?", "input": "", "output": "React Compiler is designed to handle code that follows the Rules of React . When it encounters code that might break these rules, it safely skips optimization rather than risk changing your app\u2019s behavior.\n\n\n### Compiler Errors vs Runtime Issues\n\n\nCompiler errors occur at build time and prevent your code from compiling. These are rare because the compiler is designed to skip problematic code rather than fail.\n\nRuntime issues occur when compiled code behaves differently than expected. Most of the time, if you encounter an issue with React Compiler, it\u2019s a runtime issue. This typically happens when your code violates the Rules of React in subtle ways that the compiler couldn\u2019t detect, and the compiler mistakenly compiled a component it should have skipped.\n\nWhen debugging runtime issues, focus your efforts on finding Rules of React violations in the affected components that were not detected by the ESLint rule. The compiler relies on your code following these rules, and when they\u2019re broken in ways it can\u2019t detect, that\u2019s when runtime problems occur.", "source": "https://react.dev/learn/react-compiler/debugging", "category": "Debugging and Troubleshooting"}
{"instruction": "What is the process for Common Breaking Patterns in a React component?", "input": "", "output": "One of the main ways React Compiler can break your app is if your code was written to rely on memoization for correctness. This means your app depends on specific values being memoized to work properly. Since the compiler may memoize differently than your manual approach, this can lead to unexpected behavior like effects over-firing, infinite loops, or missing updates.\n\nCommon scenarios where this occurs:\n\n* Effects that rely on referential equality - When effects depend on objects or arrays maintaining the same reference across renders\n* Dependency arrays that need stable references - When unstable dependencies cause effects to fire too often or create infinite loops\n* Conditional logic based on reference checks - When code uses referential equality checks for caching or optimization", "source": "https://react.dev/learn/react-compiler/debugging", "category": "Debugging and Troubleshooting"}
{"instruction": "What is Debugging Workflow in React and how does it work?", "input": "", "output": "Follow these steps when you encounter issues:\n\n\n### Compiler Build Errors\n\n\nIf you encounter a compiler error that unexpectedly breaks your build, this is likely a bug in the compiler. Report it to the facebook/react repository with:\n\n* The error message\n* The code that caused the error\n* Your React and compiler versions\n\n\n### Runtime Issues\n\n\nFor runtime behavior issues:\n\n\n### 1. Temporarily Disable Compilation\n\n\nUse \"use no memo\" to isolate whether an issue is compiler-related:\n\n\n```javascript\nfunctionProblematicComponent(){\"use no memo\";// Skip compilation for this component// ... rest of component}\n```\n\n\nIf the issue disappears, it\u2019s likely related to a Rules of React violation.\n\nYou can also try removing manual memoization (useMemo, useCallback, memo) from the problematic component to verify that your app works correctly without any memoization. If the bug still occurs when all memoization is removed, you have a Rules of React violation that needs to be fixed.\n\n\n### 2. Fix Issues Step by Step\n\n\n1. Identify the root cause (often memoization-for-correctness)\n2. Test after each fix\n3. Remove \"use no memo\" once fixed\n4. Verify the component shows the \u2728 badge in React DevTools", "source": "https://react.dev/learn/react-compiler/debugging", "category": "Debugging and Troubleshooting"}
{"instruction": "Show me a code example of Debugging Workflow in React.", "input": "", "output": "Follow these steps when you encounter issues:\n\n\n### Compiler Build Errors\n\n\nIf you encounter a compiler error that unexpectedly breaks your build, this is likely a bug in the compiler. Report it to the facebook/react repository with:\n\n* The error message\n* The code that caused the error\n* Your React and compiler versions\n\n\n### Runtime Issues\n\n\nFor runtime behavior issues:\n\n\n### 1. Temporarily Disable Compilation\n\n\nUse \"use no memo\" to isolate whether an issue is compiler-related:\n\n\n```javascript\nfunctionProblematicComponent(){\"use no memo\";// Skip compilation for this component// ... rest of component}\n```\n\n\nIf the issue disappears, it\u2019s likely related to a Rules of React violation.\n\nYou can also try removing manual memoization (useMemo, useCallback, memo) from the problematic component to verify that your app works correctly without any memoization. If the bug still occurs when all memoization is removed, you have a Rules of React violation that needs to be fixed.\n\n\n### 2. Fix Issues Step by Step\n\n\n1. Identify the root cause (often memoization-for-correctness)\n2. Test after each fix\n3. Remove \"use no memo\" once fixed\n4. Verify the component shows the \u2728 badge in React DevTools", "source": "https://react.dev/learn/react-compiler/debugging", "category": "Debugging and Troubleshooting"}
{"instruction": "Can you describe Reporting Compiler Bugs in the context of React?", "input": "", "output": "If you believe you\u2019ve found a compiler bug:\n\n1. Verify it\u2019s not a Rules of React violation - Check with ESLint\n2. Create a minimal reproduction - Isolate the issue in a small example\n3. Test without the compiler - Confirm the issue only occurs with compilation\n4. File an issue : React and compiler versions Minimal reproduction code Expected vs actual behavior Any error messages\n\n* React and compiler versions\n* Minimal reproduction code\n* Expected vs actual behavior\n* Any error messages", "source": "https://react.dev/learn/react-compiler/debugging", "category": "Debugging and Troubleshooting"}
{"instruction": "Can you describe Why Incremental Adoption? in the context of React?", "input": "", "output": "React Compiler is designed to optimize your entire codebase automatically, but you don\u2019t have to adopt it all at once. Incremental adoption gives you control over the rollout process, letting you test the compiler on small parts of your app before expanding to the rest.\n\nStarting small helps you build confidence in the compiler\u2019s optimizations. You can verify that your app behaves correctly with compiled code, measure performance improvements, and identify any edge cases specific to your codebase. This approach is especially valuable for production applications where stability is critical.\n\nIncremental adoption also makes it easier to address any Rules of React violations the compiler might find. Instead of fixing violations across your entire codebase at once, you can tackle them systematically as you expand compiler coverage. This keeps the migration manageable and reduces the risk of introducing bugs.\n\nBy controlling which parts of your code get compiled, you can also run A/B tests to measure the real-world impact of the compiler\u2019s optimizations. This data helps you make informed decisions about full adoption and demonstrates the value to your team.", "source": "https://react.dev/learn/react-compiler/incremental-adoption", "category": "Incremental Adoption"}
{"instruction": "Explain the concept of Approaches to Incremental Adoption in React.", "input": "", "output": "There are three main approaches to adopt React Compiler incrementally:\n\n1. Babel overrides - Apply the compiler to specific directories\n2. Opt-in with \u201cuse memo\u201d - Only compile components that explicitly opt in\n3. Runtime gating - Control compilation with feature flags\n\nAll approaches allow you to test the compiler on specific parts of your application before full rollout.", "source": "https://react.dev/learn/react-compiler/incremental-adoption", "category": "Incremental Adoption"}
{"instruction": "What is Directory-Based Adoption with Babel Overrides in React and how does it work?", "input": "", "output": "Babel\u2019s overrides option lets you apply different plugins to different parts of your codebase. This is ideal for gradually adopting React Compiler directory by directory.\n\n\n### Basic Configuration\n\n\nStart by applying the compiler to a specific directory:\n\n\n```javascript\n// babel.config.jsmodule.exports={plugins:[// Global plugins that apply to all files],overrides:[{test:'./src/modern/**/*.{js,jsx,ts,tsx}',plugins:['babel-plugin-react-compiler']}]};\n```\n\n\n\n### Expanding Coverage\n\n\nAs you gain confidence, add more directories:\n\n\n```javascript\n// babel.config.jsmodule.exports={plugins:[// Global plugins],overrides:[{test:['./src/modern/**/*.{js,jsx,ts,tsx}','./src/features/**/*.{js,jsx,ts,tsx}'],plugins:['babel-plugin-react-compiler']},{test:'./src/legacy/**/*.{js,jsx,ts,tsx}',plugins:[// Different plugins for legacy code]}]};\n```\n\n\n\n### With Compiler Options\n\n\nYou can also configure compiler options per override:\n\n\n```javascript\n// babel.config.jsmodule.exports={plugins:[],overrides:[{test:'./src/experimental/**/*.{js,jsx,ts,tsx}',plugins:[['babel-plugin-react-compiler',{// options ...}]]},{test:'./src/production/**/*.{js,jsx,ts,tsx}',plugins:[['babel-plugin-react-compiler',{// options ...}]]}]};\n```\n", "source": "https://react.dev/learn/react-compiler/incremental-adoption", "category": "Incremental Adoption"}
{"instruction": "Show me a code example of Directory-Based Adoption with Babel Overrides in React.", "input": "", "output": "Babel\u2019s overrides option lets you apply different plugins to different parts of your codebase. This is ideal for gradually adopting React Compiler directory by directory.\n\n\n### Basic Configuration\n\n\nStart by applying the compiler to a specific directory:\n\n\n```javascript\n// babel.config.jsmodule.exports={plugins:[// Global plugins that apply to all files],overrides:[{test:'./src/modern/**/*.{js,jsx,ts,tsx}',plugins:['babel-plugin-react-compiler']}]};\n```\n\n\n\n### Expanding Coverage\n\n\nAs you gain confidence, add more directories:\n\n\n```javascript\n// babel.config.jsmodule.exports={plugins:[// Global plugins],overrides:[{test:['./src/modern/**/*.{js,jsx,ts,tsx}','./src/features/**/*.{js,jsx,ts,tsx}'],plugins:['babel-plugin-react-compiler']},{test:'./src/legacy/**/*.{js,jsx,ts,tsx}',plugins:[// Different plugins for legacy code]}]};\n```\n\n\n\n### With Compiler Options\n\n\nYou can also configure compiler options per override:\n\n\n```javascript\n// babel.config.jsmodule.exports={plugins:[],overrides:[{test:'./src/experimental/**/*.{js,jsx,ts,tsx}',plugins:[['babel-plugin-react-compiler',{// options ...}]]},{test:'./src/production/**/*.{js,jsx,ts,tsx}',plugins:[['babel-plugin-react-compiler',{// options ...}]]}]};\n```\n", "source": "https://react.dev/learn/react-compiler/incremental-adoption", "category": "Incremental Adoption"}
{"instruction": "Tell me about Opt-in Mode with \u201cuse memo\u201d.", "input": "", "output": "For maximum control, you can use compilationMode: 'annotation' to only compile components and hooks that explicitly opt in with the \"use memo\" directive.\n\n\n### Note\n\n\nThis approach gives you fine-grained control over individual components and hooks. It\u2019s useful when you want to test the compiler on specific components without affecting entire directories.\n\n\n### Annotation Mode Configuration\n\n\n\n```javascript\n// babel.config.jsmodule.exports={plugins:[['babel-plugin-react-compiler',{compilationMode:'annotation',}],],};\n```\n\n\n\n### Using the Directive\n\n\nAdd \"use memo\" at the beginning of functions you want to compile:\n\n\n```javascript\nfunctionTodoList({todos}){\"use memo\";// Opt this component into compilationconstsortedTodos=todos.slice().sort();return(<ul>{sortedTodos.map(todo=>(<TodoItemkey={todo.id}todo={todo}/>))}</ul>);}functionuseSortedData(data){\"use memo\";// Opt this hook into compilationreturndata.slice().sort();}\n```\n\n\nWith compilationMode: 'annotation' , you must:\n\n* Add \"use memo\" to every component you want optimized\n* Add \"use memo\" to every custom hook\n* Remember to add it to new components\n\nThis gives you precise control over which components are compiled while you evaluate the compiler\u2019s impact.", "source": "https://react.dev/learn/react-compiler/incremental-adoption", "category": "Incremental Adoption"}
{"instruction": "Show me a code example of Opt-in Mode with \u201cuse memo\u201d in React.", "input": "", "output": "For maximum control, you can use compilationMode: 'annotation' to only compile components and hooks that explicitly opt in with the \"use memo\" directive.\n\n\n### Note\n\n\nThis approach gives you fine-grained control over individual components and hooks. It\u2019s useful when you want to test the compiler on specific components without affecting entire directories.\n\n\n### Annotation Mode Configuration\n\n\n\n```javascript\n// babel.config.jsmodule.exports={plugins:[['babel-plugin-react-compiler',{compilationMode:'annotation',}],],};\n```\n\n\n\n### Using the Directive\n\n\nAdd \"use memo\" at the beginning of functions you want to compile:\n\n\n```javascript\nfunctionTodoList({todos}){\"use memo\";// Opt this component into compilationconstsortedTodos=todos.slice().sort();return(<ul>{sortedTodos.map(todo=>(<TodoItemkey={todo.id}todo={todo}/>))}</ul>);}functionuseSortedData(data){\"use memo\";// Opt this hook into compilationreturndata.slice().sort();}\n```\n\n\nWith compilationMode: 'annotation' , you must:\n\n* Add \"use memo\" to every component you want optimized\n* Add \"use memo\" to every custom hook\n* Remember to add it to new components\n\nThis gives you precise control over which components are compiled while you evaluate the compiler\u2019s impact.", "source": "https://react.dev/learn/react-compiler/incremental-adoption", "category": "Incremental Adoption"}
{"instruction": "What is Runtime Feature Flags with Gating in React and how does it work?", "input": "", "output": "The gating option enables you to control compilation at runtime using feature flags. This is useful for running A/B tests or gradually rolling out the compiler based on user segments.\n\n\n### How Gating Works\n\n\nThe compiler wraps optimized code in a runtime check. If the gate returns true , the optimized version runs. Otherwise, the original code runs.\n\n\n### Gating Configuration\n\n\n\n```javascript\n// babel.config.jsmodule.exports={plugins:[['babel-plugin-react-compiler',{gating:{source:'ReactCompilerFeatureFlags',importSpecifierName:'isCompilerEnabled',},}],],};\n```\n\n\n\n### Implementing the Feature Flag\n\n\nCreate a module that exports your gating function:\n\n\n```javascript\n// ReactCompilerFeatureFlags.jsexportfunctionisCompilerEnabled(){// Use your feature flag systemreturngetFeatureFlag('react-compiler-enabled');}\n```\n", "source": "https://react.dev/learn/react-compiler/incremental-adoption", "category": "Incremental Adoption"}
{"instruction": "Show me a code example of Runtime Feature Flags with Gating in React.", "input": "", "output": "The gating option enables you to control compilation at runtime using feature flags. This is useful for running A/B tests or gradually rolling out the compiler based on user segments.\n\n\n### How Gating Works\n\n\nThe compiler wraps optimized code in a runtime check. If the gate returns true , the optimized version runs. Otherwise, the original code runs.\n\n\n### Gating Configuration\n\n\n\n```javascript\n// babel.config.jsmodule.exports={plugins:[['babel-plugin-react-compiler',{gating:{source:'ReactCompilerFeatureFlags',importSpecifierName:'isCompilerEnabled',},}],],};\n```\n\n\n\n### Implementing the Feature Flag\n\n\nCreate a module that exports your gating function:\n\n\n```javascript\n// ReactCompilerFeatureFlags.jsexportfunctionisCompilerEnabled(){// Use your feature flag systemreturngetFeatureFlag('react-compiler-enabled');}\n```\n", "source": "https://react.dev/learn/react-compiler/incremental-adoption", "category": "Incremental Adoption"}
{"instruction": "What is the process for Troubleshooting Adoption in a React component?", "input": "", "output": "If you encounter issues during adoption:\n\n1. Use \"use no memo\" to temporarily exclude problematic components\n2. Check the debugging guide for common issues\n3. Fix Rules of React violations identified by the ESLint plugin\n4. Consider using compilationMode: 'annotation' for more gradual adoption", "source": "https://react.dev/learn/react-compiler/incremental-adoption", "category": "Incremental Adoption"}
{"instruction": "Tell me about Prerequisites.", "input": "", "output": "React Compiler is designed to work best with React 19, but it also supports React 17 and 18. Learn more about React version compatibility .\n\n\n### Note\n\n\nReact Compiler is currently in RC. Install it using the @rc tag to get the latest release candidate version.", "source": "https://react.dev/learn/react-compiler/installation", "category": "Installation"}
{"instruction": "Tell me about Installation.", "input": "", "output": "Install React Compiler as a devDependency :\n\nOr with Yarn:\n\nOr with pnpm:", "source": "https://react.dev/learn/react-compiler/installation", "category": "Installation"}
{"instruction": "Explain the concept of Basic Setup in React.", "input": "", "output": "React Compiler is designed to work by default without any configuration. However, if you need to configure it in special circumstances (for example, to target React versions below 19), refer to the compiler options reference .\n\nThe setup process depends on your build tool. React Compiler includes a Babel plugin that integrates with your build pipeline.\n\n\n### Pitfall\n\n\nReact Compiler must run first in your Babel plugin pipeline. The compiler needs the original source information for proper analysis, so it must process your code before other transformations.\n\n\n### Babel\n\n\nCreate or update your babel.config.js :\n\n\n```javascript\nmodule.exports={plugins:['babel-plugin-react-compiler',// must run first!// ... other plugins],// ... other config};\n```\n\n\n\n### Vite\n\n\nIf you use Vite, you can add the plugin to vite-plugin-react:\n\n\n```javascript\n// vite.config.jsimport{defineConfig}from'vite';importreactfrom'@vitejs/plugin-react';exportdefaultdefineConfig({plugins:[react({babel:{plugins:['babel-plugin-react-compiler'],},}),],});\n```\n\n\nAlternatively, if you prefer a separate Babel plugin for Vite:\n\n\n```javascript\n// vite.config.jsimportbabelfrom'vite-plugin-babel';import{defineConfig}from'vite';importreactfrom'@vitejs/plugin-react';exportdefaultdefineConfig({plugins:[react(),babel({babelConfig:{plugins:['babel-plugin-react-compiler'],},}),],});\n```\n\n\n\n### Next.js\n\n\nPlease refer to the Next.js docs for more information.\n\n\n### React Router\n\n\nInstall vite-plugin-babel , and add the compiler\u2019s Babel plugin to it:\n\n\n```javascript\n// vite.config.jsimport{defineConfig}from\"vite\";importbabelfrom\"vite-plugin-babel\";import{reactRouter}from\"@react-router/dev/vite\";constReactCompilerConfig={/* ... */};exportdefaultdefineConfig({plugins:[reactRouter(),babel({filter:/\\.[jt]sx?$/,babelConfig:{presets:[\"@babel/preset-typescript\"],// if you use TypeScriptplugins:[[\"babel-plugin-react-compiler\",ReactCompilerConfig],],},}),],});\n```\n\n\n\n### Webpack\n\n\nA community webpack loader is now available here .\n\n\n### Expo\n\n\nPlease refer to Expo\u2019s docs to enable and use the React Compiler in Expo apps.\n\n\n### Metro (React Native)\n\n\nReact Native uses Babel via Metro, so refer to the Usage with Babel section for installation instructions.\n\n\n### Rspack\n\n\nPlease refer to Rspack\u2019s docs to enable and use the React Compiler in Rspack apps.\n\n\n### Rsbuild\n\n\nPlease refer to Rsbuild\u2019s docs to enable and use the React Compiler in Rsbuild apps.", "source": "https://react.dev/learn/react-compiler/installation", "category": "Installation"}
{"instruction": "Show me a code example of Basic Setup in React.", "input": "", "output": "React Compiler is designed to work by default without any configuration. However, if you need to configure it in special circumstances (for example, to target React versions below 19), refer to the compiler options reference .\n\nThe setup process depends on your build tool. React Compiler includes a Babel plugin that integrates with your build pipeline.\n\n\n### Pitfall\n\n\nReact Compiler must run first in your Babel plugin pipeline. The compiler needs the original source information for proper analysis, so it must process your code before other transformations.\n\n\n### Babel\n\n\nCreate or update your babel.config.js :\n\n\n```javascript\nmodule.exports={plugins:['babel-plugin-react-compiler',// must run first!// ... other plugins],// ... other config};\n```\n\n\n\n### Vite\n\n\nIf you use Vite, you can add the plugin to vite-plugin-react:\n\n\n```javascript\n// vite.config.jsimport{defineConfig}from'vite';importreactfrom'@vitejs/plugin-react';exportdefaultdefineConfig({plugins:[react({babel:{plugins:['babel-plugin-react-compiler'],},}),],});\n```\n\n\nAlternatively, if you prefer a separate Babel plugin for Vite:\n\n\n```javascript\n// vite.config.jsimportbabelfrom'vite-plugin-babel';import{defineConfig}from'vite';importreactfrom'@vitejs/plugin-react';exportdefaultdefineConfig({plugins:[react(),babel({babelConfig:{plugins:['babel-plugin-react-compiler'],},}),],});\n```\n\n\n\n### Next.js\n\n\nPlease refer to the Next.js docs for more information.\n\n\n### React Router\n\n\nInstall vite-plugin-babel , and add the compiler\u2019s Babel plugin to it:\n\n\n```javascript\n// vite.config.jsimport{defineConfig}from\"vite\";importbabelfrom\"vite-plugin-babel\";import{reactRouter}from\"@react-router/dev/vite\";constReactCompilerConfig={/* ... */};exportdefaultdefineConfig({plugins:[reactRouter(),babel({filter:/\\.[jt]sx?$/,babelConfig:{presets:[\"@babel/preset-typescript\"],// if you use TypeScriptplugins:[[\"babel-plugin-react-compiler\",ReactCompilerConfig],],},}),],});\n```\n\n\n\n### Webpack\n\n\nA community webpack loader is now available here .\n\n\n### Expo\n\n\nPlease refer to Expo\u2019s docs to enable and use the React Compiler in Expo apps.\n\n\n### Metro (React Native)\n\n\nReact Native uses Babel via Metro, so refer to the Usage with Babel section for installation instructions.\n\n\n### Rspack\n\n\nPlease refer to Rspack\u2019s docs to enable and use the React Compiler in Rspack apps.\n\n\n### Rsbuild\n\n\nPlease refer to Rsbuild\u2019s docs to enable and use the React Compiler in Rsbuild apps.", "source": "https://react.dev/learn/react-compiler/installation", "category": "Installation"}
{"instruction": "Can you describe ESLint Integration in the context of React?", "input": "", "output": "React Compiler includes an ESLint rule that helps identify code that can\u2019t be optimized. When the ESLint rule reports an error, it means the compiler will skip optimizing that specific component or hook. This is safe: the compiler will continue optimizing other parts of your codebase. You don\u2019t need to fix all violations immediately. Address them at your own pace to gradually increase the number of optimized components.\n\nInstall the ESLint plugin:\n\nThen enable the compiler rule in your ESLint configuration:\n\n\n```javascript\n// .eslintrc.jsmodule.exports={rules:{'react-hooks/react-compiler':'error',},};\n```\n\n\nThe ESLint rule will:\n\n* Identify violations of the Rules of React\n* Show which components can\u2019t be optimized\n* Provide helpful error messages for fixing issues", "source": "https://react.dev/learn/react-compiler/installation", "category": "Installation"}
{"instruction": "Show me a code example of ESLint Integration in React.", "input": "", "output": "React Compiler includes an ESLint rule that helps identify code that can\u2019t be optimized. When the ESLint rule reports an error, it means the compiler will skip optimizing that specific component or hook. This is safe: the compiler will continue optimizing other parts of your codebase. You don\u2019t need to fix all violations immediately. Address them at your own pace to gradually increase the number of optimized components.\n\nInstall the ESLint plugin:\n\nThen enable the compiler rule in your ESLint configuration:\n\n\n```javascript\n// .eslintrc.jsmodule.exports={rules:{'react-hooks/react-compiler':'error',},};\n```\n\n\nThe ESLint rule will:\n\n* Identify violations of the Rules of React\n* Show which components can\u2019t be optimized\n* Provide helpful error messages for fixing issues", "source": "https://react.dev/learn/react-compiler/installation", "category": "Installation"}
{"instruction": "Can you describe Verify Your Setup in the context of React?", "input": "", "output": "After installation, verify that React Compiler is working correctly.\n\n\n### Check React DevTools\n\n\nComponents optimized by React Compiler will show a \u201cMemo \u2728\u201d badge in React DevTools:\n\n1. Install the React Developer Tools browser extension\n2. Open your app in development mode\n3. Open React DevTools\n4. Look for the \u2728 emoji next to component names\n\nIf the compiler is working:\n\n* Components will show a \u201cMemo \u2728\u201d badge in React DevTools\n* Expensive calculations will be automatically memoized\n* No manual useMemo is required\n\n\n### Check Build Output\n\n\nYou can also verify the compiler is running by checking your build output. The compiled code will include automatic memoization logic that the compiler adds automatically.\n\n\n```javascript\nimport{cas_c}from\"react/compiler-runtime\";exportdefaultfunctionMyApp(){const$=_c(1);lett0;if($[0]===Symbol.for(\"react.memo_cache_sentinel\")){t0=<div>Hello World</div>;$[0]=t0;}else{t0=$[0];}returnt0;}\n```\n", "source": "https://react.dev/learn/react-compiler/installation", "category": "Installation"}
{"instruction": "Show me a code example of Verify Your Setup in React.", "input": "", "output": "After installation, verify that React Compiler is working correctly.\n\n\n### Check React DevTools\n\n\nComponents optimized by React Compiler will show a \u201cMemo \u2728\u201d badge in React DevTools:\n\n1. Install the React Developer Tools browser extension\n2. Open your app in development mode\n3. Open React DevTools\n4. Look for the \u2728 emoji next to component names\n\nIf the compiler is working:\n\n* Components will show a \u201cMemo \u2728\u201d badge in React DevTools\n* Expensive calculations will be automatically memoized\n* No manual useMemo is required\n\n\n### Check Build Output\n\n\nYou can also verify the compiler is running by checking your build output. The compiled code will include automatic memoization logic that the compiler adds automatically.\n\n\n```javascript\nimport{cas_c}from\"react/compiler-runtime\";exportdefaultfunctionMyApp(){const$=_c(1);lett0;if($[0]===Symbol.for(\"react.memo_cache_sentinel\")){t0=<div>Hello World</div>;$[0]=t0;}else{t0=$[0];}returnt0;}\n```\n", "source": "https://react.dev/learn/react-compiler/installation", "category": "Installation"}
{"instruction": "Can you describe Troubleshooting in the context of React?", "input": "", "output": "\n### Opting out specific components\n\n\nIf a component is causing issues after compilation, you can temporarily opt it out using the \"use no memo\" directive:\n\n\n```javascript\nfunctionProblematicComponent(){\"use no memo\";// Component code here}\n```\n\n\nThis tells the compiler to skip optimization for this specific component. You should fix the underlying issue and remove the directive once resolved.\n\nFor more troubleshooting help, see the debugging guide .", "source": "https://react.dev/learn/react-compiler/installation", "category": "Installation"}
{"instruction": "Show me a code example of Troubleshooting in React.", "input": "", "output": "\n### Opting out specific components\n\n\nIf a component is causing issues after compilation, you can temporarily opt it out using the \"use no memo\" directive:\n\n\n```javascript\nfunctionProblematicComponent(){\"use no memo\";// Component code here}\n```\n\n\nThis tells the compiler to skip optimization for this specific component. You should fix the underlying issue and remove the directive once resolved.\n\nFor more troubleshooting help, see the debugging guide .", "source": "https://react.dev/learn/react-compiler/installation", "category": "Installation"}
{"instruction": "Explain the concept of What does React Compiler do? in React.", "input": "", "output": "React Compiler automatically optimizes your React application at build time. React is often fast enough without optimization, but sometimes you need to manually memoize components and values to keep your app responsive. This manual memoization is tedious, easy to get wrong, and adds extra code to maintain. React Compiler does this optimization automatically for you, freeing you from this mental burden so you can focus on building features.\n\n\n### Before React Compiler\n\n\nWithout the compiler, you need to manually memoize components and values to optimize re-renders:\n\n\n```javascript\nimport{useMemo,useCallback,memo}from'react';constExpensiveComponent=memo(functionExpensiveComponent({data,onClick}){constprocessedData=useMemo(()=>{returnexpensiveProcessing(data);},[data]);consthandleClick=useCallback((item)=>{onClick(item.id);},[onClick]);return(<div>{processedData.map(item=>(<Itemkey={item.id}onClick={()=>handleClick(item)}/>))}</div>);});\n```\n\n\n\n### After React Compiler\n\n\nWith React Compiler, you write the same code without manual memoization:\n\n\n```javascript\nfunctionExpensiveComponent({data,onClick}){constprocessedData=expensiveProcessing(data);consthandleClick=(item)=>{onClick(item.id);};return(<div>{processedData.map(item=>(<Itemkey={item.id}onClick={()=>handleClick(item)}/>))}</div>);}\n```\n\n\nSee this example in the React Compiler Playground\n\nReact Compiler automatically applies the equivalent optimizations, ensuring your app only re-renders when necessary.\n\nReact Compiler\u2019s automatic memoization is primarily focused on improving update performance (re-rendering existing components), so it focuses on these two use cases:\n\n1. Skipping cascading re-rendering of components Re-rendering <Parent /> causes many components in its component tree to re-render, even though only <Parent /> has changed\n2. Skipping expensive calculations from outside of React For example, calling expensivelyProcessAReallyLargeArrayOfObjects() inside of your component or hook that needs that data\n\n* Re-rendering <Parent /> causes many components in its component tree to re-render, even though only <Parent /> has changed\n\n* For example, calling expensivelyProcessAReallyLargeArrayOfObjects() inside of your component or hook that needs that data\n\nReact lets you express your UI as a function of their current state (more concretely: their props, state, and context). In its current implementation, when a component\u2019s state changes, React will re-render that component and all of its children \u2014 unless you have applied some form of manual memoization with useMemo() , useCallback() , or React.memo() . For example, in the following example, <MessageButton> will re-render whenever <FriendList> \u2019s state changes:\n\n\n```javascript\nfunctionFriendList({friends}){constonlineCount=useFriendOnlineCount();if(friends.length===0){return<NoFriends/>;}return(<div><span>{onlineCount}online</span>{friends.map((friend)=>(<FriendListCardkey={friend.id}friend={friend}/>))}<MessageButton/></div>);}\n```\n\n\nSee this example in the React Compiler Playground\n\nReact Compiler automatically applies the equivalent of manual memoization, ensuring that only the relevant parts of an app re-render as state changes, which is sometimes referred to as \u201cfine-grained reactivity\u201d. In the above example, React Compiler determines that the return value of <FriendListCard /> can be reused even as friends changes, and can avoid recreating this JSX and avoid re-rendering <MessageButton> as the count changes.\n\nReact Compiler can also automatically memoize expensive calculations used during rendering:\n\n\n```javascript\n// **Not** memoized by React Compiler, since this is not a component or hookfunctionexpensivelyProcessAReallyLargeArrayOfObjects(){/* ... */}// Memoized by React Compiler since this is a componentfunctionTableContainer({items}){// This function call would be memoized:constdata=expensivelyProcessAReallyLargeArrayOfObjects(items);// ...}\n```\n\n\nSee this example in the React Compiler Playground\n\nHowever, if expensivelyProcessAReallyLargeArrayOfObjects is truly an expensive function, you may want to consider implementing its own memoization outside of React, because:\n\n* React Compiler only memoizes React components and hooks, not every function\n* React Compiler\u2019s memoization is not shared across multiple components or hooks\n\nSo if expensivelyProcessAReallyLargeArrayOfObjects was used in many different components, even if the same exact items were passed down, that expensive calculation would be run repeatedly. We recommend profiling first to see if it really is that expensive before making code more complicated.", "source": "https://react.dev/learn/react-compiler/introduction", "category": "Introduction"}
{"instruction": "Show me a code example of What does React Compiler do? in React.", "input": "", "output": "React Compiler automatically optimizes your React application at build time. React is often fast enough without optimization, but sometimes you need to manually memoize components and values to keep your app responsive. This manual memoization is tedious, easy to get wrong, and adds extra code to maintain. React Compiler does this optimization automatically for you, freeing you from this mental burden so you can focus on building features.\n\n\n### Before React Compiler\n\n\nWithout the compiler, you need to manually memoize components and values to optimize re-renders:\n\n\n```javascript\nimport{useMemo,useCallback,memo}from'react';constExpensiveComponent=memo(functionExpensiveComponent({data,onClick}){constprocessedData=useMemo(()=>{returnexpensiveProcessing(data);},[data]);consthandleClick=useCallback((item)=>{onClick(item.id);},[onClick]);return(<div>{processedData.map(item=>(<Itemkey={item.id}onClick={()=>handleClick(item)}/>))}</div>);});\n```\n\n\n\n### After React Compiler\n\n\nWith React Compiler, you write the same code without manual memoization:\n\n\n```javascript\nfunctionExpensiveComponent({data,onClick}){constprocessedData=expensiveProcessing(data);consthandleClick=(item)=>{onClick(item.id);};return(<div>{processedData.map(item=>(<Itemkey={item.id}onClick={()=>handleClick(item)}/>))}</div>);}\n```\n\n\nSee this example in the React Compiler Playground\n\nReact Compiler automatically applies the equivalent optimizations, ensuring your app only re-renders when necessary.\n\nReact Compiler\u2019s automatic memoization is primarily focused on improving update performance (re-rendering existing components), so it focuses on these two use cases:\n\n1. Skipping cascading re-rendering of components Re-rendering <Parent /> causes many components in its component tree to re-render, even though only <Parent /> has changed\n2. Skipping expensive calculations from outside of React For example, calling expensivelyProcessAReallyLargeArrayOfObjects() inside of your component or hook that needs that data\n\n* Re-rendering <Parent /> causes many components in its component tree to re-render, even though only <Parent /> has changed\n\n* For example, calling expensivelyProcessAReallyLargeArrayOfObjects() inside of your component or hook that needs that data\n\nReact lets you express your UI as a function of their current state (more concretely: their props, state, and context). In its current implementation, when a component\u2019s state changes, React will re-render that component and all of its children \u2014 unless you have applied some form of manual memoization with useMemo() , useCallback() , or React.memo() . For example, in the following example, <MessageButton> will re-render whenever <FriendList> \u2019s state changes:\n\n\n```javascript\nfunctionFriendList({friends}){constonlineCount=useFriendOnlineCount();if(friends.length===0){return<NoFriends/>;}return(<div><span>{onlineCount}online</span>{friends.map((friend)=>(<FriendListCardkey={friend.id}friend={friend}/>))}<MessageButton/></div>);}\n```\n\n\nSee this example in the React Compiler Playground\n\nReact Compiler automatically applies the equivalent of manual memoization, ensuring that only the relevant parts of an app re-render as state changes, which is sometimes referred to as \u201cfine-grained reactivity\u201d. In the above example, React Compiler determines that the return value of <FriendListCard /> can be reused even as friends changes, and can avoid recreating this JSX and avoid re-rendering <MessageButton> as the count changes.\n\nReact Compiler can also automatically memoize expensive calculations used during rendering:\n\n\n```javascript\n// **Not** memoized by React Compiler, since this is not a component or hookfunctionexpensivelyProcessAReallyLargeArrayOfObjects(){/* ... */}// Memoized by React Compiler since this is a componentfunctionTableContainer({items}){// This function call would be memoized:constdata=expensivelyProcessAReallyLargeArrayOfObjects(items);// ...}\n```\n\n\nSee this example in the React Compiler Playground\n\nHowever, if expensivelyProcessAReallyLargeArrayOfObjects is truly an expensive function, you may want to consider implementing its own memoization outside of React, because:\n\n* React Compiler only memoizes React components and hooks, not every function\n* React Compiler\u2019s memoization is not shared across multiple components or hooks\n\nSo if expensivelyProcessAReallyLargeArrayOfObjects was used in many different components, even if the same exact items were passed down, that expensive calculation would be run repeatedly. We recommend profiling first to see if it really is that expensive before making code more complicated.", "source": "https://react.dev/learn/react-compiler/introduction", "category": "Introduction"}
{"instruction": "Tell me about Should I try out the compiler?.", "input": "", "output": "We encourage everyone to start using React Compiler. While the compiler is still an optional addition to React today, in the future some features may require the compiler in order to fully work.\n\n\n### Is it safe to use?\n\n\nReact Compiler is now in RC and has been tested extensively in production. While it has been used in production at companies like Meta, rolling out the compiler to production for your app will depend on the health of your codebase and how well you\u2019ve followed the Rules of React .", "source": "https://react.dev/learn/react-compiler/introduction", "category": "Introduction"}
{"instruction": "Explain the concept of What build tools are supported? in React.", "input": "", "output": "React Compiler can be installed across several build tools such as Babel, Vite, Metro, and Rsbuild.\n\nReact Compiler is primarily a light Babel plugin wrapper around the core compiler, which was designed to be decoupled from Babel itself. While the initial stable version of the compiler will remain primarily a Babel plugin, we are working with the swc and oxc teams to build first class support for React Compiler so you won\u2019t have to add Babel back to your build pipelines in the future.\n\nNext.js users can enable the swc-invoked React Compiler by using v15.3.1 and up.", "source": "https://react.dev/learn/react-compiler/introduction", "category": "Introduction"}
{"instruction": "Tell me about What should I do about useMemo, useCallback, and React.memo?.", "input": "", "output": "If you are using React Compiler, useMemo , useCallback , and React.memo can be removed. React Compiler adds automatic memoization more precisely and granularly than is possible with these hooks. If you choose to keep manual memoization, React Compiler will analyze them and determine if your manual memoization matches its automatically inferred memoization. If there isn\u2019t a match, the compiler will choose to bail out of optimizing that component.\n\nThis is done out of caution as a common anti-pattern with manual memoization is using it for correctness.  This means your app depends on specific values being memoized to work properly. For example, in order to prevent an infinite loop, you may have memoized some values to stop a useEffect call from firing. This breaks the Rules of React, but since it can potentially be dangerous for the compiler to automatically remove manual memoization, the compiler will just bail out instead. You should manually remove your handwritten memoization and verify that your app still works as expected.", "source": "https://react.dev/learn/react-compiler/introduction", "category": "Introduction"}
{"instruction": "Can you describe Try React Compiler in the context of React?", "input": "", "output": "This section will help you get started with React Compiler and understand how to use it effectively in your projects.\n\n* Installation - Install React Compiler and configure it for your build tools\n* React Version Compatibility - Support for React 17, 18, and 19\n* Configuration - Customize the compiler for your specific needs\n* Incremental Adoption - Strategies for gradually rolling out the compiler in existing codebases\n* Debugging and Troubleshooting - Identify and fix issues when using the compiler\n* Compiling Libraries - Best practices for shipping compiled code\n* API Reference - Detailed documentation of all configuration options", "source": "https://react.dev/learn/react-compiler/introduction", "category": "Introduction"}
{"instruction": "What is Additional resources in React and how does it work?", "input": "", "output": "In addition to these docs, we recommend checking the React Compiler Working Group for additional information and discussion about the compiler.", "source": "https://react.dev/learn/react-compiler/introduction", "category": "Introduction"}
{"instruction": "Tell me about Browser extension.", "input": "", "output": "The easiest way to debug websites built with React is to install the React Developer Tools browser extension. It is available for several popular browsers:\n\n* Install for Chrome\n* Install for Firefox\n* Install for Edge\n\nNow, if you visit a website built with React, you will see the Components and Profiler panels.\n\n\n### Safari and other browsers\n\n\nFor other browsers (for example, Safari), install the react-devtools npm package:\n\n\n```javascript\n#Yarnyarnglobaladdreact-devtools#Npmnpminstall-greact-devtools\n```\n\n\nNext open the developer tools from the terminal:\n\n\n```javascript\nreact-devtools\n```\n\n\nThen connect your website by adding the following <script> tag to the beginning of your website\u2019s <head> :\n\n\n```javascript\n<html><head><scriptsrc=\"http://localhost:8097\"></script>\n```\n\n\nReload your website in the browser now to view it in developer tools.", "source": "https://react.dev/learn/react-developer-tools", "category": "React Developer Tools"}
{"instruction": "Show me a code example of Browser extension in React.", "input": "", "output": "The easiest way to debug websites built with React is to install the React Developer Tools browser extension. It is available for several popular browsers:\n\n* Install for Chrome\n* Install for Firefox\n* Install for Edge\n\nNow, if you visit a website built with React, you will see the Components and Profiler panels.\n\n\n### Safari and other browsers\n\n\nFor other browsers (for example, Safari), install the react-devtools npm package:\n\n\n```javascript\n#Yarnyarnglobaladdreact-devtools#Npmnpminstall-greact-devtools\n```\n\n\nNext open the developer tools from the terminal:\n\n\n```javascript\nreact-devtools\n```\n\n\nThen connect your website by adding the following <script> tag to the beginning of your website\u2019s <head> :\n\n\n```javascript\n<html><head><scriptsrc=\"http://localhost:8097\"></script>\n```\n\n\nReload your website in the browser now to view it in developer tools.", "source": "https://react.dev/learn/react-developer-tools", "category": "React Developer Tools"}
{"instruction": "What is Mobile (React Native) in React and how does it work?", "input": "", "output": "To inspect apps built with React Native , you can use React Native DevTools , the built-in debugger that deeply integrates React Developer Tools. All features work identically to the browser extension, including native element highlighting and selection.\n\nLearn more about debugging in React Native.\n\n> For versions of React Native earlier than 0.76, please use the standalone build of React DevTools by following the Safari and other browsers guide above.\n\nFor versions of React Native earlier than 0.76, please use the standalone build of React DevTools by following the Safari and other browsers guide above.", "source": "https://react.dev/learn/react-developer-tools", "category": "React Developer Tools"}
{"instruction": "Tell me about How declarative UI compares to imperative.", "input": "", "output": "When you design UI interactions, you probably think about how the UI changes in response to user actions. Consider a form that lets the user submit an answer:\n\n* When you type something into the form, the \u201cSubmit\u201d button becomes enabled.\n* When you press \u201cSubmit\u201d, both the form and the button become disabled, and a spinner appears.\n* If the network request succeeds, the form gets hidden, and the \u201cThank you\u201d message appears.\n* If the network request fails, an error message appears, and the form becomes enabled again.\n\nIn imperative programming, the above corresponds directly to how you implement interaction. You have to write the exact instructions to manipulate the UI depending on what just happened. Here\u2019s another way to think about this: imagine riding next to someone in a car and telling them turn by turn where to go.\n\nIllustrated by Rachel Lee Nabors\n\nThey don\u2019t know where you want to go, they just follow your commands. (And if you get the directions wrong, you end up in the wrong place!) It\u2019s called imperative because you have to \u201ccommand\u201d each element, from the spinner to the button, telling the computer how to update the UI.\n\nIn this example of imperative UI programming, the form is built without React. It only uses the browser DOM :\n\n\n```javascript\nasyncfunctionhandleFormSubmit(e){e.preventDefault();disable(textarea);disable(button);show(loadingMessage);hide(errorMessage);try{awaitsubmitForm(textarea.value);show(successMessage);hide(form);}catch(err){show(errorMessage);errorMessage.textContent=err.message;}finally{hide(loadingMessage);enable(textarea);enable(button);}}functionhandleTextareaChange(){if(textarea.value.length===0){disable(button);}else{enable(button);}}functionhide(el){el.style.display='none';}functionshow(el){el.style.display='';}functionenable(el){el.disabled=false;}functiondisable(el){el.disabled=true;}functionsubmitForm(answer){// Pretend it's hitting the network.returnnewPromise((resolve,reject)=>{setTimeout(()=>{if(answer.toLowerCase()==='istanbul'){resolve();}else{reject(newError('Good guess but a wrong answer. Try again!'));}},1500);});}letform=document.getElementById('form');lettextarea=document.getElementById('textarea');letbutton=document.getElementById('button');letloadingMessage=document.getElementById('loading');leterrorMessage=document.getElementById('error');letsuccessMessage=document.getElementById('success');form.onsubmit=handleFormSubmit;textarea.oninput=handleTextareaChange;\n```\n\n\nManipulating the UI imperatively works well enough for isolated examples, but it gets exponentially more difficult to manage in more complex systems. Imagine updating a page full of different forms like this one. Adding a new UI element or a new interaction would require carefully checking all existing code to make sure you haven\u2019t introduced a bug (for example, forgetting to show or hide something).\n\nReact was built to solve this problem.\n\nIn React, you don\u2019t directly manipulate the UI\u2014meaning you don\u2019t enable, disable, show, or hide components directly. Instead, you declare what you want to show, and React figures out how to update the UI. Think of getting into a taxi and telling the driver where you want to go instead of telling them exactly where to turn. It\u2019s the driver\u2019s job to get you there, and they might even know some shortcuts you haven\u2019t considered!\n\nIllustrated by Rachel Lee Nabors", "source": "https://react.dev/learn/reacting-to-input-with-state", "category": "Reacting to Input with State"}
{"instruction": "Show me a code example of How declarative UI compares to imperative in React.", "input": "", "output": "When you design UI interactions, you probably think about how the UI changes in response to user actions. Consider a form that lets the user submit an answer:\n\n* When you type something into the form, the \u201cSubmit\u201d button becomes enabled.\n* When you press \u201cSubmit\u201d, both the form and the button become disabled, and a spinner appears.\n* If the network request succeeds, the form gets hidden, and the \u201cThank you\u201d message appears.\n* If the network request fails, an error message appears, and the form becomes enabled again.\n\nIn imperative programming, the above corresponds directly to how you implement interaction. You have to write the exact instructions to manipulate the UI depending on what just happened. Here\u2019s another way to think about this: imagine riding next to someone in a car and telling them turn by turn where to go.\n\nIllustrated by Rachel Lee Nabors\n\nThey don\u2019t know where you want to go, they just follow your commands. (And if you get the directions wrong, you end up in the wrong place!) It\u2019s called imperative because you have to \u201ccommand\u201d each element, from the spinner to the button, telling the computer how to update the UI.\n\nIn this example of imperative UI programming, the form is built without React. It only uses the browser DOM :\n\n\n```javascript\nasyncfunctionhandleFormSubmit(e){e.preventDefault();disable(textarea);disable(button);show(loadingMessage);hide(errorMessage);try{awaitsubmitForm(textarea.value);show(successMessage);hide(form);}catch(err){show(errorMessage);errorMessage.textContent=err.message;}finally{hide(loadingMessage);enable(textarea);enable(button);}}functionhandleTextareaChange(){if(textarea.value.length===0){disable(button);}else{enable(button);}}functionhide(el){el.style.display='none';}functionshow(el){el.style.display='';}functionenable(el){el.disabled=false;}functiondisable(el){el.disabled=true;}functionsubmitForm(answer){// Pretend it's hitting the network.returnnewPromise((resolve,reject)=>{setTimeout(()=>{if(answer.toLowerCase()==='istanbul'){resolve();}else{reject(newError('Good guess but a wrong answer. Try again!'));}},1500);});}letform=document.getElementById('form');lettextarea=document.getElementById('textarea');letbutton=document.getElementById('button');letloadingMessage=document.getElementById('loading');leterrorMessage=document.getElementById('error');letsuccessMessage=document.getElementById('success');form.onsubmit=handleFormSubmit;textarea.oninput=handleTextareaChange;\n```\n\n\nManipulating the UI imperatively works well enough for isolated examples, but it gets exponentially more difficult to manage in more complex systems. Imagine updating a page full of different forms like this one. Adding a new UI element or a new interaction would require carefully checking all existing code to make sure you haven\u2019t introduced a bug (for example, forgetting to show or hide something).\n\nReact was built to solve this problem.\n\nIn React, you don\u2019t directly manipulate the UI\u2014meaning you don\u2019t enable, disable, show, or hide components directly. Instead, you declare what you want to show, and React figures out how to update the UI. Think of getting into a taxi and telling the driver where you want to go instead of telling them exactly where to turn. It\u2019s the driver\u2019s job to get you there, and they might even know some shortcuts you haven\u2019t considered!\n\nIllustrated by Rachel Lee Nabors", "source": "https://react.dev/learn/reacting-to-input-with-state", "category": "Reacting to Input with State"}
{"instruction": "Can you describe Thinking about UI declaratively in the context of React?", "input": "", "output": "You\u2019ve seen how to implement a form imperatively above. To better understand how to think in React, you\u2019ll walk through reimplementing this UI in React below:\n\n1. Identify your component\u2019s different visual states\n2. Determine what triggers those state changes\n3. Represent the state in memory using useState\n4. Remove any non-essential state variables\n5. Connect the event handlers to set the state\n\n\n### Step 1: Identify your component\u2019s different visual states\n\n\nIn computer science, you may hear about a \u201cstate machine\u201d being in one of several \u201cstates\u201d. If you work with a designer, you may have seen mockups for different \u201cvisual states\u201d. React stands at the intersection of design and computer science, so both of these ideas are sources of inspiration.\n\nFirst, you need to visualize all the different \u201cstates\u201d of the UI the user might see:\n\n* Empty : Form has a disabled \u201cSubmit\u201d button.\n* Typing : Form has an enabled \u201cSubmit\u201d button.\n* Submitting : Form is completely disabled. Spinner is shown.\n* Success : \u201cThank you\u201d message is shown instead of a form.\n* Error : Same as Typing state, but with an extra error message.\n\nJust like a designer, you\u2019ll want to \u201cmock up\u201d or create \u201cmocks\u201d for the different states before you add logic. For example, here is a mock for just the visual part of the form. This mock is controlled by a prop called status with a default value of 'empty' :\n\n\n```javascript\nexportdefaultfunctionForm({status='empty'}){if(status==='success'){return<h1>That's right!</h1>}return(<><h2>City quiz</h2><p>In which city is there a billboard that turns air into drinkable water?</p><form><textarea/><br/><button>Submit</button></form></>)}\n```\n\n\nYou could call that prop anything you like, the naming is not important. Try editing status = 'empty' to status = 'success' to see the success message appear. Mocking lets you quickly iterate on the UI before you wire up any logic. Here is a more fleshed out prototype of the same component, still \u201ccontrolled\u201d by the status prop:\n\n\n```javascript\nexportdefaultfunctionForm({// Try 'submitting', 'error', 'success':status='empty'}){if(status==='success'){return<h1>That's right!</h1>}return(<><h2>City quiz</h2><p>In which city is there a billboard that turns air into drinkable water?</p><form><textareadisabled={status==='submitting'}/><br/><buttondisabled={status==='empty'||status==='submitting'}>Submit</button>{status==='error'&&<pclassName=\"Error\">Good guess but a wrong answer. Try again!</p>}</form></>);}\n```\n\n\nIf a component has a lot of visual states, it can be convenient to show them all on one page:\n\n\n```javascript\nimportFormfrom'./Form.js';letstatuses=['empty','typing','submitting','success','error',];exportdefaultfunctionApp(){return(<>{statuses.map(status=>(<sectionkey={status}><h4>Form ({status}):</h4><Formstatus={status}/></section>))}</>);}\n```\n\n\nPages like this are often called \u201cliving styleguides\u201d or \u201cstorybooks\u201d.\n\n\n### Step 2: Determine what triggers those state changes\n\n\nYou can trigger state updates in response to two kinds of inputs:\n\n* Human inputs, like clicking a button, typing in a field, navigating a link.\n* Computer inputs, like a network response arriving, a timeout completing, an image loading.\n\nIllustrated by Rachel Lee Nabors\n\nIn both cases, you must set state variables to update the UI. For the form you\u2019re developing, you will need to change state in response to a few different inputs:\n\n* Changing the text input (human) should switch it from the Empty state to the Typing state or back, depending on whether the text box is empty or not.\n* Clicking the Submit button (human) should switch it to the Submitting state.\n* Successful network response (computer) should switch it to the Success state.\n* Failed network response (computer) should switch it to the Error state with the matching error message.\n\n\n### Note\n\n\nNotice that human inputs often require event handlers !\n\nTo help visualize this flow, try drawing each state on paper as a labeled circle, and each change between two states as an arrow. You can sketch out many flows this way and sort out bugs long before implementation.\n\nForm states\n\n\n### Step 3: Represent the state in memory withuseState\n\n\nNext you\u2019ll need to represent the visual states of your component in memory with useState . Simplicity is key: each piece of state is a \u201cmoving piece\u201d, and you want as few \u201cmoving pieces\u201d as possible. More complexity leads to more bugs!\n\nStart with the state that absolutely must be there. For example, you\u2019ll need to store the answer for the input, and the error (if it exists) to store the last error:\n\n\n```javascript\nconst[answer,setAnswer]=useState('');const[error,setError]=useState(null);\n```\n\n\nThen, you\u2019ll need a state variable representing which one of the visual states that you want to display. There\u2019s usually more than a single way to represent that in memory, so you\u2019ll need to experiment with it.\n\nIf you struggle to think of the best way immediately, start by adding enough state that you\u2019re definitely sure that all the possible visual states are covered:\n\n\n```javascript\nconst[isEmpty,setIsEmpty]=useState(true);const[isTyping,setIsTyping]=useState(false);const[isSubmitting,setIsSubmitting]=useState(false);const[isSuccess,setIsSuccess]=useState(false);const[isError,setIsError]=useState(false);\n```\n\n\nYour first idea likely won\u2019t be the best, but that\u2019s ok\u2014refactoring state is a part of the process!\n\n\n### Step 4: Remove any non-essential state variables\n\n\nYou want to avoid duplication in the state content so you\u2019re only tracking what is essential. Spending a little time on refactoring your state structure will make your components easier to understand, reduce duplication, and avoid unintended meanings. Your goal is to prevent the cases where the state in memory doesn\u2019t represent any valid UI that you\u2019d want a user to see. (For example, you never want to show an error message and disable the input at the same time, or the user won\u2019t be able to correct the error!)\n\nHere are some questions you can ask about your state variables:\n\n* Does this state cause a paradox? For example, isTyping and isSubmitting can\u2019t both be true . A paradox usually means that the state is not constrained enough. There are four possible combinations of two booleans, but only three correspond to valid states. To remove the \u201cimpossible\u201d state, you can combine these into a status that must be one of three values: 'typing' , 'submitting' , or 'success' .\n* Is the same information available in another state variable already? Another paradox: isEmpty and isTyping can\u2019t be true at the same time. By making them separate state variables, you risk them going out of sync and causing bugs. Fortunately, you can remove isEmpty and instead check answer.length === 0 .\n* Can you get the same information from the inverse of another state variable? isError is not needed because you can check error !== null instead.\n\nAfter this clean-up, you\u2019re left with 3 (down from 7!) essential state variables:\n\n\n```javascript\nconst[answer,setAnswer]=useState('');const[error,setError]=useState(null);const[status,setStatus]=useState('typing');// 'typing', 'submitting', or 'success'\n```\n\n\nYou know they are essential, because you can\u2019t remove any of them without breaking the functionality.\n\nThese three variables are a good enough representation of this form\u2019s state. However, there are still some intermediate states that don\u2019t fully make sense. For example, a non-null error doesn\u2019t make sense when status is 'success' . To model the state more precisely, you can extract it into a reducer. Reducers let you unify multiple state variables into a single object and consolidate all the related logic!\n\n\n### Step 5: Connect the event handlers to set state\n\n\nLastly, create event handlers that update the state. Below is the final form, with all event handlers wired up:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[answer,setAnswer]=useState('');const[error,setError]=useState(null);const[status,setStatus]=useState('typing');if(status==='success'){return<h1>That's right!</h1>}asyncfunctionhandleSubmit(e){e.preventDefault();setStatus('submitting');try{awaitsubmitForm(answer);setStatus('success');}catch(err){setStatus('typing');setError(err);}}functionhandleTextareaChange(e){setAnswer(e.target.value);}return(<><h2>City quiz</h2><p>In which city is there a billboard that turns air into drinkable water?</p><formonSubmit={handleSubmit}><textareavalue={answer}onChange={handleTextareaChange}disabled={status==='submitting'}/><br/><buttondisabled={answer.length===0||status==='submitting'}>Submit</button>{error!==null&&<pclassName=\"Error\">{error.message}</p>}</form></>);}functionsubmitForm(answer){// Pretend it's hitting the network.returnnewPromise((resolve,reject)=>{setTimeout(()=>{letshouldError=answer.toLowerCase()!=='lima'if(shouldError){reject(newError('Good guess but a wrong answer. Try again!'));}else{resolve();}},1500);});}\n```\n\n\nAlthough this code is longer than the original imperative example, it is much less fragile. Expressing all interactions as state changes lets you later introduce new visual states without breaking existing ones. It also lets you change what should be displayed in each state without changing the logic of the interaction itself.", "source": "https://react.dev/learn/reacting-to-input-with-state", "category": "Reacting to Input with State"}
{"instruction": "Show me a code example of Thinking about UI declaratively in React.", "input": "", "output": "You\u2019ve seen how to implement a form imperatively above. To better understand how to think in React, you\u2019ll walk through reimplementing this UI in React below:\n\n1. Identify your component\u2019s different visual states\n2. Determine what triggers those state changes\n3. Represent the state in memory using useState\n4. Remove any non-essential state variables\n5. Connect the event handlers to set the state\n\n\n### Step 1: Identify your component\u2019s different visual states\n\n\nIn computer science, you may hear about a \u201cstate machine\u201d being in one of several \u201cstates\u201d. If you work with a designer, you may have seen mockups for different \u201cvisual states\u201d. React stands at the intersection of design and computer science, so both of these ideas are sources of inspiration.\n\nFirst, you need to visualize all the different \u201cstates\u201d of the UI the user might see:\n\n* Empty : Form has a disabled \u201cSubmit\u201d button.\n* Typing : Form has an enabled \u201cSubmit\u201d button.\n* Submitting : Form is completely disabled. Spinner is shown.\n* Success : \u201cThank you\u201d message is shown instead of a form.\n* Error : Same as Typing state, but with an extra error message.\n\nJust like a designer, you\u2019ll want to \u201cmock up\u201d or create \u201cmocks\u201d for the different states before you add logic. For example, here is a mock for just the visual part of the form. This mock is controlled by a prop called status with a default value of 'empty' :\n\n\n```javascript\nexportdefaultfunctionForm({status='empty'}){if(status==='success'){return<h1>That's right!</h1>}return(<><h2>City quiz</h2><p>In which city is there a billboard that turns air into drinkable water?</p><form><textarea/><br/><button>Submit</button></form></>)}\n```\n\n\nYou could call that prop anything you like, the naming is not important. Try editing status = 'empty' to status = 'success' to see the success message appear. Mocking lets you quickly iterate on the UI before you wire up any logic. Here is a more fleshed out prototype of the same component, still \u201ccontrolled\u201d by the status prop:\n\n\n```javascript\nexportdefaultfunctionForm({// Try 'submitting', 'error', 'success':status='empty'}){if(status==='success'){return<h1>That's right!</h1>}return(<><h2>City quiz</h2><p>In which city is there a billboard that turns air into drinkable water?</p><form><textareadisabled={status==='submitting'}/><br/><buttondisabled={status==='empty'||status==='submitting'}>Submit</button>{status==='error'&&<pclassName=\"Error\">Good guess but a wrong answer. Try again!</p>}</form></>);}\n```\n\n\nIf a component has a lot of visual states, it can be convenient to show them all on one page:\n\n\n```javascript\nimportFormfrom'./Form.js';letstatuses=['empty','typing','submitting','success','error',];exportdefaultfunctionApp(){return(<>{statuses.map(status=>(<sectionkey={status}><h4>Form ({status}):</h4><Formstatus={status}/></section>))}</>);}\n```\n\n\nPages like this are often called \u201cliving styleguides\u201d or \u201cstorybooks\u201d.\n\n\n### Step 2: Determine what triggers those state changes\n\n\nYou can trigger state updates in response to two kinds of inputs:\n\n* Human inputs, like clicking a button, typing in a field, navigating a link.\n* Computer inputs, like a network response arriving, a timeout completing, an image loading.\n\nIllustrated by Rachel Lee Nabors\n\nIn both cases, you must set state variables to update the UI. For the form you\u2019re developing, you will need to change state in response to a few different inputs:\n\n* Changing the text input (human) should switch it from the Empty state to the Typing state or back, depending on whether the text box is empty or not.\n* Clicking the Submit button (human) should switch it to the Submitting state.\n* Successful network response (computer) should switch it to the Success state.\n* Failed network response (computer) should switch it to the Error state with the matching error message.\n\n\n### Note\n\n\nNotice that human inputs often require event handlers !\n\nTo help visualize this flow, try drawing each state on paper as a labeled circle, and each change between two states as an arrow. You can sketch out many flows this way and sort out bugs long before implementation.\n\nForm states\n\n\n### Step 3: Represent the state in memory withuseState\n\n\nNext you\u2019ll need to represent the visual states of your component in memory with useState . Simplicity is key: each piece of state is a \u201cmoving piece\u201d, and you want as few \u201cmoving pieces\u201d as possible. More complexity leads to more bugs!\n\nStart with the state that absolutely must be there. For example, you\u2019ll need to store the answer for the input, and the error (if it exists) to store the last error:\n\n\n```javascript\nconst[answer,setAnswer]=useState('');const[error,setError]=useState(null);\n```\n\n\nThen, you\u2019ll need a state variable representing which one of the visual states that you want to display. There\u2019s usually more than a single way to represent that in memory, so you\u2019ll need to experiment with it.\n\nIf you struggle to think of the best way immediately, start by adding enough state that you\u2019re definitely sure that all the possible visual states are covered:\n\n\n```javascript\nconst[isEmpty,setIsEmpty]=useState(true);const[isTyping,setIsTyping]=useState(false);const[isSubmitting,setIsSubmitting]=useState(false);const[isSuccess,setIsSuccess]=useState(false);const[isError,setIsError]=useState(false);\n```\n\n\nYour first idea likely won\u2019t be the best, but that\u2019s ok\u2014refactoring state is a part of the process!\n\n\n### Step 4: Remove any non-essential state variables\n\n\nYou want to avoid duplication in the state content so you\u2019re only tracking what is essential. Spending a little time on refactoring your state structure will make your components easier to understand, reduce duplication, and avoid unintended meanings. Your goal is to prevent the cases where the state in memory doesn\u2019t represent any valid UI that you\u2019d want a user to see. (For example, you never want to show an error message and disable the input at the same time, or the user won\u2019t be able to correct the error!)\n\nHere are some questions you can ask about your state variables:\n\n* Does this state cause a paradox? For example, isTyping and isSubmitting can\u2019t both be true . A paradox usually means that the state is not constrained enough. There are four possible combinations of two booleans, but only three correspond to valid states. To remove the \u201cimpossible\u201d state, you can combine these into a status that must be one of three values: 'typing' , 'submitting' , or 'success' .\n* Is the same information available in another state variable already? Another paradox: isEmpty and isTyping can\u2019t be true at the same time. By making them separate state variables, you risk them going out of sync and causing bugs. Fortunately, you can remove isEmpty and instead check answer.length === 0 .\n* Can you get the same information from the inverse of another state variable? isError is not needed because you can check error !== null instead.\n\nAfter this clean-up, you\u2019re left with 3 (down from 7!) essential state variables:\n\n\n```javascript\nconst[answer,setAnswer]=useState('');const[error,setError]=useState(null);const[status,setStatus]=useState('typing');// 'typing', 'submitting', or 'success'\n```\n\n\nYou know they are essential, because you can\u2019t remove any of them without breaking the functionality.\n\nThese three variables are a good enough representation of this form\u2019s state. However, there are still some intermediate states that don\u2019t fully make sense. For example, a non-null error doesn\u2019t make sense when status is 'success' . To model the state more precisely, you can extract it into a reducer. Reducers let you unify multiple state variables into a single object and consolidate all the related logic!\n\n\n### Step 5: Connect the event handlers to set state\n\n\nLastly, create event handlers that update the state. Below is the final form, with all event handlers wired up:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[answer,setAnswer]=useState('');const[error,setError]=useState(null);const[status,setStatus]=useState('typing');if(status==='success'){return<h1>That's right!</h1>}asyncfunctionhandleSubmit(e){e.preventDefault();setStatus('submitting');try{awaitsubmitForm(answer);setStatus('success');}catch(err){setStatus('typing');setError(err);}}functionhandleTextareaChange(e){setAnswer(e.target.value);}return(<><h2>City quiz</h2><p>In which city is there a billboard that turns air into drinkable water?</p><formonSubmit={handleSubmit}><textareavalue={answer}onChange={handleTextareaChange}disabled={status==='submitting'}/><br/><buttondisabled={answer.length===0||status==='submitting'}>Submit</button>{error!==null&&<pclassName=\"Error\">{error.message}</p>}</form></>);}functionsubmitForm(answer){// Pretend it's hitting the network.returnnewPromise((resolve,reject)=>{setTimeout(()=>{letshouldError=answer.toLowerCase()!=='lima'if(shouldError){reject(newError('Good guess but a wrong answer. Try again!'));}else{resolve();}},1500);});}\n```\n\n\nAlthough this code is longer than the original imperative example, it is much less fragile. Expressing all interactions as state changes lets you later introduce new visual states without breaking existing ones. It also lets you change what should be displayed in each state without changing the logic of the interaction itself.", "source": "https://react.dev/learn/reacting-to-input-with-state", "category": "Reacting to Input with State"}
{"instruction": "Can you describe Adding a ref to your component in the context of React?", "input": "", "output": "You can add a ref to your component by importing the useRef Hook from React:\n\n\n```javascript\nimport{useRef}from'react';\n```\n\n\nInside your component, call the useRef Hook and pass the initial value that you want to reference as the only argument. For example, here is a ref to the value 0 :\n\n\n```javascript\nconstref=useRef(0);\n```\n\n\nuseRef returns an object like this:\n\n\n```javascript\n{current:0// The value you passed to useRef}\n```\n\n\nIllustrated by Rachel Lee Nabors\n\nYou can access the current value of that ref through the ref.current property. This value is intentionally mutable, meaning you can both read and write to it. It\u2019s like a secret pocket of your component that React doesn\u2019t track. (This is what makes it an \u201cescape hatch\u201d from React\u2019s one-way data flow\u2014more on that below!)\n\nHere, a button will increment ref.current on every click:\n\n\n```javascript\nimport{useRef}from'react';exportdefaultfunctionCounter(){letref=useRef(0);functionhandleClick(){ref.current=ref.current+1;alert('You clicked '+ref.current+' times!');}return(<buttononClick={handleClick}>Click me!</button>);}\n```\n\n\nThe ref points to a number, but, like state , you could point to anything: a string, an object, or even a function. Unlike state, ref is a plain JavaScript object with the current property that you can read and modify.\n\nNote that the component doesn\u2019t re-render with every increment. Like state, refs are retained by React between re-renders. However, setting state re-renders a component. Changing a ref does not!", "source": "https://react.dev/learn/referencing-values-with-refs", "category": "Referencing Values with Refs"}
{"instruction": "Show me a code example of Adding a ref to your component in React.", "input": "", "output": "You can add a ref to your component by importing the useRef Hook from React:\n\n\n```javascript\nimport{useRef}from'react';\n```\n\n\nInside your component, call the useRef Hook and pass the initial value that you want to reference as the only argument. For example, here is a ref to the value 0 :\n\n\n```javascript\nconstref=useRef(0);\n```\n\n\nuseRef returns an object like this:\n\n\n```javascript\n{current:0// The value you passed to useRef}\n```\n\n\nIllustrated by Rachel Lee Nabors\n\nYou can access the current value of that ref through the ref.current property. This value is intentionally mutable, meaning you can both read and write to it. It\u2019s like a secret pocket of your component that React doesn\u2019t track. (This is what makes it an \u201cescape hatch\u201d from React\u2019s one-way data flow\u2014more on that below!)\n\nHere, a button will increment ref.current on every click:\n\n\n```javascript\nimport{useRef}from'react';exportdefaultfunctionCounter(){letref=useRef(0);functionhandleClick(){ref.current=ref.current+1;alert('You clicked '+ref.current+' times!');}return(<buttononClick={handleClick}>Click me!</button>);}\n```\n\n\nThe ref points to a number, but, like state , you could point to anything: a string, an object, or even a function. Unlike state, ref is a plain JavaScript object with the current property that you can read and modify.\n\nNote that the component doesn\u2019t re-render with every increment. Like state, refs are retained by React between re-renders. However, setting state re-renders a component. Changing a ref does not!", "source": "https://react.dev/learn/referencing-values-with-refs", "category": "Referencing Values with Refs"}
{"instruction": "Tell me about Example: building a stopwatch.", "input": "", "output": "You can combine refs and state in a single component. For example, let\u2019s make a stopwatch that the user can start or stop by pressing a button. In order to display how much time has passed since the user pressed \u201cStart\u201d, you will need to keep track of when the Start button was pressed and what the current time is. This information is used for rendering, so you\u2019ll keep it in state:\n\n\n```javascript\nconst[startTime,setStartTime]=useState(null);const[now,setNow]=useState(null);\n```\n\n\nWhen the user presses \u201cStart\u201d, you\u2019ll use setInterval in order to update the time every 10 milliseconds:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionStopwatch(){const[startTime,setStartTime]=useState(null);const[now,setNow]=useState(null);functionhandleStart(){// Start counting.setStartTime(Date.now());setNow(Date.now());setInterval(()=>{// Update the current time every 10ms.setNow(Date.now());},10);}letsecondsPassed=0;if(startTime!=null&&now!=null){secondsPassed=(now-startTime)/1000;}return(<><h1>Time passed:{secondsPassed.toFixed(3)}</h1><buttononClick={handleStart}>Start</button></>);}\n```\n\n\nWhen the \u201cStop\u201d button is pressed, you need to cancel the existing interval so that it stops updating the now state variable. You can do this by calling clearInterval , but you need to give it the interval ID that was previously returned by the setInterval call when the user pressed Start. You need to keep the interval ID somewhere. Since the interval ID is not used for rendering, you can keep it in a ref:\n\n\n```javascript\nimport{useState,useRef}from'react';exportdefaultfunctionStopwatch(){const[startTime,setStartTime]=useState(null);const[now,setNow]=useState(null);constintervalRef=useRef(null);functionhandleStart(){setStartTime(Date.now());setNow(Date.now());clearInterval(intervalRef.current);intervalRef.current=setInterval(()=>{setNow(Date.now());},10);}functionhandleStop(){clearInterval(intervalRef.current);}letsecondsPassed=0;if(startTime!=null&&now!=null){secondsPassed=(now-startTime)/1000;}return(<><h1>Time passed:{secondsPassed.toFixed(3)}</h1><buttononClick={handleStart}>Start</button><buttononClick={handleStop}>Stop</button></>);}\n```\n\n\nWhen a piece of information is used for rendering, keep it in state. When a piece of information is only needed by event handlers and changing it doesn\u2019t require a re-render, using a ref may be more efficient.", "source": "https://react.dev/learn/referencing-values-with-refs", "category": "Referencing Values with Refs"}
{"instruction": "Show me a code example of Example: building a stopwatch in React.", "input": "", "output": "You can combine refs and state in a single component. For example, let\u2019s make a stopwatch that the user can start or stop by pressing a button. In order to display how much time has passed since the user pressed \u201cStart\u201d, you will need to keep track of when the Start button was pressed and what the current time is. This information is used for rendering, so you\u2019ll keep it in state:\n\n\n```javascript\nconst[startTime,setStartTime]=useState(null);const[now,setNow]=useState(null);\n```\n\n\nWhen the user presses \u201cStart\u201d, you\u2019ll use setInterval in order to update the time every 10 milliseconds:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionStopwatch(){const[startTime,setStartTime]=useState(null);const[now,setNow]=useState(null);functionhandleStart(){// Start counting.setStartTime(Date.now());setNow(Date.now());setInterval(()=>{// Update the current time every 10ms.setNow(Date.now());},10);}letsecondsPassed=0;if(startTime!=null&&now!=null){secondsPassed=(now-startTime)/1000;}return(<><h1>Time passed:{secondsPassed.toFixed(3)}</h1><buttononClick={handleStart}>Start</button></>);}\n```\n\n\nWhen the \u201cStop\u201d button is pressed, you need to cancel the existing interval so that it stops updating the now state variable. You can do this by calling clearInterval , but you need to give it the interval ID that was previously returned by the setInterval call when the user pressed Start. You need to keep the interval ID somewhere. Since the interval ID is not used for rendering, you can keep it in a ref:\n\n\n```javascript\nimport{useState,useRef}from'react';exportdefaultfunctionStopwatch(){const[startTime,setStartTime]=useState(null);const[now,setNow]=useState(null);constintervalRef=useRef(null);functionhandleStart(){setStartTime(Date.now());setNow(Date.now());clearInterval(intervalRef.current);intervalRef.current=setInterval(()=>{setNow(Date.now());},10);}functionhandleStop(){clearInterval(intervalRef.current);}letsecondsPassed=0;if(startTime!=null&&now!=null){secondsPassed=(now-startTime)/1000;}return(<><h1>Time passed:{secondsPassed.toFixed(3)}</h1><buttononClick={handleStart}>Start</button><buttononClick={handleStop}>Stop</button></>);}\n```\n\n\nWhen a piece of information is used for rendering, keep it in state. When a piece of information is only needed by event handlers and changing it doesn\u2019t require a re-render, using a ref may be more efficient.", "source": "https://react.dev/learn/referencing-values-with-refs", "category": "Referencing Values with Refs"}
{"instruction": "What is Differences between refs and state in React and how does it work?", "input": "", "output": "Perhaps you\u2019re thinking refs seem less \u201cstrict\u201d than state\u2014you can mutate them instead of always having to use a state setting function, for instance. But in most cases, you\u2019ll want to use state. Refs are an \u201cescape hatch\u201d you won\u2019t need often. Here\u2019s how state and refs compare:\n\nHere is a counter button that\u2019s implemented with state:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionCounter(){const[count,setCount]=useState(0);functionhandleClick(){setCount(count+1);}return(<buttononClick={handleClick}>You clicked{count}times</button>);}\n```\n\n\nBecause the count value is displayed, it makes sense to use a state value for it. When the counter\u2019s value is set with setCount() , React re-renders the component and the screen updates to reflect the new count.\n\nIf you tried to implement this with a ref, React would never re-render the component, so you\u2019d never see the count change! See how clicking this button does not update its text :\n\n\n```javascript\nimport{useRef}from'react';exportdefaultfunctionCounter(){letcountRef=useRef(0);functionhandleClick(){// This doesn't re-render the component!countRef.current=countRef.current+1;}return(<buttononClick={handleClick}>You clicked{countRef.current}times</button>);}\n```\n\n\nThis is why reading ref.current during render leads to unreliable code. If you need that, use state instead.\n\nAlthough both useState and useRef are provided by React, in principle useRef could be implemented on top of useState . You can imagine that inside of React, useRef is implemented like this:\n\n\n```javascript\n// Inside of ReactfunctionuseRef(initialValue){const[ref,unused]=useState({current:initialValue});returnref;}\n```\n\n\nDuring the first render, useRef returns { current: initialValue } . This object is stored by React, so during the next render the same object will be returned. Note how the state setter is unused in this example. It is unnecessary because useRef always needs to return the same object!\n\nReact provides a built-in version of useRef because it is common enough in practice. But you can think of it as a regular state variable without a setter. If you\u2019re familiar with object-oriented programming, refs might remind you of instance fields\u2014but instead of this.something you write somethingRef.current .", "source": "https://react.dev/learn/referencing-values-with-refs", "category": "Referencing Values with Refs"}
{"instruction": "Show me a code example of Differences between refs and state in React.", "input": "", "output": "Perhaps you\u2019re thinking refs seem less \u201cstrict\u201d than state\u2014you can mutate them instead of always having to use a state setting function, for instance. But in most cases, you\u2019ll want to use state. Refs are an \u201cescape hatch\u201d you won\u2019t need often. Here\u2019s how state and refs compare:\n\nHere is a counter button that\u2019s implemented with state:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionCounter(){const[count,setCount]=useState(0);functionhandleClick(){setCount(count+1);}return(<buttononClick={handleClick}>You clicked{count}times</button>);}\n```\n\n\nBecause the count value is displayed, it makes sense to use a state value for it. When the counter\u2019s value is set with setCount() , React re-renders the component and the screen updates to reflect the new count.\n\nIf you tried to implement this with a ref, React would never re-render the component, so you\u2019d never see the count change! See how clicking this button does not update its text :\n\n\n```javascript\nimport{useRef}from'react';exportdefaultfunctionCounter(){letcountRef=useRef(0);functionhandleClick(){// This doesn't re-render the component!countRef.current=countRef.current+1;}return(<buttononClick={handleClick}>You clicked{countRef.current}times</button>);}\n```\n\n\nThis is why reading ref.current during render leads to unreliable code. If you need that, use state instead.\n\nAlthough both useState and useRef are provided by React, in principle useRef could be implemented on top of useState . You can imagine that inside of React, useRef is implemented like this:\n\n\n```javascript\n// Inside of ReactfunctionuseRef(initialValue){const[ref,unused]=useState({current:initialValue});returnref;}\n```\n\n\nDuring the first render, useRef returns { current: initialValue } . This object is stored by React, so during the next render the same object will be returned. Note how the state setter is unused in this example. It is unnecessary because useRef always needs to return the same object!\n\nReact provides a built-in version of useRef because it is common enough in practice. But you can think of it as a regular state variable without a setter. If you\u2019re familiar with object-oriented programming, refs might remind you of instance fields\u2014but instead of this.something you write somethingRef.current .", "source": "https://react.dev/learn/referencing-values-with-refs", "category": "Referencing Values with Refs"}
{"instruction": "What is When to use refs in React and how does it work?", "input": "", "output": "Typically, you will use a ref when your component needs to \u201cstep outside\u201d React and communicate with external APIs\u2014often a browser API that won\u2019t impact the appearance of the component. Here are a few of these rare situations:\n\n* Storing timeout IDs\n* Storing and manipulating DOM elements , which we cover on the next page\n* Storing other objects that aren\u2019t necessary to calculate the JSX.\n\nIf your component needs to store some value, but it doesn\u2019t impact the rendering logic, choose refs.", "source": "https://react.dev/learn/referencing-values-with-refs", "category": "Referencing Values with Refs"}
{"instruction": "Explain the concept of Best practices for refs in React.", "input": "", "output": "Following these principles will make your components more predictable:\n\n* Treat refs as an escape hatch. Refs are useful when you work with external systems or browser APIs. If much of your application logic and data flow relies on refs, you might want to rethink your approach.\n* Don\u2019t read or write ref.current during rendering. If some information is needed during rendering, use state instead. Since React doesn\u2019t know when ref.current changes, even reading it while rendering makes your component\u2019s behavior difficult to predict. (The only exception to this is code like if (!ref.current) ref.current = new Thing() which only sets the ref once during the first render.)\n\nLimitations of React state don\u2019t apply to refs. For example, state acts like a snapshot for every render and doesn\u2019t update synchronously. But when you mutate the current value of a ref, it changes immediately:\n\n\n```javascript\nref.current=5;console.log(ref.current);// 5\n```\n\n\nThis is because the ref itself is a regular JavaScript object, and so it behaves like one.\n\nYou also don\u2019t need to worry about avoiding mutation when you work with a ref. As long as the object you\u2019re mutating isn\u2019t used for rendering, React doesn\u2019t care what you do with the ref or its contents.", "source": "https://react.dev/learn/referencing-values-with-refs", "category": "Referencing Values with Refs"}
{"instruction": "Show me a code example of Best practices for refs in React.", "input": "", "output": "Following these principles will make your components more predictable:\n\n* Treat refs as an escape hatch. Refs are useful when you work with external systems or browser APIs. If much of your application logic and data flow relies on refs, you might want to rethink your approach.\n* Don\u2019t read or write ref.current during rendering. If some information is needed during rendering, use state instead. Since React doesn\u2019t know when ref.current changes, even reading it while rendering makes your component\u2019s behavior difficult to predict. (The only exception to this is code like if (!ref.current) ref.current = new Thing() which only sets the ref once during the first render.)\n\nLimitations of React state don\u2019t apply to refs. For example, state acts like a snapshot for every render and doesn\u2019t update synchronously. But when you mutate the current value of a ref, it changes immediately:\n\n\n```javascript\nref.current=5;console.log(ref.current);// 5\n```\n\n\nThis is because the ref itself is a regular JavaScript object, and so it behaves like one.\n\nYou also don\u2019t need to worry about avoiding mutation when you work with a ref. As long as the object you\u2019re mutating isn\u2019t used for rendering, React doesn\u2019t care what you do with the ref or its contents.", "source": "https://react.dev/learn/referencing-values-with-refs", "category": "Referencing Values with Refs"}
{"instruction": "Tell me about Refs and the DOM.", "input": "", "output": "You can point a ref to any value. However, the most common use case for a ref is to access a DOM element. For example, this is handy if you want to focus an input programmatically. When you pass a ref to a ref attribute in JSX, like <div ref={myRef}> , React will put the corresponding DOM element into myRef.current . Once the element is removed from the DOM, React will update myRef.current to be null . You can read more about this in Manipulating the DOM with Refs.", "source": "https://react.dev/learn/referencing-values-with-refs", "category": "Referencing Values with Refs"}
{"instruction": "What is Dependencies should match the code in React and how does it work?", "input": "", "output": "When you write an Effect, you first specify how to start and stop whatever you want your Effect to be doing:\n\n\n```javascript\nconstserverUrl='https://localhost:1234';functionChatRoom({roomId}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();// ...}\n```\n\n\nThen, if you leave the Effect dependencies empty ( [] ), the linter will suggest the correct dependencies:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[]);// <-- Fix the mistake here!return<h1>Welcome to the{roomId}room!</h1>;}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><hr/><ChatRoomroomId={roomId}/></>);}\n```\n\n\nFill them in according to what the linter says:\n\n\n```javascript\nfunctionChatRoom({roomId}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[roomId]);// \u2705 All dependencies declared// ...}\n```\n\n\nEffects \u201creact\u201d to reactive values. Since roomId is a reactive value (it can change due to a re-render), the linter verifies that you\u2019ve specified it as a dependency. If roomId receives a different value, React will re-synchronize your Effect. This ensures that the chat stays connected to the selected room and \u201creacts\u201d to the dropdown:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[roomId]);return<h1>Welcome to the{roomId}room!</h1>;}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><hr/><ChatRoomroomId={roomId}/></>);}\n```\n\n\n\n### To remove a dependency, prove that it\u2019s not a dependency\n\n\nNotice that you can\u2019t \u201cchoose\u201d the dependencies of your Effect. Every reactive value used by your Effect\u2019s code must be declared in your dependency list. The dependency list is determined by the surrounding code:\n\n\n```javascript\nconstserverUrl='https://localhost:1234';functionChatRoom({roomId}){// This is a reactive valueuseEffect(()=>{constconnection=createConnection(serverUrl,roomId);// This Effect reads that reactive valueconnection.connect();return()=>connection.disconnect();},[roomId]);// \u2705 So you must specify that reactive value as a dependency of your Effect// ...}\n```\n\n\nReactive values include props and all variables and functions declared directly inside of your component. Since roomId is a reactive value, you can\u2019t remove it from the dependency list. The linter wouldn\u2019t allow it:\n\n\n```javascript\nconstserverUrl='https://localhost:1234';functionChatRoom({roomId}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[]);// \ud83d\udd34 React Hook useEffect has a missing dependency: 'roomId'// ...}\n```\n\n\nAnd the linter would be right! Since roomId may change over time, this would introduce a bug in your code.\n\nTo remove a dependency, \u201cprove\u201d to the linter that it doesn\u2019t need to be a dependency. For example, you can move roomId out of your component to prove that it\u2019s not reactive and won\u2019t change on re-renders:\n\n\n```javascript\nconstserverUrl='https://localhost:1234';constroomId='music';// Not a reactive value anymorefunctionChatRoom(){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[]);// \u2705 All dependencies declared// ...}\n```\n\n\nNow that roomId is not a reactive value (and can\u2019t change on a re-render), it doesn\u2019t need to be a dependency:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';constserverUrl='https://localhost:1234';constroomId='music';exportdefaultfunctionChatRoom(){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[]);return<h1>Welcome to the{roomId}room!</h1>;}\n```\n\n\nThis is why you could now specify an empty ( [] ) dependency list. Your Effect really doesn\u2019t depend on any reactive value anymore, so it really doesn\u2019t need to re-run when any of the component\u2019s props or state change.\n\n\n### To change the dependencies, change the code\n\n\nYou might have noticed a pattern in your workflow:\n\n1. First, you change the code of your Effect or how your reactive values are declared.\n2. Then, you follow the linter and adjust the dependencies to match the code you have changed.\n3. If you\u2019re not happy with the list of dependencies, you go back to the first step (and change the code again).\n\nThe last part is important. If you want to change the dependencies, change the surrounding code first. You can think of the dependency list as a list of all the reactive values used by your Effect\u2019s code. You don\u2019t choose what to put on that list. The list describes your code. To change the dependency list, change the code.\n\nThis might feel like solving an equation. You might start with a goal (for example, to remove a dependency), and you need to \u201cfind\u201d the code matching that goal. Not everyone finds solving equations fun, and the same thing could be said about writing Effects! Luckily, there is a list of common recipes that you can try below.\n\n\n### Pitfall\n\n\nIf you have an existing codebase, you might have some Effects that suppress the linter like this:\n\n\n```javascript\nuseEffect(()=>{// ...// \ud83d\udd34 Avoid suppressing the linter like this:// eslint-ignore-next-line react-hooks/exhaustive-deps},[]);\n```\n\n\nWhen dependencies don\u2019t match the code, there is a very high risk of introducing bugs. By suppressing the linter, you \u201clie\u201d to React about the values your Effect depends on.\n\nInstead, use the techniques below.\n\nSuppressing the linter leads to very unintuitive bugs that are hard to find and fix. Here\u2019s one example:\n\n\n```javascript\nimport{useState,useEffect}from'react';exportdefaultfunctionTimer(){const[count,setCount]=useState(0);const[increment,setIncrement]=useState(1);functiononTick(){setCount(count+increment);}useEffect(()=>{constid=setInterval(onTick,1000);return()=>clearInterval(id);// eslint-disable-next-line react-hooks/exhaustive-deps},[]);return(<><h1>Counter:{count}<buttononClick={()=>setCount(0)}>Reset</button></h1><hr/><p>Every second, increment by:<buttondisabled={increment===0}onClick={()=>{setIncrement(i=>i-1);}}>\u2013</button><b>{increment}</b><buttononClick={()=>{setIncrement(i=>i+1);}}>+</button></p></>);}\n```\n\n\nLet\u2019s say that you wanted to run the Effect \u201conly on mount\u201d. You\u2019ve read that empty ( [] ) dependencies do that, so you\u2019ve decided to ignore the linter, and forcefully specified [] as the dependencies.\n\nThis counter was supposed to increment every second by the amount configurable with the two buttons. However, since you \u201clied\u201d to React that this Effect doesn\u2019t depend on anything, React forever keeps using the onTick function from the initial render. During that render, count was 0 and increment was 1 . This is why onTick from that render always calls setCount(0 + 1) every second, and you always see 1 . Bugs like this are harder to fix when they\u2019re spread across multiple components.\n\nThere\u2019s always a better solution than ignoring the linter! To fix this code, you need to add onTick to the dependency list. (To ensure the interval is only setup once, make onTick an Effect Event. )\n\nWe recommend treating the dependency lint error as a compilation error. If you don\u2019t suppress it, you will never see bugs like this. The rest of this page documents the alternatives for this and other cases.", "source": "https://react.dev/learn/removing-effect-dependencies", "category": "Removing Effect Dependencies"}
{"instruction": "Show me a code example of Dependencies should match the code in React.", "input": "", "output": "When you write an Effect, you first specify how to start and stop whatever you want your Effect to be doing:\n\n\n```javascript\nconstserverUrl='https://localhost:1234';functionChatRoom({roomId}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();// ...}\n```\n\n\nThen, if you leave the Effect dependencies empty ( [] ), the linter will suggest the correct dependencies:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[]);// <-- Fix the mistake here!return<h1>Welcome to the{roomId}room!</h1>;}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><hr/><ChatRoomroomId={roomId}/></>);}\n```\n\n\nFill them in according to what the linter says:\n\n\n```javascript\nfunctionChatRoom({roomId}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[roomId]);// \u2705 All dependencies declared// ...}\n```\n\n\nEffects \u201creact\u201d to reactive values. Since roomId is a reactive value (it can change due to a re-render), the linter verifies that you\u2019ve specified it as a dependency. If roomId receives a different value, React will re-synchronize your Effect. This ensures that the chat stays connected to the selected room and \u201creacts\u201d to the dropdown:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[roomId]);return<h1>Welcome to the{roomId}room!</h1>;}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><hr/><ChatRoomroomId={roomId}/></>);}\n```\n\n\n\n### To remove a dependency, prove that it\u2019s not a dependency\n\n\nNotice that you can\u2019t \u201cchoose\u201d the dependencies of your Effect. Every reactive value used by your Effect\u2019s code must be declared in your dependency list. The dependency list is determined by the surrounding code:\n\n\n```javascript\nconstserverUrl='https://localhost:1234';functionChatRoom({roomId}){// This is a reactive valueuseEffect(()=>{constconnection=createConnection(serverUrl,roomId);// This Effect reads that reactive valueconnection.connect();return()=>connection.disconnect();},[roomId]);// \u2705 So you must specify that reactive value as a dependency of your Effect// ...}\n```\n\n\nReactive values include props and all variables and functions declared directly inside of your component. Since roomId is a reactive value, you can\u2019t remove it from the dependency list. The linter wouldn\u2019t allow it:\n\n\n```javascript\nconstserverUrl='https://localhost:1234';functionChatRoom({roomId}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[]);// \ud83d\udd34 React Hook useEffect has a missing dependency: 'roomId'// ...}\n```\n\n\nAnd the linter would be right! Since roomId may change over time, this would introduce a bug in your code.\n\nTo remove a dependency, \u201cprove\u201d to the linter that it doesn\u2019t need to be a dependency. For example, you can move roomId out of your component to prove that it\u2019s not reactive and won\u2019t change on re-renders:\n\n\n```javascript\nconstserverUrl='https://localhost:1234';constroomId='music';// Not a reactive value anymorefunctionChatRoom(){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[]);// \u2705 All dependencies declared// ...}\n```\n\n\nNow that roomId is not a reactive value (and can\u2019t change on a re-render), it doesn\u2019t need to be a dependency:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';constserverUrl='https://localhost:1234';constroomId='music';exportdefaultfunctionChatRoom(){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[]);return<h1>Welcome to the{roomId}room!</h1>;}\n```\n\n\nThis is why you could now specify an empty ( [] ) dependency list. Your Effect really doesn\u2019t depend on any reactive value anymore, so it really doesn\u2019t need to re-run when any of the component\u2019s props or state change.\n\n\n### To change the dependencies, change the code\n\n\nYou might have noticed a pattern in your workflow:\n\n1. First, you change the code of your Effect or how your reactive values are declared.\n2. Then, you follow the linter and adjust the dependencies to match the code you have changed.\n3. If you\u2019re not happy with the list of dependencies, you go back to the first step (and change the code again).\n\nThe last part is important. If you want to change the dependencies, change the surrounding code first. You can think of the dependency list as a list of all the reactive values used by your Effect\u2019s code. You don\u2019t choose what to put on that list. The list describes your code. To change the dependency list, change the code.\n\nThis might feel like solving an equation. You might start with a goal (for example, to remove a dependency), and you need to \u201cfind\u201d the code matching that goal. Not everyone finds solving equations fun, and the same thing could be said about writing Effects! Luckily, there is a list of common recipes that you can try below.\n\n\n### Pitfall\n\n\nIf you have an existing codebase, you might have some Effects that suppress the linter like this:\n\n\n```javascript\nuseEffect(()=>{// ...// \ud83d\udd34 Avoid suppressing the linter like this:// eslint-ignore-next-line react-hooks/exhaustive-deps},[]);\n```\n\n\nWhen dependencies don\u2019t match the code, there is a very high risk of introducing bugs. By suppressing the linter, you \u201clie\u201d to React about the values your Effect depends on.\n\nInstead, use the techniques below.\n\nSuppressing the linter leads to very unintuitive bugs that are hard to find and fix. Here\u2019s one example:\n\n\n```javascript\nimport{useState,useEffect}from'react';exportdefaultfunctionTimer(){const[count,setCount]=useState(0);const[increment,setIncrement]=useState(1);functiononTick(){setCount(count+increment);}useEffect(()=>{constid=setInterval(onTick,1000);return()=>clearInterval(id);// eslint-disable-next-line react-hooks/exhaustive-deps},[]);return(<><h1>Counter:{count}<buttononClick={()=>setCount(0)}>Reset</button></h1><hr/><p>Every second, increment by:<buttondisabled={increment===0}onClick={()=>{setIncrement(i=>i-1);}}>\u2013</button><b>{increment}</b><buttononClick={()=>{setIncrement(i=>i+1);}}>+</button></p></>);}\n```\n\n\nLet\u2019s say that you wanted to run the Effect \u201conly on mount\u201d. You\u2019ve read that empty ( [] ) dependencies do that, so you\u2019ve decided to ignore the linter, and forcefully specified [] as the dependencies.\n\nThis counter was supposed to increment every second by the amount configurable with the two buttons. However, since you \u201clied\u201d to React that this Effect doesn\u2019t depend on anything, React forever keeps using the onTick function from the initial render. During that render, count was 0 and increment was 1 . This is why onTick from that render always calls setCount(0 + 1) every second, and you always see 1 . Bugs like this are harder to fix when they\u2019re spread across multiple components.\n\nThere\u2019s always a better solution than ignoring the linter! To fix this code, you need to add onTick to the dependency list. (To ensure the interval is only setup once, make onTick an Effect Event. )\n\nWe recommend treating the dependency lint error as a compilation error. If you don\u2019t suppress it, you will never see bugs like this. The rest of this page documents the alternatives for this and other cases.", "source": "https://react.dev/learn/removing-effect-dependencies", "category": "Removing Effect Dependencies"}
{"instruction": "Explain the concept of Removing unnecessary dependencies in React.", "input": "", "output": "Every time you adjust the Effect\u2019s dependencies to reflect the code, look at the dependency list. Does it make sense for the Effect to re-run when any of these dependencies change? Sometimes, the answer is \u201cno\u201d:\n\n* You might want to re-execute different parts of your Effect under different conditions.\n* You might want to only read the latest value of some dependency instead of \u201creacting\u201d to its changes.\n* A dependency may change too often unintentionally because it\u2019s an object or a function.\n\nTo find the right solution, you\u2019ll need to answer a few questions about your Effect. Let\u2019s walk through them.\n\n\n### Should this code move to an event handler?\n\n\nThe first thing you should think about is whether this code should be an Effect at all.\n\nImagine a form. On submit, you set the submitted state variable to true . You need to send a POST request and show a notification. You\u2019ve put this logic inside an Effect that \u201creacts\u201d to submitted being true :\n\n\n```javascript\nfunctionForm(){const[submitted,setSubmitted]=useState(false);useEffect(()=>{if(submitted){// \ud83d\udd34 Avoid: Event-specific logic inside an Effectpost('/api/register');showNotification('Successfully registered!');}},[submitted]);functionhandleSubmit(){setSubmitted(true);}// ...}\n```\n\n\nLater, you want to style the notification message according to the current theme, so you read the current theme. Since theme is declared in the component body, it is a reactive value, so you add it as a dependency:\n\n\n```javascript\nfunctionForm(){const[submitted,setSubmitted]=useState(false);consttheme=useContext(ThemeContext);useEffect(()=>{if(submitted){// \ud83d\udd34 Avoid: Event-specific logic inside an Effectpost('/api/register');showNotification('Successfully registered!',theme);}},[submitted,theme]);// \u2705 All dependencies declaredfunctionhandleSubmit(){setSubmitted(true);}// ...}\n```\n\n\nBy doing this, you\u2019ve introduced a bug. Imagine you submit the form first and then switch between Dark and Light themes. The theme will change, the Effect will re-run, and so it will display the same notification again!\n\nThe problem here is that this shouldn\u2019t be an Effect in the first place. You want to send this POST request and show the notification in response to submitting the form, which is a particular interaction. To run some code in response to particular interaction, put that logic directly into the corresponding event handler:\n\n\n```javascript\nfunctionForm(){consttheme=useContext(ThemeContext);functionhandleSubmit(){// \u2705 Good: Event-specific logic is called from event handlerspost('/api/register');showNotification('Successfully registered!',theme);}// ...}\n```\n\n\nNow that the code is in an event handler, it\u2019s not reactive\u2014so it will only run when the user submits the form. Read more about choosing between event handlers and Effects and how to delete unnecessary Effects.\n\n\n### Is your Effect doing several unrelated things?\n\n\nThe next question you should ask yourself is whether your Effect is doing several unrelated things.\n\nImagine you\u2019re creating a shipping form where the user needs to choose their city and area. You fetch the list of cities from the server according to the selected country to show them in a dropdown:\n\n\n```javascript\nfunctionShippingForm({country}){const[cities,setCities]=useState(null);const[city,setCity]=useState(null);useEffect(()=>{letignore=false;fetch(`/api/cities?country=${country}`).then(response=>response.json()).then(json=>{if(!ignore){setCities(json);}});return()=>{ignore=true;};},[country]);// \u2705 All dependencies declared// ...\n```\n\n\nThis is a good example of fetching data in an Effect. You are synchronizing the cities state with the network according to the country prop. You can\u2019t do this in an event handler because you need to fetch as soon as ShippingForm is displayed and whenever the country changes (no matter which interaction causes it).\n\nNow let\u2019s say you\u2019re adding a second select box for city areas, which should fetch the areas for the currently selected city . You might start by adding a second fetch call for the list of areas inside the same Effect:\n\n\n```javascript\nfunctionShippingForm({country}){const[cities,setCities]=useState(null);const[city,setCity]=useState(null);const[areas,setAreas]=useState(null);useEffect(()=>{letignore=false;fetch(`/api/cities?country=${country}`).then(response=>response.json()).then(json=>{if(!ignore){setCities(json);}});// \ud83d\udd34 Avoid: A single Effect synchronizes two independent processesif(city){fetch(`/api/areas?city=${city}`).then(response=>response.json()).then(json=>{if(!ignore){setAreas(json);}});}return()=>{ignore=true;};},[country,city]);// \u2705 All dependencies declared// ...\n```\n\n\nHowever, since the Effect now uses the city state variable, you\u2019ve had to add city to the list of dependencies. That, in turn, introduced a problem: when the user selects a different city, the Effect will re-run and call fetchCities(country) . As a result, you will be unnecessarily refetching the list of cities many times.\n\nThe problem with this code is that you\u2019re synchronizing two different unrelated things:\n\n1. You want to synchronize the cities state to the network based on the country prop.\n2. You want to synchronize the areas state to the network based on the city state.\n\nSplit the logic into two Effects, each of which reacts to the prop that it needs to synchronize with:\n\n\n```javascript\nfunctionShippingForm({country}){const[cities,setCities]=useState(null);useEffect(()=>{letignore=false;fetch(`/api/cities?country=${country}`).then(response=>response.json()).then(json=>{if(!ignore){setCities(json);}});return()=>{ignore=true;};},[country]);// \u2705 All dependencies declaredconst[city,setCity]=useState(null);const[areas,setAreas]=useState(null);useEffect(()=>{if(city){letignore=false;fetch(`/api/areas?city=${city}`).then(response=>response.json()).then(json=>{if(!ignore){setAreas(json);}});return()=>{ignore=true;};}},[city]);// \u2705 All dependencies declared// ...\n```\n\n\nNow the first Effect only re-runs if the country changes, while the second Effect re-runs when the city changes. You\u2019ve separated them by purpose: two different things are synchronized by two separate Effects. Two separate Effects have two separate dependency lists, so they won\u2019t trigger each other unintentionally.\n\nThe final code is longer than the original, but splitting these Effects is still correct. Each Effect should represent an independent synchronization process. In this example, deleting one Effect doesn\u2019t break the other Effect\u2019s logic. This means they synchronize different things, and it\u2019s good to split them up. If you\u2019re concerned about duplication, you can improve this code by extracting repetitive logic into a custom Hook.\n\n\n### Are you reading some state to calculate the next state?\n\n\nThis Effect updates the messages state variable with a newly created array every time a new message arrives:\n\n\n```javascript\nfunctionChatRoom({roomId}){const[messages,setMessages]=useState([]);useEffect(()=>{constconnection=createConnection();connection.connect();connection.on('message',(receivedMessage)=>{setMessages([...messages,receivedMessage]);});// ...\n```\n\n\nIt uses the messages variable to create a new array starting with all the existing messages and adds the new message at the end. However, since messages is a reactive value read by an Effect, it must be a dependency:\n\n\n```javascript\nfunctionChatRoom({roomId}){const[messages,setMessages]=useState([]);useEffect(()=>{constconnection=createConnection();connection.connect();connection.on('message',(receivedMessage)=>{setMessages([...messages,receivedMessage]);});return()=>connection.disconnect();},[roomId,messages]);// \u2705 All dependencies declared// ...\n```\n\n\nAnd making messages a dependency introduces a problem.\n\nEvery time you receive a message, setMessages() causes the component to re-render with a new messages array that includes the received message. However, since this Effect now depends on messages , this will also re-synchronize the Effect. So every new message will make the chat re-connect. The user would not like that!\n\nTo fix the issue, don\u2019t read messages inside the Effect. Instead, pass an updater function to setMessages :\n\n\n```javascript\nfunctionChatRoom({roomId}){const[messages,setMessages]=useState([]);useEffect(()=>{constconnection=createConnection();connection.connect();connection.on('message',(receivedMessage)=>{setMessages(msgs=>[...msgs,receivedMessage]);});return()=>connection.disconnect();},[roomId]);// \u2705 All dependencies declared// ...\n```\n\n\nNotice how your Effect does not read the messages variable at all now. You only need to pass an updater function like msgs => [...msgs, receivedMessage] . React puts your updater function in a queue and will provide the msgs argument to it during the next render. This is why the Effect itself doesn\u2019t need to depend on messages anymore. As a result of this fix, receiving a chat message will no longer make the chat re-connect.\n\n\n### Do you want to read a value without \u201creacting\u201d to its changes?\n\n\n\n### Under Construction\n\n\nThis section describes an experimental API that has not yet been released in a stable version of React.\n\nSuppose that you want to play a sound when the user receives a new message unless isMuted is true :\n\n\n```javascript\nfunctionChatRoom({roomId}){const[messages,setMessages]=useState([]);const[isMuted,setIsMuted]=useState(false);useEffect(()=>{constconnection=createConnection();connection.connect();connection.on('message',(receivedMessage)=>{setMessages(msgs=>[...msgs,receivedMessage]);if(!isMuted){playSound();}});// ...\n```\n\n\nSince your Effect now uses isMuted in its code, you have to add it to the dependencies:\n\n\n```javascript\nfunctionChatRoom({roomId}){const[messages,setMessages]=useState([]);const[isMuted,setIsMuted]=useState(false);useEffect(()=>{constconnection=createConnection();connection.connect();connection.on('message',(receivedMessage)=>{setMessages(msgs=>[...msgs,receivedMessage]);if(!isMuted){playSound();}});return()=>connection.disconnect();},[roomId,isMuted]);// \u2705 All dependencies declared// ...\n```\n\n\nThe problem is that every time isMuted changes (for example, when the user presses the \u201cMuted\u201d toggle), the Effect will re-synchronize, and reconnect to the chat. This is not the desired user experience! (In this example, even disabling the linter would not work\u2014if you do that, isMuted would get \u201cstuck\u201d with its old value.)\n\nTo solve this problem, you need to extract the logic that shouldn\u2019t be reactive out of the Effect. You don\u2019t want this Effect to \u201creact\u201d to the changes in isMuted . Move this non-reactive piece of logic into an Effect Event:\n\n\n```javascript\nimport{useState,useEffect,useEffectEvent}from'react';functionChatRoom({roomId}){const[messages,setMessages]=useState([]);const[isMuted,setIsMuted]=useState(false);constonMessage=useEffectEvent(receivedMessage=>{setMessages(msgs=>[...msgs,receivedMessage]);if(!isMuted){playSound();}});useEffect(()=>{constconnection=createConnection();connection.connect();connection.on('message',(receivedMessage)=>{onMessage(receivedMessage);});return()=>connection.disconnect();},[roomId]);// \u2705 All dependencies declared// ...\n```\n\n\nEffect Events let you split an Effect into reactive parts (which should \u201creact\u201d to reactive values like roomId and their changes) and non-reactive parts (which only read their latest values, like onMessage reads isMuted ). Now that you read isMuted inside an Effect Event, it doesn\u2019t need to be a dependency of your Effect. As a result, the chat won\u2019t re-connect when you toggle the \u201cMuted\u201d setting on and off, solving the original issue!\n\nYou might run into a similar problem when your component receives an event handler as a prop:\n\n\n```javascript\nfunctionChatRoom({roomId,onReceiveMessage}){const[messages,setMessages]=useState([]);useEffect(()=>{constconnection=createConnection();connection.connect();connection.on('message',(receivedMessage)=>{onReceiveMessage(receivedMessage);});return()=>connection.disconnect();},[roomId,onReceiveMessage]);// \u2705 All dependencies declared// ...\n```\n\n\nSuppose that the parent component passes a different onReceiveMessage function on every render:\n\n\n```javascript\n<ChatRoomroomId={roomId}onReceiveMessage={receivedMessage=>{// ...}}/>\n```\n\n\nSince onReceiveMessage is a dependency, it would cause the Effect to re-synchronize after every parent re-render. This would make it re-connect to the chat. To solve this, wrap the call in an Effect Event:\n\n\n```javascript\nfunctionChatRoom({roomId,onReceiveMessage}){const[messages,setMessages]=useState([]);constonMessage=useEffectEvent(receivedMessage=>{onReceiveMessage(receivedMessage);});useEffect(()=>{constconnection=createConnection();connection.connect();connection.on('message',(receivedMessage)=>{onMessage(receivedMessage);});return()=>connection.disconnect();},[roomId]);// \u2705 All dependencies declared// ...\n```\n\n\nEffect Events aren\u2019t reactive, so you don\u2019t need to specify them as dependencies. As a result, the chat will no longer re-connect even if the parent component passes a function that\u2019s different on every re-render.\n\nIn this example, you want to log a visit every time roomId changes. You want to include the current notificationCount with every log, but you don\u2019t want a change to notificationCount to trigger a log event.\n\nThe solution is again to split out the non-reactive code into an Effect Event:\n\n\n```javascript\nfunctionChat({roomId,notificationCount}){constonVisit=useEffectEvent(visitedRoomId=>{logVisit(visitedRoomId,notificationCount);});useEffect(()=>{onVisit(roomId);},[roomId]);// \u2705 All dependencies declared// ...}\n```\n\n\nYou want your logic to be reactive with regards to roomId , so you read roomId inside of your Effect. However, you don\u2019t want a change to notificationCount to log an extra visit, so you read notificationCount inside of the Effect Event. Learn more about reading the latest props and state from Effects using Effect Events.\n\n\n### Does some reactive value change unintentionally?\n\n\nSometimes, you do want your Effect to \u201creact\u201d to a certain value, but that value changes more often than you\u2019d like\u2014and might not reflect any actual change from the user\u2019s perspective. For example, let\u2019s say that you create an options object in the body of your component, and then read that object from inside of your Effect:\n\n\n```javascript\nfunctionChatRoom({roomId}){// ...constoptions={serverUrl:serverUrl,roomId:roomId};useEffect(()=>{constconnection=createConnection(options);connection.connect();// ...\n```\n\n\nThis object is declared in the component body, so it\u2019s a reactive value. When you read a reactive value like this inside an Effect, you declare it as a dependency. This ensures your Effect \u201creacts\u201d to its changes:\n\n\n```javascript\n// ...useEffect(()=>{constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[options]);// \u2705 All dependencies declared// ...\n```\n\n\nIt is important to declare it as a dependency! This ensures, for example, that if the roomId changes, your Effect will re-connect to the chat with the new options . However, there is also a problem with the code above. To see it, try typing into the input in the sandbox below, and watch what happens in the console:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId}){const[message,setMessage]=useState('');// Temporarily disable the linter to demonstrate the problem// eslint-disable-next-line react-hooks/exhaustive-depsconstoptions={serverUrl:serverUrl,roomId:roomId};useEffect(()=>{constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[options]);return(<><h1>Welcome to the{roomId}room!</h1><inputvalue={message}onChange={e=>setMessage(e.target.value)}/></>);}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><hr/><ChatRoomroomId={roomId}/></>);}\n```\n\n\nIn the sandbox above, the input only updates the message state variable. From the user\u2019s perspective, this should not affect the chat connection. However, every time you update the message , your component re-renders. When your component re-renders, the code inside of it runs again from scratch.\n\nA new options object is created from scratch on every re-render of the ChatRoom component. React sees that the options object is a different object from the options object created during the last render. This is why it re-synchronizes your Effect (which depends on options ), and the chat re-connects as you type.\n\nThis problem only affects objects and functions. In JavaScript, each newly created object and function is considered distinct from all the others. It doesn\u2019t matter that the contents inside of them may be the same!\n\n\n```javascript\n// During the first renderconstoptions1={serverUrl:'https://localhost:1234',roomId:'music'};// During the next renderconstoptions2={serverUrl:'https://localhost:1234',roomId:'music'};// These are two different objects!console.log(Object.is(options1,options2));// false\n```\n\n\nObject and function dependencies can make your Effect re-synchronize more often than you need.\n\nThis is why, whenever possible, you should try to avoid objects and functions as your Effect\u2019s dependencies. Instead, try moving them outside the component, inside the Effect, or extracting primitive values out of them.\n\nIf the object does not depend on any props and state, you can move that object outside your component:\n\n\n```javascript\nconstoptions={serverUrl:'https://localhost:1234',roomId:'music'};functionChatRoom(){const[message,setMessage]=useState('');useEffect(()=>{constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[]);// \u2705 All dependencies declared// ...\n```\n\n\nThis way, you prove to the linter that it\u2019s not reactive. It can\u2019t change as a result of a re-render, so it doesn\u2019t need to be a dependency. Now re-rendering ChatRoom won\u2019t cause your Effect to re-synchronize.\n\nThis works for functions too:\n\n\n```javascript\nfunctioncreateOptions(){return{serverUrl:'https://localhost:1234',roomId:'music'};}functionChatRoom(){const[message,setMessage]=useState('');useEffect(()=>{constoptions=createOptions();constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[]);// \u2705 All dependencies declared// ...\n```\n\n\nSince createOptions is declared outside your component, it\u2019s not a reactive value. This is why it doesn\u2019t need to be specified in your Effect\u2019s dependencies, and why it won\u2019t ever cause your Effect to re-synchronize.\n\nIf your object depends on some reactive value that may change as a result of a re-render, like a roomId prop, you can\u2019t pull it outside your component. You can, however, move its creation inside of your Effect\u2019s code:\n\n\n```javascript\nconstserverUrl='https://localhost:1234';functionChatRoom({roomId}){const[message,setMessage]=useState('');useEffect(()=>{constoptions={serverUrl:serverUrl,roomId:roomId};constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[roomId]);// \u2705 All dependencies declared// ...\n```\n\n\nNow that options is declared inside of your Effect, it is no longer a dependency of your Effect. Instead, the only reactive value used by your Effect is roomId . Since roomId is not an object or function, you can be sure that it won\u2019t be unintentionally different. In JavaScript, numbers and strings are compared by their content:\n\n\n```javascript\n// During the first renderconstroomId1='music';// During the next renderconstroomId2='music';// These two strings are the same!console.log(Object.is(roomId1,roomId2));// true\n```\n\n\nThanks to this fix, the chat no longer re-connects if you edit the input:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId}){const[message,setMessage]=useState('');useEffect(()=>{constoptions={serverUrl:serverUrl,roomId:roomId};constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[roomId]);return(<><h1>Welcome to the{roomId}room!</h1><inputvalue={message}onChange={e=>setMessage(e.target.value)}/></>);}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><hr/><ChatRoomroomId={roomId}/></>);}\n```\n\n\nHowever, it does re-connect when you change the roomId dropdown, as you would expect.\n\nThis works for functions, too:\n\n\n```javascript\nconstserverUrl='https://localhost:1234';functionChatRoom({roomId}){const[message,setMessage]=useState('');useEffect(()=>{functioncreateOptions(){return{serverUrl:serverUrl,roomId:roomId};}constoptions=createOptions();constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[roomId]);// \u2705 All dependencies declared// ...\n```\n\n\nYou can write your own functions to group pieces of logic inside your Effect. As long as you also declare them inside your Effect, they\u2019re not reactive values, and so they don\u2019t need to be dependencies of your Effect.\n\nSometimes, you may receive an object from props:\n\n\n```javascript\nfunctionChatRoom({options}){const[message,setMessage]=useState('');useEffect(()=>{constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[options]);// \u2705 All dependencies declared// ...\n```\n\n\nThe risk here is that the parent component will create the object during rendering:\n\n\n```javascript\n<ChatRoomroomId={roomId}options={{serverUrl:serverUrl,roomId:roomId}}/>\n```\n\n\nThis would cause your Effect to re-connect every time the parent component re-renders. To fix this, read information from the object outside the Effect, and avoid having object and function dependencies:\n\n\n```javascript\nfunctionChatRoom({options}){const[message,setMessage]=useState('');const{roomId,serverUrl}=options;useEffect(()=>{constconnection=createConnection({roomId:roomId,serverUrl:serverUrl});connection.connect();return()=>connection.disconnect();},[roomId,serverUrl]);// \u2705 All dependencies declared// ...\n```\n\n\nThe logic gets a little repetitive (you read some values from an object outside an Effect, and then create an object with the same values inside the Effect). But it makes it very explicit what information your Effect actually depends on. If an object is re-created unintentionally by the parent component, the chat would not re-connect. However, if options.roomId or options.serverUrl really are different, the chat would re-connect.\n\nThe same approach can work for functions. For example, suppose the parent component passes a function:\n\n\n```javascript\n<ChatRoomroomId={roomId}getOptions={()=>{return{serverUrl:serverUrl,roomId:roomId};}}/>\n```\n\n\nTo avoid making it a dependency (and causing it to re-connect on re-renders), call it outside the Effect. This gives you the roomId and serverUrl values that aren\u2019t objects, and that you can read from inside your Effect:\n\n\n```javascript\nfunctionChatRoom({getOptions}){const[message,setMessage]=useState('');const{roomId,serverUrl}=getOptions();useEffect(()=>{constconnection=createConnection({roomId:roomId,serverUrl:serverUrl});connection.connect();return()=>connection.disconnect();},[roomId,serverUrl]);// \u2705 All dependencies declared// ...\n```\n\n\nThis only works for pure functions because they are safe to call during rendering. If your function is an event handler, but you don\u2019t want its changes to re-synchronize your Effect, wrap it into an Effect Event instead.", "source": "https://react.dev/learn/removing-effect-dependencies", "category": "Removing Effect Dependencies"}
{"instruction": "Show me a code example of Removing unnecessary dependencies in React.", "input": "", "output": "Every time you adjust the Effect\u2019s dependencies to reflect the code, look at the dependency list. Does it make sense for the Effect to re-run when any of these dependencies change? Sometimes, the answer is \u201cno\u201d:\n\n* You might want to re-execute different parts of your Effect under different conditions.\n* You might want to only read the latest value of some dependency instead of \u201creacting\u201d to its changes.\n* A dependency may change too often unintentionally because it\u2019s an object or a function.\n\nTo find the right solution, you\u2019ll need to answer a few questions about your Effect. Let\u2019s walk through them.\n\n\n### Should this code move to an event handler?\n\n\nThe first thing you should think about is whether this code should be an Effect at all.\n\nImagine a form. On submit, you set the submitted state variable to true . You need to send a POST request and show a notification. You\u2019ve put this logic inside an Effect that \u201creacts\u201d to submitted being true :\n\n\n```javascript\nfunctionForm(){const[submitted,setSubmitted]=useState(false);useEffect(()=>{if(submitted){// \ud83d\udd34 Avoid: Event-specific logic inside an Effectpost('/api/register');showNotification('Successfully registered!');}},[submitted]);functionhandleSubmit(){setSubmitted(true);}// ...}\n```\n\n\nLater, you want to style the notification message according to the current theme, so you read the current theme. Since theme is declared in the component body, it is a reactive value, so you add it as a dependency:\n\n\n```javascript\nfunctionForm(){const[submitted,setSubmitted]=useState(false);consttheme=useContext(ThemeContext);useEffect(()=>{if(submitted){// \ud83d\udd34 Avoid: Event-specific logic inside an Effectpost('/api/register');showNotification('Successfully registered!',theme);}},[submitted,theme]);// \u2705 All dependencies declaredfunctionhandleSubmit(){setSubmitted(true);}// ...}\n```\n\n\nBy doing this, you\u2019ve introduced a bug. Imagine you submit the form first and then switch between Dark and Light themes. The theme will change, the Effect will re-run, and so it will display the same notification again!\n\nThe problem here is that this shouldn\u2019t be an Effect in the first place. You want to send this POST request and show the notification in response to submitting the form, which is a particular interaction. To run some code in response to particular interaction, put that logic directly into the corresponding event handler:\n\n\n```javascript\nfunctionForm(){consttheme=useContext(ThemeContext);functionhandleSubmit(){// \u2705 Good: Event-specific logic is called from event handlerspost('/api/register');showNotification('Successfully registered!',theme);}// ...}\n```\n\n\nNow that the code is in an event handler, it\u2019s not reactive\u2014so it will only run when the user submits the form. Read more about choosing between event handlers and Effects and how to delete unnecessary Effects.\n\n\n### Is your Effect doing several unrelated things?\n\n\nThe next question you should ask yourself is whether your Effect is doing several unrelated things.\n\nImagine you\u2019re creating a shipping form where the user needs to choose their city and area. You fetch the list of cities from the server according to the selected country to show them in a dropdown:\n\n\n```javascript\nfunctionShippingForm({country}){const[cities,setCities]=useState(null);const[city,setCity]=useState(null);useEffect(()=>{letignore=false;fetch(`/api/cities?country=${country}`).then(response=>response.json()).then(json=>{if(!ignore){setCities(json);}});return()=>{ignore=true;};},[country]);// \u2705 All dependencies declared// ...\n```\n\n\nThis is a good example of fetching data in an Effect. You are synchronizing the cities state with the network according to the country prop. You can\u2019t do this in an event handler because you need to fetch as soon as ShippingForm is displayed and whenever the country changes (no matter which interaction causes it).\n\nNow let\u2019s say you\u2019re adding a second select box for city areas, which should fetch the areas for the currently selected city . You might start by adding a second fetch call for the list of areas inside the same Effect:\n\n\n```javascript\nfunctionShippingForm({country}){const[cities,setCities]=useState(null);const[city,setCity]=useState(null);const[areas,setAreas]=useState(null);useEffect(()=>{letignore=false;fetch(`/api/cities?country=${country}`).then(response=>response.json()).then(json=>{if(!ignore){setCities(json);}});// \ud83d\udd34 Avoid: A single Effect synchronizes two independent processesif(city){fetch(`/api/areas?city=${city}`).then(response=>response.json()).then(json=>{if(!ignore){setAreas(json);}});}return()=>{ignore=true;};},[country,city]);// \u2705 All dependencies declared// ...\n```\n\n\nHowever, since the Effect now uses the city state variable, you\u2019ve had to add city to the list of dependencies. That, in turn, introduced a problem: when the user selects a different city, the Effect will re-run and call fetchCities(country) . As a result, you will be unnecessarily refetching the list of cities many times.\n\nThe problem with this code is that you\u2019re synchronizing two different unrelated things:\n\n1. You want to synchronize the cities state to the network based on the country prop.\n2. You want to synchronize the areas state to the network based on the city state.\n\nSplit the logic into two Effects, each of which reacts to the prop that it needs to synchronize with:\n\n\n```javascript\nfunctionShippingForm({country}){const[cities,setCities]=useState(null);useEffect(()=>{letignore=false;fetch(`/api/cities?country=${country}`).then(response=>response.json()).then(json=>{if(!ignore){setCities(json);}});return()=>{ignore=true;};},[country]);// \u2705 All dependencies declaredconst[city,setCity]=useState(null);const[areas,setAreas]=useState(null);useEffect(()=>{if(city){letignore=false;fetch(`/api/areas?city=${city}`).then(response=>response.json()).then(json=>{if(!ignore){setAreas(json);}});return()=>{ignore=true;};}},[city]);// \u2705 All dependencies declared// ...\n```\n\n\nNow the first Effect only re-runs if the country changes, while the second Effect re-runs when the city changes. You\u2019ve separated them by purpose: two different things are synchronized by two separate Effects. Two separate Effects have two separate dependency lists, so they won\u2019t trigger each other unintentionally.\n\nThe final code is longer than the original, but splitting these Effects is still correct. Each Effect should represent an independent synchronization process. In this example, deleting one Effect doesn\u2019t break the other Effect\u2019s logic. This means they synchronize different things, and it\u2019s good to split them up. If you\u2019re concerned about duplication, you can improve this code by extracting repetitive logic into a custom Hook.\n\n\n### Are you reading some state to calculate the next state?\n\n\nThis Effect updates the messages state variable with a newly created array every time a new message arrives:\n\n\n```javascript\nfunctionChatRoom({roomId}){const[messages,setMessages]=useState([]);useEffect(()=>{constconnection=createConnection();connection.connect();connection.on('message',(receivedMessage)=>{setMessages([...messages,receivedMessage]);});// ...\n```\n\n\nIt uses the messages variable to create a new array starting with all the existing messages and adds the new message at the end. However, since messages is a reactive value read by an Effect, it must be a dependency:\n\n\n```javascript\nfunctionChatRoom({roomId}){const[messages,setMessages]=useState([]);useEffect(()=>{constconnection=createConnection();connection.connect();connection.on('message',(receivedMessage)=>{setMessages([...messages,receivedMessage]);});return()=>connection.disconnect();},[roomId,messages]);// \u2705 All dependencies declared// ...\n```\n\n\nAnd making messages a dependency introduces a problem.\n\nEvery time you receive a message, setMessages() causes the component to re-render with a new messages array that includes the received message. However, since this Effect now depends on messages , this will also re-synchronize the Effect. So every new message will make the chat re-connect. The user would not like that!\n\nTo fix the issue, don\u2019t read messages inside the Effect. Instead, pass an updater function to setMessages :\n\n\n```javascript\nfunctionChatRoom({roomId}){const[messages,setMessages]=useState([]);useEffect(()=>{constconnection=createConnection();connection.connect();connection.on('message',(receivedMessage)=>{setMessages(msgs=>[...msgs,receivedMessage]);});return()=>connection.disconnect();},[roomId]);// \u2705 All dependencies declared// ...\n```\n\n\nNotice how your Effect does not read the messages variable at all now. You only need to pass an updater function like msgs => [...msgs, receivedMessage] . React puts your updater function in a queue and will provide the msgs argument to it during the next render. This is why the Effect itself doesn\u2019t need to depend on messages anymore. As a result of this fix, receiving a chat message will no longer make the chat re-connect.\n\n\n### Do you want to read a value without \u201creacting\u201d to its changes?\n\n\n\n### Under Construction\n\n\nThis section describes an experimental API that has not yet been released in a stable version of React.\n\nSuppose that you want to play a sound when the user receives a new message unless isMuted is true :\n\n\n```javascript\nfunctionChatRoom({roomId}){const[messages,setMessages]=useState([]);const[isMuted,setIsMuted]=useState(false);useEffect(()=>{constconnection=createConnection();connection.connect();connection.on('message',(receivedMessage)=>{setMessages(msgs=>[...msgs,receivedMessage]);if(!isMuted){playSound();}});// ...\n```\n\n\nSince your Effect now uses isMuted in its code, you have to add it to the dependencies:\n\n\n```javascript\nfunctionChatRoom({roomId}){const[messages,setMessages]=useState([]);const[isMuted,setIsMuted]=useState(false);useEffect(()=>{constconnection=createConnection();connection.connect();connection.on('message',(receivedMessage)=>{setMessages(msgs=>[...msgs,receivedMessage]);if(!isMuted){playSound();}});return()=>connection.disconnect();},[roomId,isMuted]);// \u2705 All dependencies declared// ...\n```\n\n\nThe problem is that every time isMuted changes (for example, when the user presses the \u201cMuted\u201d toggle), the Effect will re-synchronize, and reconnect to the chat. This is not the desired user experience! (In this example, even disabling the linter would not work\u2014if you do that, isMuted would get \u201cstuck\u201d with its old value.)\n\nTo solve this problem, you need to extract the logic that shouldn\u2019t be reactive out of the Effect. You don\u2019t want this Effect to \u201creact\u201d to the changes in isMuted . Move this non-reactive piece of logic into an Effect Event:\n\n\n```javascript\nimport{useState,useEffect,useEffectEvent}from'react';functionChatRoom({roomId}){const[messages,setMessages]=useState([]);const[isMuted,setIsMuted]=useState(false);constonMessage=useEffectEvent(receivedMessage=>{setMessages(msgs=>[...msgs,receivedMessage]);if(!isMuted){playSound();}});useEffect(()=>{constconnection=createConnection();connection.connect();connection.on('message',(receivedMessage)=>{onMessage(receivedMessage);});return()=>connection.disconnect();},[roomId]);// \u2705 All dependencies declared// ...\n```\n\n\nEffect Events let you split an Effect into reactive parts (which should \u201creact\u201d to reactive values like roomId and their changes) and non-reactive parts (which only read their latest values, like onMessage reads isMuted ). Now that you read isMuted inside an Effect Event, it doesn\u2019t need to be a dependency of your Effect. As a result, the chat won\u2019t re-connect when you toggle the \u201cMuted\u201d setting on and off, solving the original issue!\n\nYou might run into a similar problem when your component receives an event handler as a prop:\n\n\n```javascript\nfunctionChatRoom({roomId,onReceiveMessage}){const[messages,setMessages]=useState([]);useEffect(()=>{constconnection=createConnection();connection.connect();connection.on('message',(receivedMessage)=>{onReceiveMessage(receivedMessage);});return()=>connection.disconnect();},[roomId,onReceiveMessage]);// \u2705 All dependencies declared// ...\n```\n\n\nSuppose that the parent component passes a different onReceiveMessage function on every render:\n\n\n```javascript\n<ChatRoomroomId={roomId}onReceiveMessage={receivedMessage=>{// ...}}/>\n```\n\n\nSince onReceiveMessage is a dependency, it would cause the Effect to re-synchronize after every parent re-render. This would make it re-connect to the chat. To solve this, wrap the call in an Effect Event:\n\n\n```javascript\nfunctionChatRoom({roomId,onReceiveMessage}){const[messages,setMessages]=useState([]);constonMessage=useEffectEvent(receivedMessage=>{onReceiveMessage(receivedMessage);});useEffect(()=>{constconnection=createConnection();connection.connect();connection.on('message',(receivedMessage)=>{onMessage(receivedMessage);});return()=>connection.disconnect();},[roomId]);// \u2705 All dependencies declared// ...\n```\n\n\nEffect Events aren\u2019t reactive, so you don\u2019t need to specify them as dependencies. As a result, the chat will no longer re-connect even if the parent component passes a function that\u2019s different on every re-render.\n\nIn this example, you want to log a visit every time roomId changes. You want to include the current notificationCount with every log, but you don\u2019t want a change to notificationCount to trigger a log event.\n\nThe solution is again to split out the non-reactive code into an Effect Event:\n\n\n```javascript\nfunctionChat({roomId,notificationCount}){constonVisit=useEffectEvent(visitedRoomId=>{logVisit(visitedRoomId,notificationCount);});useEffect(()=>{onVisit(roomId);},[roomId]);// \u2705 All dependencies declared// ...}\n```\n\n\nYou want your logic to be reactive with regards to roomId , so you read roomId inside of your Effect. However, you don\u2019t want a change to notificationCount to log an extra visit, so you read notificationCount inside of the Effect Event. Learn more about reading the latest props and state from Effects using Effect Events.\n\n\n### Does some reactive value change unintentionally?\n\n\nSometimes, you do want your Effect to \u201creact\u201d to a certain value, but that value changes more often than you\u2019d like\u2014and might not reflect any actual change from the user\u2019s perspective. For example, let\u2019s say that you create an options object in the body of your component, and then read that object from inside of your Effect:\n\n\n```javascript\nfunctionChatRoom({roomId}){// ...constoptions={serverUrl:serverUrl,roomId:roomId};useEffect(()=>{constconnection=createConnection(options);connection.connect();// ...\n```\n\n\nThis object is declared in the component body, so it\u2019s a reactive value. When you read a reactive value like this inside an Effect, you declare it as a dependency. This ensures your Effect \u201creacts\u201d to its changes:\n\n\n```javascript\n// ...useEffect(()=>{constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[options]);// \u2705 All dependencies declared// ...\n```\n\n\nIt is important to declare it as a dependency! This ensures, for example, that if the roomId changes, your Effect will re-connect to the chat with the new options . However, there is also a problem with the code above. To see it, try typing into the input in the sandbox below, and watch what happens in the console:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId}){const[message,setMessage]=useState('');// Temporarily disable the linter to demonstrate the problem// eslint-disable-next-line react-hooks/exhaustive-depsconstoptions={serverUrl:serverUrl,roomId:roomId};useEffect(()=>{constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[options]);return(<><h1>Welcome to the{roomId}room!</h1><inputvalue={message}onChange={e=>setMessage(e.target.value)}/></>);}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><hr/><ChatRoomroomId={roomId}/></>);}\n```\n\n\nIn the sandbox above, the input only updates the message state variable. From the user\u2019s perspective, this should not affect the chat connection. However, every time you update the message , your component re-renders. When your component re-renders, the code inside of it runs again from scratch.\n\nA new options object is created from scratch on every re-render of the ChatRoom component. React sees that the options object is a different object from the options object created during the last render. This is why it re-synchronizes your Effect (which depends on options ), and the chat re-connects as you type.\n\nThis problem only affects objects and functions. In JavaScript, each newly created object and function is considered distinct from all the others. It doesn\u2019t matter that the contents inside of them may be the same!\n\n\n```javascript\n// During the first renderconstoptions1={serverUrl:'https://localhost:1234',roomId:'music'};// During the next renderconstoptions2={serverUrl:'https://localhost:1234',roomId:'music'};// These are two different objects!console.log(Object.is(options1,options2));// false\n```\n\n\nObject and function dependencies can make your Effect re-synchronize more often than you need.\n\nThis is why, whenever possible, you should try to avoid objects and functions as your Effect\u2019s dependencies. Instead, try moving them outside the component, inside the Effect, or extracting primitive values out of them.\n\nIf the object does not depend on any props and state, you can move that object outside your component:\n\n\n```javascript\nconstoptions={serverUrl:'https://localhost:1234',roomId:'music'};functionChatRoom(){const[message,setMessage]=useState('');useEffect(()=>{constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[]);// \u2705 All dependencies declared// ...\n```\n\n\nThis way, you prove to the linter that it\u2019s not reactive. It can\u2019t change as a result of a re-render, so it doesn\u2019t need to be a dependency. Now re-rendering ChatRoom won\u2019t cause your Effect to re-synchronize.\n\nThis works for functions too:\n\n\n```javascript\nfunctioncreateOptions(){return{serverUrl:'https://localhost:1234',roomId:'music'};}functionChatRoom(){const[message,setMessage]=useState('');useEffect(()=>{constoptions=createOptions();constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[]);// \u2705 All dependencies declared// ...\n```\n\n\nSince createOptions is declared outside your component, it\u2019s not a reactive value. This is why it doesn\u2019t need to be specified in your Effect\u2019s dependencies, and why it won\u2019t ever cause your Effect to re-synchronize.\n\nIf your object depends on some reactive value that may change as a result of a re-render, like a roomId prop, you can\u2019t pull it outside your component. You can, however, move its creation inside of your Effect\u2019s code:\n\n\n```javascript\nconstserverUrl='https://localhost:1234';functionChatRoom({roomId}){const[message,setMessage]=useState('');useEffect(()=>{constoptions={serverUrl:serverUrl,roomId:roomId};constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[roomId]);// \u2705 All dependencies declared// ...\n```\n\n\nNow that options is declared inside of your Effect, it is no longer a dependency of your Effect. Instead, the only reactive value used by your Effect is roomId . Since roomId is not an object or function, you can be sure that it won\u2019t be unintentionally different. In JavaScript, numbers and strings are compared by their content:\n\n\n```javascript\n// During the first renderconstroomId1='music';// During the next renderconstroomId2='music';// These two strings are the same!console.log(Object.is(roomId1,roomId2));// true\n```\n\n\nThanks to this fix, the chat no longer re-connects if you edit the input:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId}){const[message,setMessage]=useState('');useEffect(()=>{constoptions={serverUrl:serverUrl,roomId:roomId};constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[roomId]);return(<><h1>Welcome to the{roomId}room!</h1><inputvalue={message}onChange={e=>setMessage(e.target.value)}/></>);}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><hr/><ChatRoomroomId={roomId}/></>);}\n```\n\n\nHowever, it does re-connect when you change the roomId dropdown, as you would expect.\n\nThis works for functions, too:\n\n\n```javascript\nconstserverUrl='https://localhost:1234';functionChatRoom({roomId}){const[message,setMessage]=useState('');useEffect(()=>{functioncreateOptions(){return{serverUrl:serverUrl,roomId:roomId};}constoptions=createOptions();constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[roomId]);// \u2705 All dependencies declared// ...\n```\n\n\nYou can write your own functions to group pieces of logic inside your Effect. As long as you also declare them inside your Effect, they\u2019re not reactive values, and so they don\u2019t need to be dependencies of your Effect.\n\nSometimes, you may receive an object from props:\n\n\n```javascript\nfunctionChatRoom({options}){const[message,setMessage]=useState('');useEffect(()=>{constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[options]);// \u2705 All dependencies declared// ...\n```\n\n\nThe risk here is that the parent component will create the object during rendering:\n\n\n```javascript\n<ChatRoomroomId={roomId}options={{serverUrl:serverUrl,roomId:roomId}}/>\n```\n\n\nThis would cause your Effect to re-connect every time the parent component re-renders. To fix this, read information from the object outside the Effect, and avoid having object and function dependencies:\n\n\n```javascript\nfunctionChatRoom({options}){const[message,setMessage]=useState('');const{roomId,serverUrl}=options;useEffect(()=>{constconnection=createConnection({roomId:roomId,serverUrl:serverUrl});connection.connect();return()=>connection.disconnect();},[roomId,serverUrl]);// \u2705 All dependencies declared// ...\n```\n\n\nThe logic gets a little repetitive (you read some values from an object outside an Effect, and then create an object with the same values inside the Effect). But it makes it very explicit what information your Effect actually depends on. If an object is re-created unintentionally by the parent component, the chat would not re-connect. However, if options.roomId or options.serverUrl really are different, the chat would re-connect.\n\nThe same approach can work for functions. For example, suppose the parent component passes a function:\n\n\n```javascript\n<ChatRoomroomId={roomId}getOptions={()=>{return{serverUrl:serverUrl,roomId:roomId};}}/>\n```\n\n\nTo avoid making it a dependency (and causing it to re-connect on re-renders), call it outside the Effect. This gives you the roomId and serverUrl values that aren\u2019t objects, and that you can read from inside your Effect:\n\n\n```javascript\nfunctionChatRoom({getOptions}){const[message,setMessage]=useState('');const{roomId,serverUrl}=getOptions();useEffect(()=>{constconnection=createConnection({roomId:roomId,serverUrl:serverUrl});connection.connect();return()=>connection.disconnect();},[roomId,serverUrl]);// \u2705 All dependencies declared// ...\n```\n\n\nThis only works for pure functions because they are safe to call during rendering. If your function is an event handler, but you don\u2019t want its changes to re-synchronize your Effect, wrap it into an Effect Event instead.", "source": "https://react.dev/learn/removing-effect-dependencies", "category": "Removing Effect Dependencies"}
{"instruction": "Explain the concept of Step 1: Trigger a render in React.", "input": "", "output": "There are two reasons for a component to render:\n\n1. It\u2019s the component\u2019s initial render.\n2. The component\u2019s (or one of its ancestors\u2019) state has been updated.\n\n\n### Initial render\n\n\nWhen your app starts, you need to trigger the initial render. Frameworks and sandboxes sometimes hide this code, but it\u2019s done by calling createRoot with the target DOM node, and then calling its render method with your component:\n\n\n```javascript\nimportImagefrom'./Image.js';import{createRoot}from'react-dom/client';constroot=createRoot(document.getElementById('root'))root.render(<Image/>);\n```\n\n\nTry commenting out the root.render() call and see the component disappear!\n\n\n### Re-renders when state updates\n\n\nOnce the component has been initially rendered, you can trigger further renders by updating its state with the set function. Updating your component\u2019s state automatically queues a render. (You can imagine these as a restaurant guest ordering tea, dessert, and all sorts of things after putting in their first order, depending on the state of their thirst or hunger.)\n\n1. State update...\n2. ...triggers...\n3. ...render!\n\nIllustrated by Rachel Lee Nabors", "source": "https://react.dev/learn/render-and-commit", "category": "Render and Commit"}
{"instruction": "Show me a code example of Step 1: Trigger a render in React.", "input": "", "output": "There are two reasons for a component to render:\n\n1. It\u2019s the component\u2019s initial render.\n2. The component\u2019s (or one of its ancestors\u2019) state has been updated.\n\n\n### Initial render\n\n\nWhen your app starts, you need to trigger the initial render. Frameworks and sandboxes sometimes hide this code, but it\u2019s done by calling createRoot with the target DOM node, and then calling its render method with your component:\n\n\n```javascript\nimportImagefrom'./Image.js';import{createRoot}from'react-dom/client';constroot=createRoot(document.getElementById('root'))root.render(<Image/>);\n```\n\n\nTry commenting out the root.render() call and see the component disappear!\n\n\n### Re-renders when state updates\n\n\nOnce the component has been initially rendered, you can trigger further renders by updating its state with the set function. Updating your component\u2019s state automatically queues a render. (You can imagine these as a restaurant guest ordering tea, dessert, and all sorts of things after putting in their first order, depending on the state of their thirst or hunger.)\n\n1. State update...\n2. ...triggers...\n3. ...render!\n\nIllustrated by Rachel Lee Nabors", "source": "https://react.dev/learn/render-and-commit", "category": "Render and Commit"}
{"instruction": "Can you describe Step 2: React renders your components in the context of React?", "input": "", "output": "After you trigger a render, React calls your components to figure out what to display on screen. \u201cRendering\u201d is React calling your components.\n\n* On initial render, React will call the root component.\n* For subsequent renders, React will call the function component whose state update triggered the render.\n\nThis process is recursive: if the updated component returns some other component, React will render that component next, and if that component also returns something, it will render that component next, and so on. The process will continue until there are no more nested components and React knows exactly what should be displayed on screen.\n\nIn the following example, React will call Gallery() and Image() several times:\n\n\n```javascript\nexportdefaultfunctionGallery(){return(<section><h1>Inspiring Sculptures</h1><Image/><Image/><Image/></section>);}functionImage(){return(<imgsrc=\"https://i.imgur.com/ZF6s192.jpg\"alt=\"'Floralis Gen\u00e9rica' by Eduardo Catalano: a gigantic metallic flower sculpture with reflective petals\"/>);}\n```\n\n\n* During the initial render, React will create the DOM nodes for <section> , <h1> , and three <img> tags.\n* During a re-render, React will calculate which of their properties, if any, have changed since the previous render. It won\u2019t do anything with that information until the next step, the commit phase.\n\n\n### Pitfall\n\n\nRendering must always be a pure calculation :\n\n* Same inputs, same output. Given the same inputs, a component should always return the same JSX. (When someone orders a salad with tomatoes, they should not receive a salad with onions!)\n* It minds its own business. It should not change any objects or variables that existed before rendering. (One order should not change anyone else\u2019s order.)\n\nOtherwise, you can encounter confusing bugs and unpredictable behavior as your codebase grows in complexity. When developing in \u201cStrict Mode\u201d, React calls each component\u2019s function twice, which can help surface mistakes caused by impure functions.\n\nThe default behavior of rendering all components nested within the updated component is not optimal for performance if the updated component is very high in the tree. If you run into a performance issue, there are several opt-in ways to solve it described in the Performance section. Don\u2019t optimize prematurely!", "source": "https://react.dev/learn/render-and-commit", "category": "Render and Commit"}
{"instruction": "Show me a code example of Step 2: React renders your components in React.", "input": "", "output": "After you trigger a render, React calls your components to figure out what to display on screen. \u201cRendering\u201d is React calling your components.\n\n* On initial render, React will call the root component.\n* For subsequent renders, React will call the function component whose state update triggered the render.\n\nThis process is recursive: if the updated component returns some other component, React will render that component next, and if that component also returns something, it will render that component next, and so on. The process will continue until there are no more nested components and React knows exactly what should be displayed on screen.\n\nIn the following example, React will call Gallery() and Image() several times:\n\n\n```javascript\nexportdefaultfunctionGallery(){return(<section><h1>Inspiring Sculptures</h1><Image/><Image/><Image/></section>);}functionImage(){return(<imgsrc=\"https://i.imgur.com/ZF6s192.jpg\"alt=\"'Floralis Gen\u00e9rica' by Eduardo Catalano: a gigantic metallic flower sculpture with reflective petals\"/>);}\n```\n\n\n* During the initial render, React will create the DOM nodes for <section> , <h1> , and three <img> tags.\n* During a re-render, React will calculate which of their properties, if any, have changed since the previous render. It won\u2019t do anything with that information until the next step, the commit phase.\n\n\n### Pitfall\n\n\nRendering must always be a pure calculation :\n\n* Same inputs, same output. Given the same inputs, a component should always return the same JSX. (When someone orders a salad with tomatoes, they should not receive a salad with onions!)\n* It minds its own business. It should not change any objects or variables that existed before rendering. (One order should not change anyone else\u2019s order.)\n\nOtherwise, you can encounter confusing bugs and unpredictable behavior as your codebase grows in complexity. When developing in \u201cStrict Mode\u201d, React calls each component\u2019s function twice, which can help surface mistakes caused by impure functions.\n\nThe default behavior of rendering all components nested within the updated component is not optimal for performance if the updated component is very high in the tree. If you run into a performance issue, there are several opt-in ways to solve it described in the Performance section. Don\u2019t optimize prematurely!", "source": "https://react.dev/learn/render-and-commit", "category": "Render and Commit"}
{"instruction": "How do I handle Step 3: React commits changes to the DOM in React?", "input": "", "output": "After rendering (calling) your components, React will modify the DOM.\n\n* For the initial render, React will use the appendChild() DOM API to put all the DOM nodes it has created on screen.\n* For re-renders, React will apply the minimal necessary operations (calculated while rendering!) to make the DOM match the latest rendering output.\n\nReact only changes the DOM nodes if there\u2019s a difference between renders. For example, here is a component that re-renders with different props passed from its parent every second. Notice how you can add some text into the <input> , updating its value , but the text doesn\u2019t disappear when the component re-renders:\n\n\n```javascript\nexportdefaultfunctionClock({time}){return(<><h1>{time}</h1><input/></>);}\n```\n\n\nThis works because during this last step, React only updates the content of <h1> with the new time . It sees that the <input> appears in the JSX in the same place as last time, so React doesn\u2019t touch the <input> \u2014or its value !", "source": "https://react.dev/learn/render-and-commit", "category": "Render and Commit"}
{"instruction": "Show me a code example of Step 3: React commits changes to the DOM in React.", "input": "", "output": "After rendering (calling) your components, React will modify the DOM.\n\n* For the initial render, React will use the appendChild() DOM API to put all the DOM nodes it has created on screen.\n* For re-renders, React will apply the minimal necessary operations (calculated while rendering!) to make the DOM match the latest rendering output.\n\nReact only changes the DOM nodes if there\u2019s a difference between renders. For example, here is a component that re-renders with different props passed from its parent every second. Notice how you can add some text into the <input> , updating its value , but the text doesn\u2019t disappear when the component re-renders:\n\n\n```javascript\nexportdefaultfunctionClock({time}){return(<><h1>{time}</h1><input/></>);}\n```\n\n\nThis works because during this last step, React only updates the content of <h1> with the new time . It sees that the <input> appears in the JSX in the same place as last time, so React doesn\u2019t touch the <input> \u2014or its value !", "source": "https://react.dev/learn/render-and-commit", "category": "Render and Commit"}
{"instruction": "Tell me about Epilogue: Browser paint.", "input": "", "output": "After rendering is done and React updated the DOM, the browser will repaint the screen. Although this process is known as \u201cbrowser rendering\u201d, we\u2019ll refer to it as \u201cpainting\u201d to avoid confusion throughout the docs.\n\nIllustrated by Rachel Lee Nabors", "source": "https://react.dev/learn/render-and-commit", "category": "Render and Commit"}
{"instruction": "How do I handle Rendering data from arrays in React?", "input": "", "output": "Say that you have a list of content.\n\n\n```javascript\n<ul><li>Creola Katherine Johnson: mathematician</li><li>Mario Jos\u00e9 Molina-Pasquel Henr\u00edquez: chemist</li><li>Mohammad Abdus Salam: physicist</li><li>Percy Lavon Julian: chemist</li><li>Subrahmanyan Chandrasekhar: astrophysicist</li></ul>\n```\n\n\nThe only difference among those list items is their contents, their data. You will often need to show several instances of the same component using different data when building interfaces: from lists of comments to galleries of profile images. In these situations, you can store that data in JavaScript objects and arrays and use methods like map() and filter() to render lists of components from them.\n\nHere\u2019s a short example of how to generate a list of items from an array:\n\n1. Move the data into an array:\n\n\n```javascript\nconstpeople=['Creola Katherine Johnson: mathematician','Mario Jos\u00e9 Molina-Pasquel Henr\u00edquez: chemist','Mohammad Abdus Salam: physicist','Percy Lavon Julian: chemist','Subrahmanyan Chandrasekhar: astrophysicist'];\n```\n\n\n1. Map the people members into a new array of JSX nodes, listItems :\n\n\n```javascript\nconstlistItems=people.map(person=><li>{person}</li>);\n```\n\n\n1. Return listItems from your component wrapped in a <ul> :\n\n\n```javascript\nreturn<ul>{listItems}</ul>;\n```\n\n\nHere is the result:\n\n\n```javascript\nconstpeople=['Creola Katherine Johnson: mathematician','Mario Jos\u00e9 Molina-Pasquel Henr\u00edquez: chemist','Mohammad Abdus Salam: physicist','Percy Lavon Julian: chemist','Subrahmanyan Chandrasekhar: astrophysicist'];exportdefaultfunctionList(){constlistItems=people.map(person=><li>{person}</li>);return<ul>{listItems}</ul>;}\n```\n\n\nNotice the sandbox above displays a console error:\n\nYou\u2019ll learn how to fix this error later on this page. Before we get to that, let\u2019s add some structure to your data.", "source": "https://react.dev/learn/rendering-lists", "category": "Rendering Lists"}
{"instruction": "Show me a code example of Rendering data from arrays in React.", "input": "", "output": "Say that you have a list of content.\n\n\n```javascript\n<ul><li>Creola Katherine Johnson: mathematician</li><li>Mario Jos\u00e9 Molina-Pasquel Henr\u00edquez: chemist</li><li>Mohammad Abdus Salam: physicist</li><li>Percy Lavon Julian: chemist</li><li>Subrahmanyan Chandrasekhar: astrophysicist</li></ul>\n```\n\n\nThe only difference among those list items is their contents, their data. You will often need to show several instances of the same component using different data when building interfaces: from lists of comments to galleries of profile images. In these situations, you can store that data in JavaScript objects and arrays and use methods like map() and filter() to render lists of components from them.\n\nHere\u2019s a short example of how to generate a list of items from an array:\n\n1. Move the data into an array:\n\n\n```javascript\nconstpeople=['Creola Katherine Johnson: mathematician','Mario Jos\u00e9 Molina-Pasquel Henr\u00edquez: chemist','Mohammad Abdus Salam: physicist','Percy Lavon Julian: chemist','Subrahmanyan Chandrasekhar: astrophysicist'];\n```\n\n\n1. Map the people members into a new array of JSX nodes, listItems :\n\n\n```javascript\nconstlistItems=people.map(person=><li>{person}</li>);\n```\n\n\n1. Return listItems from your component wrapped in a <ul> :\n\n\n```javascript\nreturn<ul>{listItems}</ul>;\n```\n\n\nHere is the result:\n\n\n```javascript\nconstpeople=['Creola Katherine Johnson: mathematician','Mario Jos\u00e9 Molina-Pasquel Henr\u00edquez: chemist','Mohammad Abdus Salam: physicist','Percy Lavon Julian: chemist','Subrahmanyan Chandrasekhar: astrophysicist'];exportdefaultfunctionList(){constlistItems=people.map(person=><li>{person}</li>);return<ul>{listItems}</ul>;}\n```\n\n\nNotice the sandbox above displays a console error:\n\nYou\u2019ll learn how to fix this error later on this page. Before we get to that, let\u2019s add some structure to your data.", "source": "https://react.dev/learn/rendering-lists", "category": "Rendering Lists"}
{"instruction": "What is the process for Filtering arrays of items in a React component?", "input": "", "output": "This data can be structured even more.\n\n\n```javascript\nconstpeople=[{id:0,name:'Creola Katherine Johnson',profession:'mathematician',},{id:1,name:'Mario Jos\u00e9 Molina-Pasquel Henr\u00edquez',profession:'chemist',},{id:2,name:'Mohammad Abdus Salam',profession:'physicist',},{id:3,name:'Percy Lavon Julian',profession:'chemist',},{id:4,name:'Subrahmanyan Chandrasekhar',profession:'astrophysicist',}];\n```\n\n\nLet\u2019s say you want a way to only show people whose profession is 'chemist' . You can use JavaScript\u2019s filter() method to return just those people. This method takes an array of items, passes them through a \u201ctest\u201d (a function that returns true or false ), and returns a new array of only those items that passed the test (returned true ).\n\nYou only want the items where profession is 'chemist' . The \u201ctest\u201d function for this looks like (person) => person.profession === 'chemist' . Here\u2019s how to put it together:\n\n1. Create a new array of just \u201cchemist\u201d people, chemists , by calling filter() on the people filtering by person.profession === 'chemist' :\n\n\n```javascript\nconstchemists=people.filter(person=>person.profession==='chemist');\n```\n\n\n1. Now map over chemists :\n\n\n```javascript\nconstlistItems=chemists.map(person=><li><imgsrc={getImageUrl(person)}alt={person.name}/><p><b>{person.name}:</b>{' '+person.profession+' '}known for{person.accomplishment}</p></li>);\n```\n\n\n1. Lastly, return the listItems from your component:\n\n\n```javascript\nreturn<ul>{listItems}</ul>;\n```\n\n\n\n```javascript\nimport{people}from'./data.js';import{getImageUrl}from'./utils.js';exportdefaultfunctionList(){constchemists=people.filter(person=>person.profession==='chemist');constlistItems=chemists.map(person=><li><imgsrc={getImageUrl(person)}alt={person.name}/><p><b>{person.name}:</b>{' '+person.profession+' '}known for{person.accomplishment}</p></li>);return<ul>{listItems}</ul>;}\n```\n\n\n\n### Pitfall\n\n\nArrow functions implicitly return the expression right after => , so you didn\u2019t need a return statement:\n\n\n```javascript\nconstlistItems=chemists.map(person=><li>...</li>// Implicit return!);\n```\n\n\nHowever, you must write return explicitly if your => is followed by a { curly brace!\n\n\n```javascript\nconstlistItems=chemists.map(person=>{// Curly bracereturn<li>...</li>;});\n```\n\n\nArrow functions containing => { are said to have a \u201cblock body\u201d. They let you write more than a single line of code, but you have to write a return statement yourself. If you forget it, nothing gets returned!", "source": "https://react.dev/learn/rendering-lists", "category": "Rendering Lists"}
{"instruction": "Show me a code example of Filtering arrays of items in React.", "input": "", "output": "This data can be structured even more.\n\n\n```javascript\nconstpeople=[{id:0,name:'Creola Katherine Johnson',profession:'mathematician',},{id:1,name:'Mario Jos\u00e9 Molina-Pasquel Henr\u00edquez',profession:'chemist',},{id:2,name:'Mohammad Abdus Salam',profession:'physicist',},{id:3,name:'Percy Lavon Julian',profession:'chemist',},{id:4,name:'Subrahmanyan Chandrasekhar',profession:'astrophysicist',}];\n```\n\n\nLet\u2019s say you want a way to only show people whose profession is 'chemist' . You can use JavaScript\u2019s filter() method to return just those people. This method takes an array of items, passes them through a \u201ctest\u201d (a function that returns true or false ), and returns a new array of only those items that passed the test (returned true ).\n\nYou only want the items where profession is 'chemist' . The \u201ctest\u201d function for this looks like (person) => person.profession === 'chemist' . Here\u2019s how to put it together:\n\n1. Create a new array of just \u201cchemist\u201d people, chemists , by calling filter() on the people filtering by person.profession === 'chemist' :\n\n\n```javascript\nconstchemists=people.filter(person=>person.profession==='chemist');\n```\n\n\n1. Now map over chemists :\n\n\n```javascript\nconstlistItems=chemists.map(person=><li><imgsrc={getImageUrl(person)}alt={person.name}/><p><b>{person.name}:</b>{' '+person.profession+' '}known for{person.accomplishment}</p></li>);\n```\n\n\n1. Lastly, return the listItems from your component:\n\n\n```javascript\nreturn<ul>{listItems}</ul>;\n```\n\n\n\n```javascript\nimport{people}from'./data.js';import{getImageUrl}from'./utils.js';exportdefaultfunctionList(){constchemists=people.filter(person=>person.profession==='chemist');constlistItems=chemists.map(person=><li><imgsrc={getImageUrl(person)}alt={person.name}/><p><b>{person.name}:</b>{' '+person.profession+' '}known for{person.accomplishment}</p></li>);return<ul>{listItems}</ul>;}\n```\n\n\n\n### Pitfall\n\n\nArrow functions implicitly return the expression right after => , so you didn\u2019t need a return statement:\n\n\n```javascript\nconstlistItems=chemists.map(person=><li>...</li>// Implicit return!);\n```\n\n\nHowever, you must write return explicitly if your => is followed by a { curly brace!\n\n\n```javascript\nconstlistItems=chemists.map(person=>{// Curly bracereturn<li>...</li>;});\n```\n\n\nArrow functions containing => { are said to have a \u201cblock body\u201d. They let you write more than a single line of code, but you have to write a return statement yourself. If you forget it, nothing gets returned!", "source": "https://react.dev/learn/rendering-lists", "category": "Rendering Lists"}
{"instruction": "Explain the concept of Keeping list items in order withkey in React.", "input": "", "output": "Notice that all the sandboxes above show an error in the console:\n\nYou need to give each array item a key \u2014 a string or a number that uniquely identifies it among other items in that array:\n\n\n```javascript\n<likey={person.id}>...</li>\n```\n\n\n\n### Note\n\n\nJSX elements directly inside a map() call always need keys!\n\nKeys tell React which array item each component corresponds to, so that it can match them up later. This becomes important if your array items can move (e.g. due to sorting), get inserted, or get deleted. A well-chosen key helps React infer what exactly has happened, and make the correct updates to the DOM tree.\n\nRather than generating keys on the fly, you should include them in your data:\n\n\n```javascript\nexportconstpeople=[{id:0,// Used in JSX as a keyname:'Creola Katherine Johnson',profession:'mathematician',accomplishment:'spaceflight calculations',imageId:'MK3eW3A'},{id:1,// Used in JSX as a keyname:'Mario Jos\u00e9 Molina-Pasquel Henr\u00edquez',profession:'chemist',accomplishment:'discovery of Arctic ozone hole',imageId:'mynHUSa'},{id:2,// Used in JSX as a keyname:'Mohammad Abdus Salam',profession:'physicist',accomplishment:'electromagnetism theory',imageId:'bE7W1ji'},{id:3,// Used in JSX as a keyname:'Percy Lavon Julian',profession:'chemist',accomplishment:'pioneering cortisone drugs, steroids and birth control pills',imageId:'IOjWm71'},{id:4,// Used in JSX as a keyname:'Subrahmanyan Chandrasekhar',profession:'astrophysicist',accomplishment:'white dwarf star mass calculations',imageId:'lrWQx8l'}];\n```\n\n\nWhat do you do when each item needs to render not one, but several DOM nodes?\n\nThe short <>...</> Fragment syntax won\u2019t let you pass a key, so you need to either group them into a single <div> , or use the slightly longer and more explicit <Fragment> syntax:\n\n\n```javascript\nimport{Fragment}from'react';// ...constlistItems=people.map(person=><Fragmentkey={person.id}><h1>{person.name}</h1><p>{person.bio}</p></Fragment>);\n```\n\n\nFragments disappear from the DOM, so this will produce a flat list of <h1> , <p> , <h1> , <p> , and so on.\n\n\n### Where to get yourkey\n\n\nDifferent sources of data provide different sources of keys:\n\n* Data from a database: If your data is coming from a database, you can use the database keys/IDs, which are unique by nature.\n* Locally generated data: If your data is generated and persisted locally (e.g. notes in a note-taking app), use an incrementing counter, crypto.randomUUID() or a package like uuid when creating items.\n\n\n### Rules of keys\n\n\n* Keys must be unique among siblings. However, it\u2019s okay to use the same keys for JSX nodes in different arrays.\n* Keys must not change or that defeats their purpose! Don\u2019t generate them while rendering.\n\n\n### Why does React need keys?\n\n\nImagine that files on your desktop didn\u2019t have names. Instead, you\u2019d refer to them by their order \u2014 the first file, the second file, and so on. You could get used to it, but once you delete a file, it would get confusing. The second file would become the first file, the third file would be the second file, and so on.\n\nFile names in a folder and JSX keys in an array serve a similar purpose. They let us uniquely identify an item between its siblings. A well-chosen key provides more information than the position within the array. Even if the position changes due to reordering, the key lets React identify the item throughout its lifetime.\n\n\n### Pitfall\n\n\nYou might be tempted to use an item\u2019s index in the array as its key. In fact, that\u2019s what React will use if you don\u2019t specify a key at all. But the order in which you render items will change over time if an item is inserted, deleted, or if the array gets reordered. Index as a key often leads to subtle and confusing bugs.\n\nSimilarly, do not generate keys on the fly, e.g. with key={Math.random()} . This will cause keys to never match up between renders, leading to all your components and DOM being recreated every time. Not only is this slow, but it will also lose any user input inside the list items. Instead, use a stable ID based on the data.\n\nNote that your components won\u2019t receive key as a prop. It\u2019s only used as a hint by React itself. If your component needs an ID, you have to pass it as a separate prop: <Profile key={id} userId={id} /> .", "source": "https://react.dev/learn/rendering-lists", "category": "Rendering Lists"}
{"instruction": "Show me a code example of Keeping list items in order withkey in React.", "input": "", "output": "Notice that all the sandboxes above show an error in the console:\n\nYou need to give each array item a key \u2014 a string or a number that uniquely identifies it among other items in that array:\n\n\n```javascript\n<likey={person.id}>...</li>\n```\n\n\n\n### Note\n\n\nJSX elements directly inside a map() call always need keys!\n\nKeys tell React which array item each component corresponds to, so that it can match them up later. This becomes important if your array items can move (e.g. due to sorting), get inserted, or get deleted. A well-chosen key helps React infer what exactly has happened, and make the correct updates to the DOM tree.\n\nRather than generating keys on the fly, you should include them in your data:\n\n\n```javascript\nexportconstpeople=[{id:0,// Used in JSX as a keyname:'Creola Katherine Johnson',profession:'mathematician',accomplishment:'spaceflight calculations',imageId:'MK3eW3A'},{id:1,// Used in JSX as a keyname:'Mario Jos\u00e9 Molina-Pasquel Henr\u00edquez',profession:'chemist',accomplishment:'discovery of Arctic ozone hole',imageId:'mynHUSa'},{id:2,// Used in JSX as a keyname:'Mohammad Abdus Salam',profession:'physicist',accomplishment:'electromagnetism theory',imageId:'bE7W1ji'},{id:3,// Used in JSX as a keyname:'Percy Lavon Julian',profession:'chemist',accomplishment:'pioneering cortisone drugs, steroids and birth control pills',imageId:'IOjWm71'},{id:4,// Used in JSX as a keyname:'Subrahmanyan Chandrasekhar',profession:'astrophysicist',accomplishment:'white dwarf star mass calculations',imageId:'lrWQx8l'}];\n```\n\n\nWhat do you do when each item needs to render not one, but several DOM nodes?\n\nThe short <>...</> Fragment syntax won\u2019t let you pass a key, so you need to either group them into a single <div> , or use the slightly longer and more explicit <Fragment> syntax:\n\n\n```javascript\nimport{Fragment}from'react';// ...constlistItems=people.map(person=><Fragmentkey={person.id}><h1>{person.name}</h1><p>{person.bio}</p></Fragment>);\n```\n\n\nFragments disappear from the DOM, so this will produce a flat list of <h1> , <p> , <h1> , <p> , and so on.\n\n\n### Where to get yourkey\n\n\nDifferent sources of data provide different sources of keys:\n\n* Data from a database: If your data is coming from a database, you can use the database keys/IDs, which are unique by nature.\n* Locally generated data: If your data is generated and persisted locally (e.g. notes in a note-taking app), use an incrementing counter, crypto.randomUUID() or a package like uuid when creating items.\n\n\n### Rules of keys\n\n\n* Keys must be unique among siblings. However, it\u2019s okay to use the same keys for JSX nodes in different arrays.\n* Keys must not change or that defeats their purpose! Don\u2019t generate them while rendering.\n\n\n### Why does React need keys?\n\n\nImagine that files on your desktop didn\u2019t have names. Instead, you\u2019d refer to them by their order \u2014 the first file, the second file, and so on. You could get used to it, but once you delete a file, it would get confusing. The second file would become the first file, the third file would be the second file, and so on.\n\nFile names in a folder and JSX keys in an array serve a similar purpose. They let us uniquely identify an item between its siblings. A well-chosen key provides more information than the position within the array. Even if the position changes due to reordering, the key lets React identify the item throughout its lifetime.\n\n\n### Pitfall\n\n\nYou might be tempted to use an item\u2019s index in the array as its key. In fact, that\u2019s what React will use if you don\u2019t specify a key at all. But the order in which you render items will change over time if an item is inserted, deleted, or if the array gets reordered. Index as a key often leads to subtle and confusing bugs.\n\nSimilarly, do not generate keys on the fly, e.g. with key={Math.random()} . This will cause keys to never match up between renders, leading to all your components and DOM being recreated every time. Not only is this slow, but it will also lose any user input inside the list items. Instead, use a stable ID based on the data.\n\nNote that your components won\u2019t receive key as a prop. It\u2019s only used as a hint by React itself. If your component needs an ID, you have to pass it as a separate prop: <Profile key={id} userId={id} /> .", "source": "https://react.dev/learn/rendering-lists", "category": "Rendering Lists"}
{"instruction": "What is Adding event handlers in React and how does it work?", "input": "", "output": "To add an event handler, you will first define a function and then pass it as a prop to the appropriate JSX tag. For example, here is a button that doesn\u2019t do anything yet:\n\n\n```javascript\nexportdefaultfunctionButton(){return(<button>I don't do anything</button>);}\n```\n\n\nYou can make it show a message when a user clicks by following these three steps:\n\n1. Declare a function called handleClick inside your Button component.\n2. Implement the logic inside that function (use alert to show the message).\n3. Add onClick={handleClick} to the <button> JSX.\n\n\n```javascript\nexportdefaultfunctionButton(){functionhandleClick(){alert('You clicked me!');}return(<buttononClick={handleClick}>Click me</button>);}\n```\n\n\nYou defined the handleClick function and then passed it as a prop to <button> . handleClick is an event handler. Event handler functions:\n\n* Are usually defined inside your components.\n* Have names that start with handle , followed by the name of the event.\n\nBy convention, it is common to name event handlers as handle followed by the event name. You\u2019ll often see onClick={handleClick} , onMouseEnter={handleMouseEnter} , and so on.\n\nAlternatively, you can define an event handler inline in the JSX:\n\n\n```javascript\n<buttononClick={functionhandleClick(){alert('You clicked me!');}}>\n```\n\n\nOr, more concisely, using an arrow function:\n\n\n```javascript\n<buttononClick={()=>{alert('You clicked me!');}}>\n```\n\n\nAll of these styles are equivalent. Inline event handlers are convenient for short functions.\n\n\n### Pitfall\n\n\nFunctions passed to event handlers must be passed, not called. For example:\n\nThe difference is subtle. In the first example, the handleClick function is passed as an onClick event handler. This tells React to remember it and only call your function when the user clicks the button.\n\nIn the second example, the () at the end of handleClick() fires the function immediately during rendering , without any clicks. This is because JavaScript inside the JSX { and } executes right away.\n\nWhen you write code inline, the same pitfall presents itself in a different way:\n\nPassing inline code like this won\u2019t fire on click\u2014it fires every time the component renders:\n\n\n```javascript\n// This alert fires when the component renders, not when clicked!<buttononClick={alert('You clicked me!')}>\n```\n\n\nIf you want to define your event handler inline, wrap it in an anonymous function like so:\n\n\n```javascript\n<buttononClick={()=>alert('You clicked me!')}>\n```\n\n\nRather than executing the code inside with every render, this creates a function to be called later.\n\nIn both cases, what you want to pass is a function:\n\n* <button onClick={handleClick}> passes the handleClick function.\n* <button onClick={() => alert('...')}> passes the () => alert('...') function.\n\nRead more about arrow functions.\n\n\n### Reading props in event handlers\n\n\nBecause event handlers are declared inside of a component, they have access to the component\u2019s props. Here is a button that, when clicked, shows an alert with its message prop:\n\n\n```javascript\nfunctionAlertButton({message,children}){return(<buttononClick={()=>alert(message)}>{children}</button>);}exportdefaultfunctionToolbar(){return(<div><AlertButtonmessage=\"Playing!\">Play Movie</AlertButton><AlertButtonmessage=\"Uploading!\">Upload Image</AlertButton></div>);}\n```\n\n\nThis lets these two buttons show different messages. Try changing the messages passed to them.\n\n\n### Passing event handlers as props\n\n\nOften you\u2019ll want the parent component to specify a child\u2019s event handler. Consider buttons: depending on where you\u2019re using a Button component, you might want to execute a different function\u2014perhaps one plays a movie and another uploads an image.\n\nTo do this, pass a prop the component receives from its parent as the event handler like so:\n\n\n```javascript\nfunctionButton({onClick,children}){return(<buttononClick={onClick}>{children}</button>);}functionPlayButton({movieName}){functionhandlePlayClick(){alert(`Playing${movieName}!`);}return(<ButtononClick={handlePlayClick}>Play \"{movieName}\"</Button>);}functionUploadButton(){return(<ButtononClick={()=>alert('Uploading!')}>Upload Image</Button>);}exportdefaultfunctionToolbar(){return(<div><PlayButtonmovieName=\"Kiki's Delivery Service\"/><UploadButton/></div>);}\n```\n\n\nHere, the Toolbar component renders a PlayButton and an UploadButton :\n\n* PlayButton passes handlePlayClick as the onClick prop to the Button inside.\n* UploadButton passes () => alert('Uploading!') as the onClick prop to the Button inside.\n\nFinally, your Button component accepts a prop called onClick . It passes that prop directly to the built-in browser <button> with onClick={onClick} . This tells React to call the passed function on click.\n\nIf you use a design system , it\u2019s common for components like buttons to contain styling but not specify behavior. Instead, components like PlayButton and UploadButton will pass event handlers down.\n\n\n### Naming event handler props\n\n\nBuilt-in components like <button> and <div> only support browser event names like onClick . However, when you\u2019re building your own components, you can name their event handler props any way that you like.\n\nBy convention, event handler props should start with on , followed by a capital letter.\n\nFor example, the Button component\u2019s onClick prop could have been called onSmash :\n\n\n```javascript\nfunctionButton({onSmash,children}){return(<buttononClick={onSmash}>{children}</button>);}exportdefaultfunctionApp(){return(<div><ButtononSmash={()=>alert('Playing!')}>Play Movie</Button><ButtononSmash={()=>alert('Uploading!')}>Upload Image</Button></div>);}\n```\n\n\nIn this example, <button onClick={onSmash}> shows that the browser <button> (lowercase) still needs a prop called onClick , but the prop name received by your custom Button component is up to you!\n\nWhen your component supports multiple interactions, you might name event handler props for app-specific concepts. For example, this Toolbar component receives onPlayMovie and onUploadImage event handlers:\n\n\n```javascript\nexportdefaultfunctionApp(){return(<ToolbaronPlayMovie={()=>alert('Playing!')}onUploadImage={()=>alert('Uploading!')}/>);}functionToolbar({onPlayMovie,onUploadImage}){return(<div><ButtononClick={onPlayMovie}>Play Movie</Button><ButtononClick={onUploadImage}>Upload Image</Button></div>);}functionButton({onClick,children}){return(<buttononClick={onClick}>{children}</button>);}\n```\n\n\nNotice how the App component does not need to know what Toolbar will do with onPlayMovie or onUploadImage . That\u2019s an implementation detail of the Toolbar . Here, Toolbar passes them down as onClick handlers to its Button s, but it could later also trigger them on a keyboard shortcut. Naming props after app-specific interactions like onPlayMovie gives you the flexibility to change how they\u2019re used later.\n\n\n### Note\n\n\nMake sure that you use the appropriate HTML tags for your event handlers. For example, to handle clicks, use <button onClick={handleClick}> instead of <div onClick={handleClick}> . Using a real browser <button> enables built-in browser behaviors like keyboard navigation. If you don\u2019t like the default browser styling of a button and want to make it look more like a link or a different UI element, you can achieve it with CSS. Learn more about writing accessible markup.", "source": "https://react.dev/learn/responding-to-events", "category": "Responding to Events"}
{"instruction": "Show me a code example of Adding event handlers in React.", "input": "", "output": "To add an event handler, you will first define a function and then pass it as a prop to the appropriate JSX tag. For example, here is a button that doesn\u2019t do anything yet:\n\n\n```javascript\nexportdefaultfunctionButton(){return(<button>I don't do anything</button>);}\n```\n\n\nYou can make it show a message when a user clicks by following these three steps:\n\n1. Declare a function called handleClick inside your Button component.\n2. Implement the logic inside that function (use alert to show the message).\n3. Add onClick={handleClick} to the <button> JSX.\n\n\n```javascript\nexportdefaultfunctionButton(){functionhandleClick(){alert('You clicked me!');}return(<buttononClick={handleClick}>Click me</button>);}\n```\n\n\nYou defined the handleClick function and then passed it as a prop to <button> . handleClick is an event handler. Event handler functions:\n\n* Are usually defined inside your components.\n* Have names that start with handle , followed by the name of the event.\n\nBy convention, it is common to name event handlers as handle followed by the event name. You\u2019ll often see onClick={handleClick} , onMouseEnter={handleMouseEnter} , and so on.\n\nAlternatively, you can define an event handler inline in the JSX:\n\n\n```javascript\n<buttononClick={functionhandleClick(){alert('You clicked me!');}}>\n```\n\n\nOr, more concisely, using an arrow function:\n\n\n```javascript\n<buttononClick={()=>{alert('You clicked me!');}}>\n```\n\n\nAll of these styles are equivalent. Inline event handlers are convenient for short functions.\n\n\n### Pitfall\n\n\nFunctions passed to event handlers must be passed, not called. For example:\n\nThe difference is subtle. In the first example, the handleClick function is passed as an onClick event handler. This tells React to remember it and only call your function when the user clicks the button.\n\nIn the second example, the () at the end of handleClick() fires the function immediately during rendering , without any clicks. This is because JavaScript inside the JSX { and } executes right away.\n\nWhen you write code inline, the same pitfall presents itself in a different way:\n\nPassing inline code like this won\u2019t fire on click\u2014it fires every time the component renders:\n\n\n```javascript\n// This alert fires when the component renders, not when clicked!<buttononClick={alert('You clicked me!')}>\n```\n\n\nIf you want to define your event handler inline, wrap it in an anonymous function like so:\n\n\n```javascript\n<buttononClick={()=>alert('You clicked me!')}>\n```\n\n\nRather than executing the code inside with every render, this creates a function to be called later.\n\nIn both cases, what you want to pass is a function:\n\n* <button onClick={handleClick}> passes the handleClick function.\n* <button onClick={() => alert('...')}> passes the () => alert('...') function.\n\nRead more about arrow functions.\n\n\n### Reading props in event handlers\n\n\nBecause event handlers are declared inside of a component, they have access to the component\u2019s props. Here is a button that, when clicked, shows an alert with its message prop:\n\n\n```javascript\nfunctionAlertButton({message,children}){return(<buttononClick={()=>alert(message)}>{children}</button>);}exportdefaultfunctionToolbar(){return(<div><AlertButtonmessage=\"Playing!\">Play Movie</AlertButton><AlertButtonmessage=\"Uploading!\">Upload Image</AlertButton></div>);}\n```\n\n\nThis lets these two buttons show different messages. Try changing the messages passed to them.\n\n\n### Passing event handlers as props\n\n\nOften you\u2019ll want the parent component to specify a child\u2019s event handler. Consider buttons: depending on where you\u2019re using a Button component, you might want to execute a different function\u2014perhaps one plays a movie and another uploads an image.\n\nTo do this, pass a prop the component receives from its parent as the event handler like so:\n\n\n```javascript\nfunctionButton({onClick,children}){return(<buttononClick={onClick}>{children}</button>);}functionPlayButton({movieName}){functionhandlePlayClick(){alert(`Playing${movieName}!`);}return(<ButtononClick={handlePlayClick}>Play \"{movieName}\"</Button>);}functionUploadButton(){return(<ButtononClick={()=>alert('Uploading!')}>Upload Image</Button>);}exportdefaultfunctionToolbar(){return(<div><PlayButtonmovieName=\"Kiki's Delivery Service\"/><UploadButton/></div>);}\n```\n\n\nHere, the Toolbar component renders a PlayButton and an UploadButton :\n\n* PlayButton passes handlePlayClick as the onClick prop to the Button inside.\n* UploadButton passes () => alert('Uploading!') as the onClick prop to the Button inside.\n\nFinally, your Button component accepts a prop called onClick . It passes that prop directly to the built-in browser <button> with onClick={onClick} . This tells React to call the passed function on click.\n\nIf you use a design system , it\u2019s common for components like buttons to contain styling but not specify behavior. Instead, components like PlayButton and UploadButton will pass event handlers down.\n\n\n### Naming event handler props\n\n\nBuilt-in components like <button> and <div> only support browser event names like onClick . However, when you\u2019re building your own components, you can name their event handler props any way that you like.\n\nBy convention, event handler props should start with on , followed by a capital letter.\n\nFor example, the Button component\u2019s onClick prop could have been called onSmash :\n\n\n```javascript\nfunctionButton({onSmash,children}){return(<buttononClick={onSmash}>{children}</button>);}exportdefaultfunctionApp(){return(<div><ButtononSmash={()=>alert('Playing!')}>Play Movie</Button><ButtononSmash={()=>alert('Uploading!')}>Upload Image</Button></div>);}\n```\n\n\nIn this example, <button onClick={onSmash}> shows that the browser <button> (lowercase) still needs a prop called onClick , but the prop name received by your custom Button component is up to you!\n\nWhen your component supports multiple interactions, you might name event handler props for app-specific concepts. For example, this Toolbar component receives onPlayMovie and onUploadImage event handlers:\n\n\n```javascript\nexportdefaultfunctionApp(){return(<ToolbaronPlayMovie={()=>alert('Playing!')}onUploadImage={()=>alert('Uploading!')}/>);}functionToolbar({onPlayMovie,onUploadImage}){return(<div><ButtononClick={onPlayMovie}>Play Movie</Button><ButtononClick={onUploadImage}>Upload Image</Button></div>);}functionButton({onClick,children}){return(<buttononClick={onClick}>{children}</button>);}\n```\n\n\nNotice how the App component does not need to know what Toolbar will do with onPlayMovie or onUploadImage . That\u2019s an implementation detail of the Toolbar . Here, Toolbar passes them down as onClick handlers to its Button s, but it could later also trigger them on a keyboard shortcut. Naming props after app-specific interactions like onPlayMovie gives you the flexibility to change how they\u2019re used later.\n\n\n### Note\n\n\nMake sure that you use the appropriate HTML tags for your event handlers. For example, to handle clicks, use <button onClick={handleClick}> instead of <div onClick={handleClick}> . Using a real browser <button> enables built-in browser behaviors like keyboard navigation. If you don\u2019t like the default browser styling of a button and want to make it look more like a link or a different UI element, you can achieve it with CSS. Learn more about writing accessible markup.", "source": "https://react.dev/learn/responding-to-events", "category": "Responding to Events"}
{"instruction": "Explain the concept of Event propagation in React.", "input": "", "output": "Event handlers will also catch events from any children your component might have. We say that an event \u201cbubbles\u201d or \u201cpropagates\u201d up the tree: it starts with where the event happened, and then goes up the tree.\n\nThis <div> contains two buttons. Both the <div> and each button have their own onClick handlers. Which handlers do you think will fire when you click a button?\n\n\n```javascript\nexportdefaultfunctionToolbar(){return(<divclassName=\"Toolbar\"onClick={()=>{alert('You clicked on the toolbar!');}}><buttononClick={()=>alert('Playing!')}>Play Movie</button><buttononClick={()=>alert('Uploading!')}>Upload Image</button></div>);}\n```\n\n\nIf you click on either button, its onClick will run first, followed by the parent <div> \u2019s onClick . So two messages will appear. If you click the toolbar itself, only the parent <div> \u2019s onClick will run.\n\n\n### Pitfall\n\n\nAll events propagate in React except onScroll , which only works on the JSX tag you attach it to.\n\n\n### Stopping propagation\n\n\nEvent handlers receive an event object as their only argument. By convention, it\u2019s usually called e , which stands for \u201cevent\u201d. You can use this object to read information about the event.\n\nThat event object also lets you stop the propagation. If you want to prevent an event from reaching parent components, you need to call e.stopPropagation() like this Button component does:\n\n\n```javascript\nfunctionButton({onClick,children}){return(<buttononClick={e=>{e.stopPropagation();onClick();}}>{children}</button>);}exportdefaultfunctionToolbar(){return(<divclassName=\"Toolbar\"onClick={()=>{alert('You clicked on the toolbar!');}}><ButtononClick={()=>alert('Playing!')}>Play Movie</Button><ButtononClick={()=>alert('Uploading!')}>Upload Image</Button></div>);}\n```\n\n\nWhen you click on a button:\n\n1. React calls the onClick handler passed to <button> .\n2. That handler, defined in Button , does the following: Calls e.stopPropagation() , preventing the event from bubbling further. Calls the onClick function, which is a prop passed from the Toolbar component.\n3. That function, defined in the Toolbar component, displays the button\u2019s own alert.\n4. Since the propagation was stopped, the parent <div> \u2019s onClick handler does not run.\n\n* Calls e.stopPropagation() , preventing the event from bubbling further.\n* Calls the onClick function, which is a prop passed from the Toolbar component.\n\nAs a result of e.stopPropagation() , clicking on the buttons now only shows a single alert (from the <button> ) rather than the two of them (from the <button> and the parent toolbar <div> ). Clicking a button is not the same thing as clicking the surrounding toolbar, so stopping the propagation makes sense for this UI.\n\nIn rare cases, you might need to catch all events on child elements, even if they stopped propagation . For example, maybe you want to log every click to analytics, regardless of the propagation logic. You can do this by adding Capture at the end of the event name:\n\n\n```javascript\n<divonClickCapture={()=>{/* this runs first */}}><buttononClick={e=>e.stopPropagation()}/><buttononClick={e=>e.stopPropagation()}/></div>\n```\n\n\nEach event propagates in three phases:\n\n1. It travels down, calling all onClickCapture handlers.\n2. It runs the clicked element\u2019s onClick handler.\n3. It travels upwards, calling all onClick handlers.\n\nCapture events are useful for code like routers or analytics, but you probably won\u2019t use them in app code.\n\n\n### Passing handlers as alternative to propagation\n\n\nNotice how this click handler runs a line of code and then calls the onClick prop passed by the parent:\n\n\n```javascript\nfunctionButton({onClick,children}){return(<buttononClick={e=>{e.stopPropagation();onClick();}}>{children}</button>);}\n```\n\n\nYou could add more code to this handler before calling the parent onClick event handler, too. This pattern provides an alternative to propagation. It lets the child component handle the event, while also letting the parent component specify some additional behavior. Unlike propagation, it\u2019s not automatic. But the benefit of this pattern is that you can clearly follow the whole chain of code that executes as a result of some event.\n\nIf you rely on propagation and it\u2019s difficult to trace which handlers execute and why, try this approach instead.\n\n\n### Preventing default behavior\n\n\nSome browser events have default behavior associated with them. For example, a <form> submit event, which happens when a button inside of it is clicked, will reload the whole page by default:\n\n\n```javascript\nexportdefaultfunctionSignup(){return(<formonSubmit={()=>alert('Submitting!')}><input/><button>Send</button></form>);}\n```\n\n\nYou can call e.preventDefault() on the event object to stop this from happening:\n\n\n```javascript\nexportdefaultfunctionSignup(){return(<formonSubmit={e=>{e.preventDefault();alert('Submitting!');}}><input/><button>Send</button></form>);}\n```\n\n\nDon\u2019t confuse e.stopPropagation() and e.preventDefault() . They are both useful, but are unrelated:\n\n* e.stopPropagation() stops the event handlers attached to the tags above from firing.\n* e.preventDefault() prevents the default browser behavior for the few events that have it.", "source": "https://react.dev/learn/responding-to-events", "category": "Responding to Events"}
{"instruction": "Show me a code example of Event propagation in React.", "input": "", "output": "Event handlers will also catch events from any children your component might have. We say that an event \u201cbubbles\u201d or \u201cpropagates\u201d up the tree: it starts with where the event happened, and then goes up the tree.\n\nThis <div> contains two buttons. Both the <div> and each button have their own onClick handlers. Which handlers do you think will fire when you click a button?\n\n\n```javascript\nexportdefaultfunctionToolbar(){return(<divclassName=\"Toolbar\"onClick={()=>{alert('You clicked on the toolbar!');}}><buttononClick={()=>alert('Playing!')}>Play Movie</button><buttononClick={()=>alert('Uploading!')}>Upload Image</button></div>);}\n```\n\n\nIf you click on either button, its onClick will run first, followed by the parent <div> \u2019s onClick . So two messages will appear. If you click the toolbar itself, only the parent <div> \u2019s onClick will run.\n\n\n### Pitfall\n\n\nAll events propagate in React except onScroll , which only works on the JSX tag you attach it to.\n\n\n### Stopping propagation\n\n\nEvent handlers receive an event object as their only argument. By convention, it\u2019s usually called e , which stands for \u201cevent\u201d. You can use this object to read information about the event.\n\nThat event object also lets you stop the propagation. If you want to prevent an event from reaching parent components, you need to call e.stopPropagation() like this Button component does:\n\n\n```javascript\nfunctionButton({onClick,children}){return(<buttononClick={e=>{e.stopPropagation();onClick();}}>{children}</button>);}exportdefaultfunctionToolbar(){return(<divclassName=\"Toolbar\"onClick={()=>{alert('You clicked on the toolbar!');}}><ButtononClick={()=>alert('Playing!')}>Play Movie</Button><ButtononClick={()=>alert('Uploading!')}>Upload Image</Button></div>);}\n```\n\n\nWhen you click on a button:\n\n1. React calls the onClick handler passed to <button> .\n2. That handler, defined in Button , does the following: Calls e.stopPropagation() , preventing the event from bubbling further. Calls the onClick function, which is a prop passed from the Toolbar component.\n3. That function, defined in the Toolbar component, displays the button\u2019s own alert.\n4. Since the propagation was stopped, the parent <div> \u2019s onClick handler does not run.\n\n* Calls e.stopPropagation() , preventing the event from bubbling further.\n* Calls the onClick function, which is a prop passed from the Toolbar component.\n\nAs a result of e.stopPropagation() , clicking on the buttons now only shows a single alert (from the <button> ) rather than the two of them (from the <button> and the parent toolbar <div> ). Clicking a button is not the same thing as clicking the surrounding toolbar, so stopping the propagation makes sense for this UI.\n\nIn rare cases, you might need to catch all events on child elements, even if they stopped propagation . For example, maybe you want to log every click to analytics, regardless of the propagation logic. You can do this by adding Capture at the end of the event name:\n\n\n```javascript\n<divonClickCapture={()=>{/* this runs first */}}><buttononClick={e=>e.stopPropagation()}/><buttononClick={e=>e.stopPropagation()}/></div>\n```\n\n\nEach event propagates in three phases:\n\n1. It travels down, calling all onClickCapture handlers.\n2. It runs the clicked element\u2019s onClick handler.\n3. It travels upwards, calling all onClick handlers.\n\nCapture events are useful for code like routers or analytics, but you probably won\u2019t use them in app code.\n\n\n### Passing handlers as alternative to propagation\n\n\nNotice how this click handler runs a line of code and then calls the onClick prop passed by the parent:\n\n\n```javascript\nfunctionButton({onClick,children}){return(<buttononClick={e=>{e.stopPropagation();onClick();}}>{children}</button>);}\n```\n\n\nYou could add more code to this handler before calling the parent onClick event handler, too. This pattern provides an alternative to propagation. It lets the child component handle the event, while also letting the parent component specify some additional behavior. Unlike propagation, it\u2019s not automatic. But the benefit of this pattern is that you can clearly follow the whole chain of code that executes as a result of some event.\n\nIf you rely on propagation and it\u2019s difficult to trace which handlers execute and why, try this approach instead.\n\n\n### Preventing default behavior\n\n\nSome browser events have default behavior associated with them. For example, a <form> submit event, which happens when a button inside of it is clicked, will reload the whole page by default:\n\n\n```javascript\nexportdefaultfunctionSignup(){return(<formonSubmit={()=>alert('Submitting!')}><input/><button>Send</button></form>);}\n```\n\n\nYou can call e.preventDefault() on the event object to stop this from happening:\n\n\n```javascript\nexportdefaultfunctionSignup(){return(<formonSubmit={e=>{e.preventDefault();alert('Submitting!');}}><input/><button>Send</button></form>);}\n```\n\n\nDon\u2019t confuse e.stopPropagation() and e.preventDefault() . They are both useful, but are unrelated:\n\n* e.stopPropagation() stops the event handlers attached to the tags above from firing.\n* e.preventDefault() prevents the default browser behavior for the few events that have it.", "source": "https://react.dev/learn/responding-to-events", "category": "Responding to Events"}
{"instruction": "What is Can event handlers have side effects? in React and how does it work?", "input": "", "output": "Absolutely! Event handlers are the best place for side effects.\n\nUnlike rendering functions, event handlers don\u2019t need to be pure , so it\u2019s a great place to change something\u2014for example, change an input\u2019s value in response to typing, or change a list in response to a button press. However, in order to change some information, you first need some way to store it. In React, this is done by using state, a component\u2019s memory. You will learn all about it on the next page.", "source": "https://react.dev/learn/responding-to-events", "category": "Responding to Events"}
{"instruction": "Can you describe Custom Hooks: Sharing logic between components in the context of React?", "input": "", "output": "Imagine you\u2019re developing an app that heavily relies on the network (as most apps do). You want to warn the user if their network connection has accidentally gone off while they were using your app. How would you go about it? It seems like you\u2019ll need two things in your component:\n\n1. A piece of state that tracks whether the network is online.\n2. An Effect that subscribes to the global online and offline events, and updates that state.\n\nThis will keep your component synchronized with the network status. You might start with something like this:\n\n\n```javascript\nimport{useState,useEffect}from'react';exportdefaultfunctionStatusBar(){const[isOnline,setIsOnline]=useState(true);useEffect(()=>{functionhandleOnline(){setIsOnline(true);}functionhandleOffline(){setIsOnline(false);}window.addEventListener('online',handleOnline);window.addEventListener('offline',handleOffline);return()=>{window.removeEventListener('online',handleOnline);window.removeEventListener('offline',handleOffline);};},[]);return<h1>{isOnline?'\u2705 Online':'\u274c Disconnected'}</h1>;}\n```\n\n\nTry turning your network on and off, and notice how this StatusBar updates in response to your actions.\n\nNow imagine you also want to use the same logic in a different component. You want to implement a Save button that will become disabled and show \u201cReconnecting\u2026\u201d instead of \u201cSave\u201d while the network is off.\n\nTo start, you can copy and paste the isOnline state and the Effect into SaveButton :\n\n\n```javascript\nimport{useState,useEffect}from'react';exportdefaultfunctionSaveButton(){const[isOnline,setIsOnline]=useState(true);useEffect(()=>{functionhandleOnline(){setIsOnline(true);}functionhandleOffline(){setIsOnline(false);}window.addEventListener('online',handleOnline);window.addEventListener('offline',handleOffline);return()=>{window.removeEventListener('online',handleOnline);window.removeEventListener('offline',handleOffline);};},[]);functionhandleSaveClick(){console.log('\u2705 Progress saved');}return(<buttondisabled={!isOnline}onClick={handleSaveClick}>{isOnline?'Save progress':'Reconnecting...'}</button>);}\n```\n\n\nVerify that, if you turn off the network, the button will change its appearance.\n\nThese two components work fine, but the duplication in logic between them is unfortunate. It seems like even though they have different visual appearance, you want to reuse the logic between them.\n\n\n### Extracting your own custom Hook from a component\n\n\nImagine for a moment that, similar to useState and useEffect , there was a built-in useOnlineStatus Hook. Then both of these components could be simplified and you could remove the duplication between them:\n\n\n```javascript\nfunctionStatusBar(){constisOnline=useOnlineStatus();return<h1>{isOnline?'\u2705 Online':'\u274c Disconnected'}</h1>;}functionSaveButton(){constisOnline=useOnlineStatus();functionhandleSaveClick(){console.log('\u2705 Progress saved');}return(<buttondisabled={!isOnline}onClick={handleSaveClick}>{isOnline?'Save progress':'Reconnecting...'}</button>);}\n```\n\n\nAlthough there is no such built-in Hook, you can write it yourself. Declare a function called useOnlineStatus and move all the duplicated code into it from the components you wrote earlier:\n\n\n```javascript\nfunctionuseOnlineStatus(){const[isOnline,setIsOnline]=useState(true);useEffect(()=>{functionhandleOnline(){setIsOnline(true);}functionhandleOffline(){setIsOnline(false);}window.addEventListener('online',handleOnline);window.addEventListener('offline',handleOffline);return()=>{window.removeEventListener('online',handleOnline);window.removeEventListener('offline',handleOffline);};},[]);returnisOnline;}\n```\n\n\nAt the end of the function, return isOnline . This lets your components read that value:\n\n\n```javascript\nimport{useOnlineStatus}from'./useOnlineStatus.js';functionStatusBar(){constisOnline=useOnlineStatus();return<h1>{isOnline?'\u2705 Online':'\u274c Disconnected'}</h1>;}functionSaveButton(){constisOnline=useOnlineStatus();functionhandleSaveClick(){console.log('\u2705 Progress saved');}return(<buttondisabled={!isOnline}onClick={handleSaveClick}>{isOnline?'Save progress':'Reconnecting...'}</button>);}exportdefaultfunctionApp(){return(<><SaveButton/><StatusBar/></>);}\n```\n\n\nVerify that switching the network on and off updates both components.\n\nNow your components don\u2019t have as much repetitive logic. More importantly, the code inside them describes what they want to do (use the online status!) rather than how to do it (by subscribing to the browser events).\n\nWhen you extract logic into custom Hooks, you can hide the gnarly details of how you deal with some external system or a browser API. The code of your components expresses your intent, not the implementation.\n\n\n### Hook names always start withuse\n\n\nReact applications are built from components. Components are built from Hooks, whether built-in or custom. You\u2019ll likely often use custom Hooks created by others, but occasionally you might write one yourself!\n\nYou must follow these naming conventions:\n\n1. React component names must start with a capital letter, like StatusBar and SaveButton . React components also need to return something that React knows how to display, like a piece of JSX.\n2. Hook names must start with use followed by a capital letter, like useState (built-in) or useOnlineStatus (custom, like earlier on the page). Hooks may return arbitrary values.\n\nThis convention guarantees that you can always look at a component and know where its state, Effects, and other React features might \u201chide\u201d. For example, if you see a getColor() function call inside your component, you can be sure that it can\u2019t possibly contain React state inside because its name doesn\u2019t start with use . However, a function call like useOnlineStatus() will most likely contain calls to other Hooks inside!\n\n\n### Note\n\n\nIf your linter is configured for React, it will enforce this naming convention. Scroll up to the sandbox above and rename useOnlineStatus to getOnlineStatus . Notice that the linter won\u2019t allow you to call useState or useEffect inside of it anymore. Only Hooks and components can call other Hooks!\n\nNo. Functions that don\u2019t call Hooks don\u2019t need to be Hooks.\n\nIf your function doesn\u2019t call any Hooks, avoid the use prefix. Instead, write it as a regular function without the use prefix. For example, useSorted below doesn\u2019t call Hooks, so call it getSorted instead:\n\n\n```javascript\n// \ud83d\udd34 Avoid: A Hook that doesn't use HooksfunctionuseSorted(items){returnitems.slice().sort();}// \u2705 Good: A regular function that doesn't use HooksfunctiongetSorted(items){returnitems.slice().sort();}\n```\n\n\nThis ensures that your code can call this regular function anywhere, including conditions:\n\n\n```javascript\nfunctionList({items,shouldSort}){letdisplayedItems=items;if(shouldSort){// \u2705 It's ok to call getSorted() conditionally because it's not a HookdisplayedItems=getSorted(items);}// ...}\n```\n\n\nYou should give use prefix to a function (and thus make it a Hook) if it uses at least one Hook inside of it:\n\n\n```javascript\n// \u2705 Good: A Hook that uses other HooksfunctionuseAuth(){returnuseContext(Auth);}\n```\n\n\nTechnically, this isn\u2019t enforced by React. In principle, you could make a Hook that doesn\u2019t call other Hooks. This is often confusing and limiting so it\u2019s best to avoid that pattern. However, there may be rare cases where it is helpful. For example, maybe your function doesn\u2019t use any Hooks right now, but you plan to add some Hook calls to it in the future. Then it makes sense to name it with the use prefix:\n\n\n```javascript\n// \u2705 Good: A Hook that will likely use some other Hooks laterfunctionuseAuth(){// TODO: Replace with this line when authentication is implemented:// return useContext(Auth);returnTEST_USER;}\n```\n\n\nThen components won\u2019t be able to call it conditionally. This will become important when you actually add Hook calls inside. If you don\u2019t plan to use Hooks inside it (now or later), don\u2019t make it a Hook.\n\n\n### Custom Hooks let you share stateful logic, not state itself\n\n\nIn the earlier example, when you turned the network on and off, both components updated together. However, it\u2019s wrong to think that a single isOnline state variable is shared between them. Look at this code:\n\n\n```javascript\nfunctionStatusBar(){constisOnline=useOnlineStatus();// ...}functionSaveButton(){constisOnline=useOnlineStatus();// ...}\n```\n\n\nIt works the same way as before you extracted the duplication:\n\n\n```javascript\nfunctionStatusBar(){const[isOnline,setIsOnline]=useState(true);useEffect(()=>{// ...},[]);// ...}functionSaveButton(){const[isOnline,setIsOnline]=useState(true);useEffect(()=>{// ...},[]);// ...}\n```\n\n\nThese are two completely independent state variables and Effects! They happened to have the same value at the same time because you synchronized them with the same external value (whether the network is on).\n\nTo better illustrate this, we\u2019ll need a different example. Consider this Form component:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[firstName,setFirstName]=useState('Mary');const[lastName,setLastName]=useState('Poppins');functionhandleFirstNameChange(e){setFirstName(e.target.value);}functionhandleLastNameChange(e){setLastName(e.target.value);}return(<><label>First name:<inputvalue={firstName}onChange={handleFirstNameChange}/></label><label>Last name:<inputvalue={lastName}onChange={handleLastNameChange}/></label><p><b>Good morning,{firstName}{lastName}.</b></p></>);}\n```\n\n\nThere\u2019s some repetitive logic for each form field:\n\n1. There\u2019s a piece of state ( firstName and lastName ).\n2. There\u2019s a change handler ( handleFirstNameChange and handleLastNameChange ).\n3. There\u2019s a piece of JSX that specifies the value and onChange attributes for that input.\n\nYou can extract the repetitive logic into this useFormInput custom Hook:\n\n\n```javascript\nimport{useState}from'react';exportfunctionuseFormInput(initialValue){const[value,setValue]=useState(initialValue);functionhandleChange(e){setValue(e.target.value);}constinputProps={value:value,onChange:handleChange};returninputProps;}\n```\n\n\nNotice that it only declares one state variable called value .\n\nHowever, the Form component calls useFormInput two times:\n\n\n```javascript\nfunctionForm(){constfirstNameProps=useFormInput('Mary');constlastNameProps=useFormInput('Poppins');// ...\n```\n\n\nThis is why it works like declaring two separate state variables!\n\nCustom Hooks let you share stateful logic but not state itself. Each call to a Hook is completely independent from every other call to the same Hook. This is why the two sandboxes above are completely equivalent. If you\u2019d like, scroll back up and compare them. The behavior before and after extracting a custom Hook is identical.\n\nWhen you need to share the state itself between multiple components, lift it up and pass it down instead.", "source": "https://react.dev/learn/reusing-logic-with-custom-hooks", "category": "Reusing Logic with Custom Hooks"}
{"instruction": "Show me a code example of Custom Hooks: Sharing logic between components in React.", "input": "", "output": "Imagine you\u2019re developing an app that heavily relies on the network (as most apps do). You want to warn the user if their network connection has accidentally gone off while they were using your app. How would you go about it? It seems like you\u2019ll need two things in your component:\n\n1. A piece of state that tracks whether the network is online.\n2. An Effect that subscribes to the global online and offline events, and updates that state.\n\nThis will keep your component synchronized with the network status. You might start with something like this:\n\n\n```javascript\nimport{useState,useEffect}from'react';exportdefaultfunctionStatusBar(){const[isOnline,setIsOnline]=useState(true);useEffect(()=>{functionhandleOnline(){setIsOnline(true);}functionhandleOffline(){setIsOnline(false);}window.addEventListener('online',handleOnline);window.addEventListener('offline',handleOffline);return()=>{window.removeEventListener('online',handleOnline);window.removeEventListener('offline',handleOffline);};},[]);return<h1>{isOnline?'\u2705 Online':'\u274c Disconnected'}</h1>;}\n```\n\n\nTry turning your network on and off, and notice how this StatusBar updates in response to your actions.\n\nNow imagine you also want to use the same logic in a different component. You want to implement a Save button that will become disabled and show \u201cReconnecting\u2026\u201d instead of \u201cSave\u201d while the network is off.\n\nTo start, you can copy and paste the isOnline state and the Effect into SaveButton :\n\n\n```javascript\nimport{useState,useEffect}from'react';exportdefaultfunctionSaveButton(){const[isOnline,setIsOnline]=useState(true);useEffect(()=>{functionhandleOnline(){setIsOnline(true);}functionhandleOffline(){setIsOnline(false);}window.addEventListener('online',handleOnline);window.addEventListener('offline',handleOffline);return()=>{window.removeEventListener('online',handleOnline);window.removeEventListener('offline',handleOffline);};},[]);functionhandleSaveClick(){console.log('\u2705 Progress saved');}return(<buttondisabled={!isOnline}onClick={handleSaveClick}>{isOnline?'Save progress':'Reconnecting...'}</button>);}\n```\n\n\nVerify that, if you turn off the network, the button will change its appearance.\n\nThese two components work fine, but the duplication in logic between them is unfortunate. It seems like even though they have different visual appearance, you want to reuse the logic between them.\n\n\n### Extracting your own custom Hook from a component\n\n\nImagine for a moment that, similar to useState and useEffect , there was a built-in useOnlineStatus Hook. Then both of these components could be simplified and you could remove the duplication between them:\n\n\n```javascript\nfunctionStatusBar(){constisOnline=useOnlineStatus();return<h1>{isOnline?'\u2705 Online':'\u274c Disconnected'}</h1>;}functionSaveButton(){constisOnline=useOnlineStatus();functionhandleSaveClick(){console.log('\u2705 Progress saved');}return(<buttondisabled={!isOnline}onClick={handleSaveClick}>{isOnline?'Save progress':'Reconnecting...'}</button>);}\n```\n\n\nAlthough there is no such built-in Hook, you can write it yourself. Declare a function called useOnlineStatus and move all the duplicated code into it from the components you wrote earlier:\n\n\n```javascript\nfunctionuseOnlineStatus(){const[isOnline,setIsOnline]=useState(true);useEffect(()=>{functionhandleOnline(){setIsOnline(true);}functionhandleOffline(){setIsOnline(false);}window.addEventListener('online',handleOnline);window.addEventListener('offline',handleOffline);return()=>{window.removeEventListener('online',handleOnline);window.removeEventListener('offline',handleOffline);};},[]);returnisOnline;}\n```\n\n\nAt the end of the function, return isOnline . This lets your components read that value:\n\n\n```javascript\nimport{useOnlineStatus}from'./useOnlineStatus.js';functionStatusBar(){constisOnline=useOnlineStatus();return<h1>{isOnline?'\u2705 Online':'\u274c Disconnected'}</h1>;}functionSaveButton(){constisOnline=useOnlineStatus();functionhandleSaveClick(){console.log('\u2705 Progress saved');}return(<buttondisabled={!isOnline}onClick={handleSaveClick}>{isOnline?'Save progress':'Reconnecting...'}</button>);}exportdefaultfunctionApp(){return(<><SaveButton/><StatusBar/></>);}\n```\n\n\nVerify that switching the network on and off updates both components.\n\nNow your components don\u2019t have as much repetitive logic. More importantly, the code inside them describes what they want to do (use the online status!) rather than how to do it (by subscribing to the browser events).\n\nWhen you extract logic into custom Hooks, you can hide the gnarly details of how you deal with some external system or a browser API. The code of your components expresses your intent, not the implementation.\n\n\n### Hook names always start withuse\n\n\nReact applications are built from components. Components are built from Hooks, whether built-in or custom. You\u2019ll likely often use custom Hooks created by others, but occasionally you might write one yourself!\n\nYou must follow these naming conventions:\n\n1. React component names must start with a capital letter, like StatusBar and SaveButton . React components also need to return something that React knows how to display, like a piece of JSX.\n2. Hook names must start with use followed by a capital letter, like useState (built-in) or useOnlineStatus (custom, like earlier on the page). Hooks may return arbitrary values.\n\nThis convention guarantees that you can always look at a component and know where its state, Effects, and other React features might \u201chide\u201d. For example, if you see a getColor() function call inside your component, you can be sure that it can\u2019t possibly contain React state inside because its name doesn\u2019t start with use . However, a function call like useOnlineStatus() will most likely contain calls to other Hooks inside!\n\n\n### Note\n\n\nIf your linter is configured for React, it will enforce this naming convention. Scroll up to the sandbox above and rename useOnlineStatus to getOnlineStatus . Notice that the linter won\u2019t allow you to call useState or useEffect inside of it anymore. Only Hooks and components can call other Hooks!\n\nNo. Functions that don\u2019t call Hooks don\u2019t need to be Hooks.\n\nIf your function doesn\u2019t call any Hooks, avoid the use prefix. Instead, write it as a regular function without the use prefix. For example, useSorted below doesn\u2019t call Hooks, so call it getSorted instead:\n\n\n```javascript\n// \ud83d\udd34 Avoid: A Hook that doesn't use HooksfunctionuseSorted(items){returnitems.slice().sort();}// \u2705 Good: A regular function that doesn't use HooksfunctiongetSorted(items){returnitems.slice().sort();}\n```\n\n\nThis ensures that your code can call this regular function anywhere, including conditions:\n\n\n```javascript\nfunctionList({items,shouldSort}){letdisplayedItems=items;if(shouldSort){// \u2705 It's ok to call getSorted() conditionally because it's not a HookdisplayedItems=getSorted(items);}// ...}\n```\n\n\nYou should give use prefix to a function (and thus make it a Hook) if it uses at least one Hook inside of it:\n\n\n```javascript\n// \u2705 Good: A Hook that uses other HooksfunctionuseAuth(){returnuseContext(Auth);}\n```\n\n\nTechnically, this isn\u2019t enforced by React. In principle, you could make a Hook that doesn\u2019t call other Hooks. This is often confusing and limiting so it\u2019s best to avoid that pattern. However, there may be rare cases where it is helpful. For example, maybe your function doesn\u2019t use any Hooks right now, but you plan to add some Hook calls to it in the future. Then it makes sense to name it with the use prefix:\n\n\n```javascript\n// \u2705 Good: A Hook that will likely use some other Hooks laterfunctionuseAuth(){// TODO: Replace with this line when authentication is implemented:// return useContext(Auth);returnTEST_USER;}\n```\n\n\nThen components won\u2019t be able to call it conditionally. This will become important when you actually add Hook calls inside. If you don\u2019t plan to use Hooks inside it (now or later), don\u2019t make it a Hook.\n\n\n### Custom Hooks let you share stateful logic, not state itself\n\n\nIn the earlier example, when you turned the network on and off, both components updated together. However, it\u2019s wrong to think that a single isOnline state variable is shared between them. Look at this code:\n\n\n```javascript\nfunctionStatusBar(){constisOnline=useOnlineStatus();// ...}functionSaveButton(){constisOnline=useOnlineStatus();// ...}\n```\n\n\nIt works the same way as before you extracted the duplication:\n\n\n```javascript\nfunctionStatusBar(){const[isOnline,setIsOnline]=useState(true);useEffect(()=>{// ...},[]);// ...}functionSaveButton(){const[isOnline,setIsOnline]=useState(true);useEffect(()=>{// ...},[]);// ...}\n```\n\n\nThese are two completely independent state variables and Effects! They happened to have the same value at the same time because you synchronized them with the same external value (whether the network is on).\n\nTo better illustrate this, we\u2019ll need a different example. Consider this Form component:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[firstName,setFirstName]=useState('Mary');const[lastName,setLastName]=useState('Poppins');functionhandleFirstNameChange(e){setFirstName(e.target.value);}functionhandleLastNameChange(e){setLastName(e.target.value);}return(<><label>First name:<inputvalue={firstName}onChange={handleFirstNameChange}/></label><label>Last name:<inputvalue={lastName}onChange={handleLastNameChange}/></label><p><b>Good morning,{firstName}{lastName}.</b></p></>);}\n```\n\n\nThere\u2019s some repetitive logic for each form field:\n\n1. There\u2019s a piece of state ( firstName and lastName ).\n2. There\u2019s a change handler ( handleFirstNameChange and handleLastNameChange ).\n3. There\u2019s a piece of JSX that specifies the value and onChange attributes for that input.\n\nYou can extract the repetitive logic into this useFormInput custom Hook:\n\n\n```javascript\nimport{useState}from'react';exportfunctionuseFormInput(initialValue){const[value,setValue]=useState(initialValue);functionhandleChange(e){setValue(e.target.value);}constinputProps={value:value,onChange:handleChange};returninputProps;}\n```\n\n\nNotice that it only declares one state variable called value .\n\nHowever, the Form component calls useFormInput two times:\n\n\n```javascript\nfunctionForm(){constfirstNameProps=useFormInput('Mary');constlastNameProps=useFormInput('Poppins');// ...\n```\n\n\nThis is why it works like declaring two separate state variables!\n\nCustom Hooks let you share stateful logic but not state itself. Each call to a Hook is completely independent from every other call to the same Hook. This is why the two sandboxes above are completely equivalent. If you\u2019d like, scroll back up and compare them. The behavior before and after extracting a custom Hook is identical.\n\nWhen you need to share the state itself between multiple components, lift it up and pass it down instead.", "source": "https://react.dev/learn/reusing-logic-with-custom-hooks", "category": "Reusing Logic with Custom Hooks"}
{"instruction": "What is the process for Passing reactive values between Hooks in a React component?", "input": "", "output": "The code inside your custom Hooks will re-run during every re-render of your component. This is why, like components, custom Hooks need to be pure. Think of custom Hooks\u2019 code as part of your component\u2019s body!\n\nBecause custom Hooks re-render together with your component, they always receive the latest props and state. To see what this means, consider this chat room example. Change the server URL or the chat room:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';import{showNotification}from'./notifications.js';exportdefaultfunctionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useEffect(()=>{constoptions={serverUrl:serverUrl,roomId:roomId};constconnection=createConnection(options);connection.on('message',(msg)=>{showNotification('New message: '+msg);});connection.connect();return()=>connection.disconnect();},[roomId,serverUrl]);return(<><label>Server URL:<inputvalue={serverUrl}onChange={e=>setServerUrl(e.target.value)}/></label><h1>Welcome to the{roomId}room!</h1></>);}\n```\n\n\nWhen you change serverUrl or roomId , the Effect \u201creacts\u201d to your changes and re-synchronizes. You can tell by the console messages that the chat re-connects every time that you change your Effect\u2019s dependencies.\n\nNow move the Effect\u2019s code into a custom Hook:\n\n\n```javascript\nexportfunctionuseChatRoom({serverUrl,roomId}){useEffect(()=>{constoptions={serverUrl:serverUrl,roomId:roomId};constconnection=createConnection(options);connection.connect();connection.on('message',(msg)=>{showNotification('New message: '+msg);});return()=>connection.disconnect();},[roomId,serverUrl]);}\n```\n\n\nThis lets your ChatRoom component call your custom Hook without worrying about how it works inside:\n\n\n```javascript\nexportdefaultfunctionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useChatRoom({roomId:roomId,serverUrl:serverUrl});return(<><label>Server URL:<inputvalue={serverUrl}onChange={e=>setServerUrl(e.target.value)}/></label><h1>Welcome to the{roomId}room!</h1></>);}\n```\n\n\nThis looks much simpler! (But it does the same thing.)\n\nNotice that the logic still responds to prop and state changes. Try editing the server URL or the selected room:\n\n\n```javascript\nimport{useState}from'react';import{useChatRoom}from'./useChatRoom.js';exportdefaultfunctionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useChatRoom({roomId:roomId,serverUrl:serverUrl});return(<><label>Server URL:<inputvalue={serverUrl}onChange={e=>setServerUrl(e.target.value)}/></label><h1>Welcome to the{roomId}room!</h1></>);}\n```\n\n\nNotice how you\u2019re taking the return value of one Hook:\n\n\n```javascript\nexportdefaultfunctionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useChatRoom({roomId:roomId,serverUrl:serverUrl});// ...\n```\n\n\nand passing it as an input to another Hook:\n\n\n```javascript\nexportdefaultfunctionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useChatRoom({roomId:roomId,serverUrl:serverUrl});// ...\n```\n\n\nEvery time your ChatRoom component re-renders, it passes the latest roomId and serverUrl to your Hook. This is why your Effect re-connects to the chat whenever their values are different after a re-render. (If you ever worked with audio or video processing software, chaining Hooks like this might remind you of chaining visual or audio effects. It\u2019s as if the output of useState \u201cfeeds into\u201d the input of the useChatRoom .)\n\n\n### Passing event handlers to custom Hooks\n\n\n\n### Under Construction\n\n\nThis section describes an experimental API that has not yet been released in a stable version of React.\n\nAs you start using useChatRoom in more components, you might want to let components customize its behavior. For example, currently, the logic for what to do when a message arrives is hardcoded inside the Hook:\n\n\n```javascript\nexportfunctionuseChatRoom({serverUrl,roomId}){useEffect(()=>{constoptions={serverUrl:serverUrl,roomId:roomId};constconnection=createConnection(options);connection.connect();connection.on('message',(msg)=>{showNotification('New message: '+msg);});return()=>connection.disconnect();},[roomId,serverUrl]);}\n```\n\n\nLet\u2019s say you want to move this logic back to your component:\n\n\n```javascript\nexportdefaultfunctionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useChatRoom({roomId:roomId,serverUrl:serverUrl,onReceiveMessage(msg){showNotification('New message: '+msg);}});// ...\n```\n\n\nTo make this work, change your custom Hook to take onReceiveMessage as one of its named options:\n\n\n```javascript\nexportfunctionuseChatRoom({serverUrl,roomId,onReceiveMessage}){useEffect(()=>{constoptions={serverUrl:serverUrl,roomId:roomId};constconnection=createConnection(options);connection.connect();connection.on('message',(msg)=>{onReceiveMessage(msg);});return()=>connection.disconnect();},[roomId,serverUrl,onReceiveMessage]);// \u2705 All dependencies declared}\n```\n\n\nThis will work, but there\u2019s one more improvement you can do when your custom Hook accepts event handlers.\n\nAdding a dependency on onReceiveMessage is not ideal because it will cause the chat to re-connect every time the component re-renders. Wrap this event handler into an Effect Event to remove it from the dependencies:\n\n\n```javascript\nimport{useEffect,useEffectEvent}from'react';// ...exportfunctionuseChatRoom({serverUrl,roomId,onReceiveMessage}){constonMessage=useEffectEvent(onReceiveMessage);useEffect(()=>{constoptions={serverUrl:serverUrl,roomId:roomId};constconnection=createConnection(options);connection.connect();connection.on('message',(msg)=>{onMessage(msg);});return()=>connection.disconnect();},[roomId,serverUrl]);// \u2705 All dependencies declared}\n```\n\n\nNow the chat won\u2019t re-connect every time that the ChatRoom component re-renders. Here is a fully working demo of passing an event handler to a custom Hook that you can play with:\n\n\n```javascript\nimport{useState}from'react';import{useChatRoom}from'./useChatRoom.js';import{showNotification}from'./notifications.js';exportdefaultfunctionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useChatRoom({roomId:roomId,serverUrl:serverUrl,onReceiveMessage(msg){showNotification('New message: '+msg);}});return(<><label>Server URL:<inputvalue={serverUrl}onChange={e=>setServerUrl(e.target.value)}/></label><h1>Welcome to the{roomId}room!</h1></>);}\n```\n\n\nNotice how you no longer need to know how useChatRoom works in order to use it. You could add it to any other component, pass any other options, and it would work the same way. That\u2019s the power of custom Hooks.", "source": "https://react.dev/learn/reusing-logic-with-custom-hooks", "category": "Reusing Logic with Custom Hooks"}
{"instruction": "Show me a code example of Passing reactive values between Hooks in React.", "input": "", "output": "The code inside your custom Hooks will re-run during every re-render of your component. This is why, like components, custom Hooks need to be pure. Think of custom Hooks\u2019 code as part of your component\u2019s body!\n\nBecause custom Hooks re-render together with your component, they always receive the latest props and state. To see what this means, consider this chat room example. Change the server URL or the chat room:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';import{showNotification}from'./notifications.js';exportdefaultfunctionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useEffect(()=>{constoptions={serverUrl:serverUrl,roomId:roomId};constconnection=createConnection(options);connection.on('message',(msg)=>{showNotification('New message: '+msg);});connection.connect();return()=>connection.disconnect();},[roomId,serverUrl]);return(<><label>Server URL:<inputvalue={serverUrl}onChange={e=>setServerUrl(e.target.value)}/></label><h1>Welcome to the{roomId}room!</h1></>);}\n```\n\n\nWhen you change serverUrl or roomId , the Effect \u201creacts\u201d to your changes and re-synchronizes. You can tell by the console messages that the chat re-connects every time that you change your Effect\u2019s dependencies.\n\nNow move the Effect\u2019s code into a custom Hook:\n\n\n```javascript\nexportfunctionuseChatRoom({serverUrl,roomId}){useEffect(()=>{constoptions={serverUrl:serverUrl,roomId:roomId};constconnection=createConnection(options);connection.connect();connection.on('message',(msg)=>{showNotification('New message: '+msg);});return()=>connection.disconnect();},[roomId,serverUrl]);}\n```\n\n\nThis lets your ChatRoom component call your custom Hook without worrying about how it works inside:\n\n\n```javascript\nexportdefaultfunctionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useChatRoom({roomId:roomId,serverUrl:serverUrl});return(<><label>Server URL:<inputvalue={serverUrl}onChange={e=>setServerUrl(e.target.value)}/></label><h1>Welcome to the{roomId}room!</h1></>);}\n```\n\n\nThis looks much simpler! (But it does the same thing.)\n\nNotice that the logic still responds to prop and state changes. Try editing the server URL or the selected room:\n\n\n```javascript\nimport{useState}from'react';import{useChatRoom}from'./useChatRoom.js';exportdefaultfunctionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useChatRoom({roomId:roomId,serverUrl:serverUrl});return(<><label>Server URL:<inputvalue={serverUrl}onChange={e=>setServerUrl(e.target.value)}/></label><h1>Welcome to the{roomId}room!</h1></>);}\n```\n\n\nNotice how you\u2019re taking the return value of one Hook:\n\n\n```javascript\nexportdefaultfunctionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useChatRoom({roomId:roomId,serverUrl:serverUrl});// ...\n```\n\n\nand passing it as an input to another Hook:\n\n\n```javascript\nexportdefaultfunctionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useChatRoom({roomId:roomId,serverUrl:serverUrl});// ...\n```\n\n\nEvery time your ChatRoom component re-renders, it passes the latest roomId and serverUrl to your Hook. This is why your Effect re-connects to the chat whenever their values are different after a re-render. (If you ever worked with audio or video processing software, chaining Hooks like this might remind you of chaining visual or audio effects. It\u2019s as if the output of useState \u201cfeeds into\u201d the input of the useChatRoom .)\n\n\n### Passing event handlers to custom Hooks\n\n\n\n### Under Construction\n\n\nThis section describes an experimental API that has not yet been released in a stable version of React.\n\nAs you start using useChatRoom in more components, you might want to let components customize its behavior. For example, currently, the logic for what to do when a message arrives is hardcoded inside the Hook:\n\n\n```javascript\nexportfunctionuseChatRoom({serverUrl,roomId}){useEffect(()=>{constoptions={serverUrl:serverUrl,roomId:roomId};constconnection=createConnection(options);connection.connect();connection.on('message',(msg)=>{showNotification('New message: '+msg);});return()=>connection.disconnect();},[roomId,serverUrl]);}\n```\n\n\nLet\u2019s say you want to move this logic back to your component:\n\n\n```javascript\nexportdefaultfunctionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useChatRoom({roomId:roomId,serverUrl:serverUrl,onReceiveMessage(msg){showNotification('New message: '+msg);}});// ...\n```\n\n\nTo make this work, change your custom Hook to take onReceiveMessage as one of its named options:\n\n\n```javascript\nexportfunctionuseChatRoom({serverUrl,roomId,onReceiveMessage}){useEffect(()=>{constoptions={serverUrl:serverUrl,roomId:roomId};constconnection=createConnection(options);connection.connect();connection.on('message',(msg)=>{onReceiveMessage(msg);});return()=>connection.disconnect();},[roomId,serverUrl,onReceiveMessage]);// \u2705 All dependencies declared}\n```\n\n\nThis will work, but there\u2019s one more improvement you can do when your custom Hook accepts event handlers.\n\nAdding a dependency on onReceiveMessage is not ideal because it will cause the chat to re-connect every time the component re-renders. Wrap this event handler into an Effect Event to remove it from the dependencies:\n\n\n```javascript\nimport{useEffect,useEffectEvent}from'react';// ...exportfunctionuseChatRoom({serverUrl,roomId,onReceiveMessage}){constonMessage=useEffectEvent(onReceiveMessage);useEffect(()=>{constoptions={serverUrl:serverUrl,roomId:roomId};constconnection=createConnection(options);connection.connect();connection.on('message',(msg)=>{onMessage(msg);});return()=>connection.disconnect();},[roomId,serverUrl]);// \u2705 All dependencies declared}\n```\n\n\nNow the chat won\u2019t re-connect every time that the ChatRoom component re-renders. Here is a fully working demo of passing an event handler to a custom Hook that you can play with:\n\n\n```javascript\nimport{useState}from'react';import{useChatRoom}from'./useChatRoom.js';import{showNotification}from'./notifications.js';exportdefaultfunctionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useChatRoom({roomId:roomId,serverUrl:serverUrl,onReceiveMessage(msg){showNotification('New message: '+msg);}});return(<><label>Server URL:<inputvalue={serverUrl}onChange={e=>setServerUrl(e.target.value)}/></label><h1>Welcome to the{roomId}room!</h1></>);}\n```\n\n\nNotice how you no longer need to know how useChatRoom works in order to use it. You could add it to any other component, pass any other options, and it would work the same way. That\u2019s the power of custom Hooks.", "source": "https://react.dev/learn/reusing-logic-with-custom-hooks", "category": "Reusing Logic with Custom Hooks"}
{"instruction": "Explain the concept of When to use custom Hooks in React.", "input": "", "output": "You don\u2019t need to extract a custom Hook for every little duplicated bit of code. Some duplication is fine. For example, extracting a useFormInput Hook to wrap a single useState call like earlier is probably unnecessary.\n\nHowever, whenever you write an Effect, consider whether it would be clearer to also wrap it in a custom Hook. You shouldn\u2019t need Effects very often, so if you\u2019re writing one, it means that you need to \u201cstep outside React\u201d to synchronize with some external system or to do something that React doesn\u2019t have a built-in API for. Wrapping it into a custom Hook lets you precisely communicate your intent and how the data flows through it.\n\nFor example, consider a ShippingForm component that displays two dropdowns: one shows the list of cities, and another shows the list of areas in the selected city. You might start with some code that looks like this:\n\n\n```javascript\nfunctionShippingForm({country}){const[cities,setCities]=useState(null);// This Effect fetches cities for a countryuseEffect(()=>{letignore=false;fetch(`/api/cities?country=${country}`).then(response=>response.json()).then(json=>{if(!ignore){setCities(json);}});return()=>{ignore=true;};},[country]);const[city,setCity]=useState(null);const[areas,setAreas]=useState(null);// This Effect fetches areas for the selected cityuseEffect(()=>{if(city){letignore=false;fetch(`/api/areas?city=${city}`).then(response=>response.json()).then(json=>{if(!ignore){setAreas(json);}});return()=>{ignore=true;};}},[city]);// ...\n```\n\n\nAlthough this code is quite repetitive, it\u2019s correct to keep these Effects separate from each other. They synchronize two different things, so you shouldn\u2019t merge them into one Effect. Instead, you can simplify the ShippingForm component above by extracting the common logic between them into your own useData Hook:\n\n\n```javascript\nfunctionuseData(url){const[data,setData]=useState(null);useEffect(()=>{if(url){letignore=false;fetch(url).then(response=>response.json()).then(json=>{if(!ignore){setData(json);}});return()=>{ignore=true;};}},[url]);returndata;}\n```\n\n\nNow you can replace both Effects in the ShippingForm components with calls to useData :\n\n\n```javascript\nfunctionShippingForm({country}){constcities=useData(`/api/cities?country=${country}`);const[city,setCity]=useState(null);constareas=useData(city?`/api/areas?city=${city}`:null);// ...\n```\n\n\nExtracting a custom Hook makes the data flow explicit. You feed the url in and you get the data out. By \u201chiding\u201d your Effect inside useData , you also prevent someone working on the ShippingForm component from adding unnecessary dependencies to it. With time, most of your app\u2019s Effects will be in custom Hooks.\n\nStart by choosing your custom Hook\u2019s name. If you struggle to pick a clear name, it might mean that your Effect is too coupled to the rest of your component\u2019s logic, and is not yet ready to be extracted.\n\nIdeally, your custom Hook\u2019s name should be clear enough that even a person who doesn\u2019t write code often could have a good guess about what your custom Hook does, what it takes, and what it returns:\n\n* \u2705 useData(url)\n* \u2705 useImpressionLog(eventName, extraData)\n* \u2705 useChatRoom(options)\n\nWhen you synchronize with an external system, your custom Hook name may be more technical and use jargon specific to that system. It\u2019s good as long as it would be clear to a person familiar with that system:\n\n* \u2705 useMediaQuery(query)\n* \u2705 useSocket(url)\n* \u2705 useIntersectionObserver(ref, options)\n\nKeep custom Hooks focused on concrete high-level use cases. Avoid creating and using custom \u201clifecycle\u201d Hooks that act as alternatives and convenience wrappers for the useEffect API itself:\n\n* \ud83d\udd34 useMount(fn)\n* \ud83d\udd34 useEffectOnce(fn)\n* \ud83d\udd34 useUpdateEffect(fn)\n\nFor example, this useMount Hook tries to ensure some code only runs \u201con mount\u201d:\n\n\n```javascript\nfunctionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');// \ud83d\udd34 Avoid: using custom \"lifecycle\" HooksuseMount(()=>{constconnection=createConnection({roomId,serverUrl});connection.connect();post('/analytics/event',{eventName:'visit_chat'});});// ...}// \ud83d\udd34 Avoid: creating custom \"lifecycle\" HooksfunctionuseMount(fn){useEffect(()=>{fn();},[]);// \ud83d\udd34 React Hook useEffect has a missing dependency: 'fn'}\n```\n\n\nCustom \u201clifecycle\u201d Hooks like useMount don\u2019t fit well into the React paradigm. For example, this code example has a mistake (it doesn\u2019t \u201creact\u201d to roomId or serverUrl changes), but the linter won\u2019t warn you about it because the linter only checks direct useEffect calls. It won\u2019t know about your Hook.\n\nIf you\u2019re writing an Effect, start by using the React API directly:\n\n\n```javascript\nfunctionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');// \u2705 Good: two raw Effects separated by purposeuseEffect(()=>{constconnection=createConnection({serverUrl,roomId});connection.connect();return()=>connection.disconnect();},[serverUrl,roomId]);useEffect(()=>{post('/analytics/event',{eventName:'visit_chat',roomId});},[roomId]);// ...}\n```\n\n\nThen, you can (but don\u2019t have to) extract custom Hooks for different high-level use cases:\n\n\n```javascript\nfunctionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');// \u2705 Great: custom Hooks named after their purposeuseChatRoom({serverUrl,roomId});useImpressionLog('visit_chat',{roomId});// ...}\n```\n\n\nA good custom Hook makes the calling code more declarative by constraining what it does. For example, useChatRoom(options) can only connect to the chat room, while useImpressionLog(eventName, extraData) can only send an impression log to the analytics. If your custom Hook API doesn\u2019t constrain the use cases and is very abstract, in the long run it\u2019s likely to introduce more problems than it solves.\n\n\n### Custom Hooks help you migrate to better patterns\n\n\nEffects are an \u201cescape hatch\u201d : you use them when you need to \u201cstep outside React\u201d and when there is no better built-in solution for your use case. With time, the React team\u2019s goal is to reduce the number of the Effects in your app to the minimum by providing more specific solutions to more specific problems. Wrapping your Effects in custom Hooks makes it easier to upgrade your code when these solutions become available.\n\nLet\u2019s return to this example:\n\n\n```javascript\nimport{useState,useEffect}from'react';exportfunctionuseOnlineStatus(){const[isOnline,setIsOnline]=useState(true);useEffect(()=>{functionhandleOnline(){setIsOnline(true);}functionhandleOffline(){setIsOnline(false);}window.addEventListener('online',handleOnline);window.addEventListener('offline',handleOffline);return()=>{window.removeEventListener('online',handleOnline);window.removeEventListener('offline',handleOffline);};},[]);returnisOnline;}\n```\n\n\nIn the above example, useOnlineStatus is implemented with a pair of useState and useEffect . However, this isn\u2019t the best possible solution. There is a number of edge cases it doesn\u2019t consider. For example, it assumes that when the component mounts, isOnline is already true , but this may be wrong if the network already went offline. You can use the browser navigator.onLine API to check for that, but using it directly would not work on the server for generating the initial HTML. In short, this code could be improved.\n\nReact includes a dedicated API called useSyncExternalStore which takes care of all of these problems for you. Here is your useOnlineStatus Hook, rewritten to take advantage of this new API:\n\n\n```javascript\nimport{useSyncExternalStore}from'react';functionsubscribe(callback){window.addEventListener('online',callback);window.addEventListener('offline',callback);return()=>{window.removeEventListener('online',callback);window.removeEventListener('offline',callback);};}exportfunctionuseOnlineStatus(){returnuseSyncExternalStore(subscribe,()=>navigator.onLine,// How to get the value on the client()=>true// How to get the value on the server);}\n```\n\n\nNotice how you didn\u2019t need to change any of the components to make this migration:\n\n\n```javascript\nfunctionStatusBar(){constisOnline=useOnlineStatus();// ...}functionSaveButton(){constisOnline=useOnlineStatus();// ...}\n```\n\n\nThis is another reason for why wrapping Effects in custom Hooks is often beneficial:\n\n1. You make the data flow to and from your Effects very explicit.\n2. You let your components focus on the intent rather than on the exact implementation of your Effects.\n3. When React adds new features, you can remove those Effects without changing any of your components.\n\nSimilar to a design system, you might find it helpful to start extracting common idioms from your app\u2019s components into custom Hooks. This will keep your components\u2019 code focused on the intent, and let you avoid writing raw Effects very often. Many excellent custom Hooks are maintained by the React community.\n\nWe\u2019re still working out the details, but we expect that in the future, you\u2019ll write data fetching like this:\n\n\n```javascript\nimport{use}from'react';// Not available yet!functionShippingForm({country}){constcities=use(fetch(`/api/cities?country=${country}`));const[city,setCity]=useState(null);constareas=city?use(fetch(`/api/areas?city=${city}`)):null;// ...\n```\n\n\nIf you use custom Hooks like useData above in your app, it will require fewer changes to migrate to the eventually recommended approach than if you write raw Effects in every component manually. However, the old approach will still work fine, so if you feel happy writing raw Effects, you can continue to do that.\n\n\n### There is more than one way to do it\n\n\nLet\u2019s say you want to implement a fade-in animation from scratch using the browser requestAnimationFrame API. You might start with an Effect that sets up an animation loop. During each frame of the animation, you could change the opacity of the DOM node you hold in a ref until it reaches 1 . Your code might start like this:\n\n\n```javascript\nimport{useState,useEffect,useRef}from'react';functionWelcome(){constref=useRef(null);useEffect(()=>{constduration=1000;constnode=ref.current;letstartTime=performance.now();letframeId=null;functiononFrame(now){consttimePassed=now-startTime;constprogress=Math.min(timePassed/duration,1);onProgress(progress);if(progress<1){// We still have more frames to paintframeId=requestAnimationFrame(onFrame);}}functiononProgress(progress){node.style.opacity=progress;}functionstart(){onProgress(0);startTime=performance.now();frameId=requestAnimationFrame(onFrame);}functionstop(){cancelAnimationFrame(frameId);startTime=null;frameId=null;}start();return()=>stop();},[]);return(<h1className=\"welcome\"ref={ref}>Welcome</h1>);}exportdefaultfunctionApp(){const[show,setShow]=useState(false);return(<><buttononClick={()=>setShow(!show)}>{show?'Remove':'Show'}</button><hr/>{show&&<Welcome/>}</>);}\n```\n\n\nTo make the component more readable, you might extract the logic into a useFadeIn custom Hook:\n\n\n```javascript\nimport{useState,useEffect,useRef}from'react';import{useFadeIn}from'./useFadeIn.js';functionWelcome(){constref=useRef(null);useFadeIn(ref,1000);return(<h1className=\"welcome\"ref={ref}>Welcome</h1>);}exportdefaultfunctionApp(){const[show,setShow]=useState(false);return(<><buttononClick={()=>setShow(!show)}>{show?'Remove':'Show'}</button><hr/>{show&&<Welcome/>}</>);}\n```\n\n\nYou could keep the useFadeIn code as is, but you could also refactor it more. For example, you could extract the logic for setting up the animation loop out of useFadeIn into a custom useAnimationLoop Hook:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{experimental_useEffectEventasuseEffectEvent}from'react';exportfunctionuseFadeIn(ref,duration){const[isRunning,setIsRunning]=useState(true);useAnimationLoop(isRunning,(timePassed)=>{constprogress=Math.min(timePassed/duration,1);ref.current.style.opacity=progress;if(progress===1){setIsRunning(false);}});}functionuseAnimationLoop(isRunning,drawFrame){constonFrame=useEffectEvent(drawFrame);useEffect(()=>{if(!isRunning){return;}conststartTime=performance.now();letframeId=null;functiontick(now){consttimePassed=now-startTime;onFrame(timePassed);frameId=requestAnimationFrame(tick);}tick();return()=>cancelAnimationFrame(frameId);},[isRunning]);}\n```\n\n\nHowever, you didn\u2019t have to do that. As with regular functions, ultimately you decide where to draw the boundaries between different parts of your code. You could also take a very different approach. Instead of keeping the logic in the Effect, you could move most of the imperative logic inside a JavaScript class:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{FadeInAnimation}from'./animation.js';exportfunctionuseFadeIn(ref,duration){useEffect(()=>{constanimation=newFadeInAnimation(ref.current);animation.start(duration);return()=>{animation.stop();};},[ref,duration]);}\n```\n\n\nEffects let you connect React to external systems. The more coordination between Effects is needed (for example, to chain multiple animations), the more it makes sense to extract that logic out of Effects and Hooks completely like in the sandbox above. Then, the code you extracted becomes the \u201cexternal system\u201d. This lets your Effects stay simple because they only need to send messages to the system you\u2019ve moved outside React.\n\nThe examples above assume that the fade-in logic needs to be written in JavaScript. However, this particular fade-in animation is both simpler and much more efficient to implement with a plain CSS Animation:\n\n\n```javascript\n.welcome{color:white;padding:50px;text-align:center;font-size:50px;background-image:radial-gradient(circle,rgba(63,94,251,1)0%,rgba(252,70,107,1)100%);animation:fadeIn1000ms;}@keyframesfadeIn{0%{opacity:0;}100%{opacity:1;}}\n```\n\n\nSometimes, you don\u2019t even need a Hook!", "source": "https://react.dev/learn/reusing-logic-with-custom-hooks", "category": "Reusing Logic with Custom Hooks"}
{"instruction": "Show me a code example of When to use custom Hooks in React.", "input": "", "output": "You don\u2019t need to extract a custom Hook for every little duplicated bit of code. Some duplication is fine. For example, extracting a useFormInput Hook to wrap a single useState call like earlier is probably unnecessary.\n\nHowever, whenever you write an Effect, consider whether it would be clearer to also wrap it in a custom Hook. You shouldn\u2019t need Effects very often, so if you\u2019re writing one, it means that you need to \u201cstep outside React\u201d to synchronize with some external system or to do something that React doesn\u2019t have a built-in API for. Wrapping it into a custom Hook lets you precisely communicate your intent and how the data flows through it.\n\nFor example, consider a ShippingForm component that displays two dropdowns: one shows the list of cities, and another shows the list of areas in the selected city. You might start with some code that looks like this:\n\n\n```javascript\nfunctionShippingForm({country}){const[cities,setCities]=useState(null);// This Effect fetches cities for a countryuseEffect(()=>{letignore=false;fetch(`/api/cities?country=${country}`).then(response=>response.json()).then(json=>{if(!ignore){setCities(json);}});return()=>{ignore=true;};},[country]);const[city,setCity]=useState(null);const[areas,setAreas]=useState(null);// This Effect fetches areas for the selected cityuseEffect(()=>{if(city){letignore=false;fetch(`/api/areas?city=${city}`).then(response=>response.json()).then(json=>{if(!ignore){setAreas(json);}});return()=>{ignore=true;};}},[city]);// ...\n```\n\n\nAlthough this code is quite repetitive, it\u2019s correct to keep these Effects separate from each other. They synchronize two different things, so you shouldn\u2019t merge them into one Effect. Instead, you can simplify the ShippingForm component above by extracting the common logic between them into your own useData Hook:\n\n\n```javascript\nfunctionuseData(url){const[data,setData]=useState(null);useEffect(()=>{if(url){letignore=false;fetch(url).then(response=>response.json()).then(json=>{if(!ignore){setData(json);}});return()=>{ignore=true;};}},[url]);returndata;}\n```\n\n\nNow you can replace both Effects in the ShippingForm components with calls to useData :\n\n\n```javascript\nfunctionShippingForm({country}){constcities=useData(`/api/cities?country=${country}`);const[city,setCity]=useState(null);constareas=useData(city?`/api/areas?city=${city}`:null);// ...\n```\n\n\nExtracting a custom Hook makes the data flow explicit. You feed the url in and you get the data out. By \u201chiding\u201d your Effect inside useData , you also prevent someone working on the ShippingForm component from adding unnecessary dependencies to it. With time, most of your app\u2019s Effects will be in custom Hooks.\n\nStart by choosing your custom Hook\u2019s name. If you struggle to pick a clear name, it might mean that your Effect is too coupled to the rest of your component\u2019s logic, and is not yet ready to be extracted.\n\nIdeally, your custom Hook\u2019s name should be clear enough that even a person who doesn\u2019t write code often could have a good guess about what your custom Hook does, what it takes, and what it returns:\n\n* \u2705 useData(url)\n* \u2705 useImpressionLog(eventName, extraData)\n* \u2705 useChatRoom(options)\n\nWhen you synchronize with an external system, your custom Hook name may be more technical and use jargon specific to that system. It\u2019s good as long as it would be clear to a person familiar with that system:\n\n* \u2705 useMediaQuery(query)\n* \u2705 useSocket(url)\n* \u2705 useIntersectionObserver(ref, options)\n\nKeep custom Hooks focused on concrete high-level use cases. Avoid creating and using custom \u201clifecycle\u201d Hooks that act as alternatives and convenience wrappers for the useEffect API itself:\n\n* \ud83d\udd34 useMount(fn)\n* \ud83d\udd34 useEffectOnce(fn)\n* \ud83d\udd34 useUpdateEffect(fn)\n\nFor example, this useMount Hook tries to ensure some code only runs \u201con mount\u201d:\n\n\n```javascript\nfunctionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');// \ud83d\udd34 Avoid: using custom \"lifecycle\" HooksuseMount(()=>{constconnection=createConnection({roomId,serverUrl});connection.connect();post('/analytics/event',{eventName:'visit_chat'});});// ...}// \ud83d\udd34 Avoid: creating custom \"lifecycle\" HooksfunctionuseMount(fn){useEffect(()=>{fn();},[]);// \ud83d\udd34 React Hook useEffect has a missing dependency: 'fn'}\n```\n\n\nCustom \u201clifecycle\u201d Hooks like useMount don\u2019t fit well into the React paradigm. For example, this code example has a mistake (it doesn\u2019t \u201creact\u201d to roomId or serverUrl changes), but the linter won\u2019t warn you about it because the linter only checks direct useEffect calls. It won\u2019t know about your Hook.\n\nIf you\u2019re writing an Effect, start by using the React API directly:\n\n\n```javascript\nfunctionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');// \u2705 Good: two raw Effects separated by purposeuseEffect(()=>{constconnection=createConnection({serverUrl,roomId});connection.connect();return()=>connection.disconnect();},[serverUrl,roomId]);useEffect(()=>{post('/analytics/event',{eventName:'visit_chat',roomId});},[roomId]);// ...}\n```\n\n\nThen, you can (but don\u2019t have to) extract custom Hooks for different high-level use cases:\n\n\n```javascript\nfunctionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');// \u2705 Great: custom Hooks named after their purposeuseChatRoom({serverUrl,roomId});useImpressionLog('visit_chat',{roomId});// ...}\n```\n\n\nA good custom Hook makes the calling code more declarative by constraining what it does. For example, useChatRoom(options) can only connect to the chat room, while useImpressionLog(eventName, extraData) can only send an impression log to the analytics. If your custom Hook API doesn\u2019t constrain the use cases and is very abstract, in the long run it\u2019s likely to introduce more problems than it solves.\n\n\n### Custom Hooks help you migrate to better patterns\n\n\nEffects are an \u201cescape hatch\u201d : you use them when you need to \u201cstep outside React\u201d and when there is no better built-in solution for your use case. With time, the React team\u2019s goal is to reduce the number of the Effects in your app to the minimum by providing more specific solutions to more specific problems. Wrapping your Effects in custom Hooks makes it easier to upgrade your code when these solutions become available.\n\nLet\u2019s return to this example:\n\n\n```javascript\nimport{useState,useEffect}from'react';exportfunctionuseOnlineStatus(){const[isOnline,setIsOnline]=useState(true);useEffect(()=>{functionhandleOnline(){setIsOnline(true);}functionhandleOffline(){setIsOnline(false);}window.addEventListener('online',handleOnline);window.addEventListener('offline',handleOffline);return()=>{window.removeEventListener('online',handleOnline);window.removeEventListener('offline',handleOffline);};},[]);returnisOnline;}\n```\n\n\nIn the above example, useOnlineStatus is implemented with a pair of useState and useEffect . However, this isn\u2019t the best possible solution. There is a number of edge cases it doesn\u2019t consider. For example, it assumes that when the component mounts, isOnline is already true , but this may be wrong if the network already went offline. You can use the browser navigator.onLine API to check for that, but using it directly would not work on the server for generating the initial HTML. In short, this code could be improved.\n\nReact includes a dedicated API called useSyncExternalStore which takes care of all of these problems for you. Here is your useOnlineStatus Hook, rewritten to take advantage of this new API:\n\n\n```javascript\nimport{useSyncExternalStore}from'react';functionsubscribe(callback){window.addEventListener('online',callback);window.addEventListener('offline',callback);return()=>{window.removeEventListener('online',callback);window.removeEventListener('offline',callback);};}exportfunctionuseOnlineStatus(){returnuseSyncExternalStore(subscribe,()=>navigator.onLine,// How to get the value on the client()=>true// How to get the value on the server);}\n```\n\n\nNotice how you didn\u2019t need to change any of the components to make this migration:\n\n\n```javascript\nfunctionStatusBar(){constisOnline=useOnlineStatus();// ...}functionSaveButton(){constisOnline=useOnlineStatus();// ...}\n```\n\n\nThis is another reason for why wrapping Effects in custom Hooks is often beneficial:\n\n1. You make the data flow to and from your Effects very explicit.\n2. You let your components focus on the intent rather than on the exact implementation of your Effects.\n3. When React adds new features, you can remove those Effects without changing any of your components.\n\nSimilar to a design system, you might find it helpful to start extracting common idioms from your app\u2019s components into custom Hooks. This will keep your components\u2019 code focused on the intent, and let you avoid writing raw Effects very often. Many excellent custom Hooks are maintained by the React community.\n\nWe\u2019re still working out the details, but we expect that in the future, you\u2019ll write data fetching like this:\n\n\n```javascript\nimport{use}from'react';// Not available yet!functionShippingForm({country}){constcities=use(fetch(`/api/cities?country=${country}`));const[city,setCity]=useState(null);constareas=city?use(fetch(`/api/areas?city=${city}`)):null;// ...\n```\n\n\nIf you use custom Hooks like useData above in your app, it will require fewer changes to migrate to the eventually recommended approach than if you write raw Effects in every component manually. However, the old approach will still work fine, so if you feel happy writing raw Effects, you can continue to do that.\n\n\n### There is more than one way to do it\n\n\nLet\u2019s say you want to implement a fade-in animation from scratch using the browser requestAnimationFrame API. You might start with an Effect that sets up an animation loop. During each frame of the animation, you could change the opacity of the DOM node you hold in a ref until it reaches 1 . Your code might start like this:\n\n\n```javascript\nimport{useState,useEffect,useRef}from'react';functionWelcome(){constref=useRef(null);useEffect(()=>{constduration=1000;constnode=ref.current;letstartTime=performance.now();letframeId=null;functiononFrame(now){consttimePassed=now-startTime;constprogress=Math.min(timePassed/duration,1);onProgress(progress);if(progress<1){// We still have more frames to paintframeId=requestAnimationFrame(onFrame);}}functiononProgress(progress){node.style.opacity=progress;}functionstart(){onProgress(0);startTime=performance.now();frameId=requestAnimationFrame(onFrame);}functionstop(){cancelAnimationFrame(frameId);startTime=null;frameId=null;}start();return()=>stop();},[]);return(<h1className=\"welcome\"ref={ref}>Welcome</h1>);}exportdefaultfunctionApp(){const[show,setShow]=useState(false);return(<><buttononClick={()=>setShow(!show)}>{show?'Remove':'Show'}</button><hr/>{show&&<Welcome/>}</>);}\n```\n\n\nTo make the component more readable, you might extract the logic into a useFadeIn custom Hook:\n\n\n```javascript\nimport{useState,useEffect,useRef}from'react';import{useFadeIn}from'./useFadeIn.js';functionWelcome(){constref=useRef(null);useFadeIn(ref,1000);return(<h1className=\"welcome\"ref={ref}>Welcome</h1>);}exportdefaultfunctionApp(){const[show,setShow]=useState(false);return(<><buttononClick={()=>setShow(!show)}>{show?'Remove':'Show'}</button><hr/>{show&&<Welcome/>}</>);}\n```\n\n\nYou could keep the useFadeIn code as is, but you could also refactor it more. For example, you could extract the logic for setting up the animation loop out of useFadeIn into a custom useAnimationLoop Hook:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{experimental_useEffectEventasuseEffectEvent}from'react';exportfunctionuseFadeIn(ref,duration){const[isRunning,setIsRunning]=useState(true);useAnimationLoop(isRunning,(timePassed)=>{constprogress=Math.min(timePassed/duration,1);ref.current.style.opacity=progress;if(progress===1){setIsRunning(false);}});}functionuseAnimationLoop(isRunning,drawFrame){constonFrame=useEffectEvent(drawFrame);useEffect(()=>{if(!isRunning){return;}conststartTime=performance.now();letframeId=null;functiontick(now){consttimePassed=now-startTime;onFrame(timePassed);frameId=requestAnimationFrame(tick);}tick();return()=>cancelAnimationFrame(frameId);},[isRunning]);}\n```\n\n\nHowever, you didn\u2019t have to do that. As with regular functions, ultimately you decide where to draw the boundaries between different parts of your code. You could also take a very different approach. Instead of keeping the logic in the Effect, you could move most of the imperative logic inside a JavaScript class:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{FadeInAnimation}from'./animation.js';exportfunctionuseFadeIn(ref,duration){useEffect(()=>{constanimation=newFadeInAnimation(ref.current);animation.start(duration);return()=>{animation.stop();};},[ref,duration]);}\n```\n\n\nEffects let you connect React to external systems. The more coordination between Effects is needed (for example, to chain multiple animations), the more it makes sense to extract that logic out of Effects and Hooks completely like in the sandbox above. Then, the code you extracted becomes the \u201cexternal system\u201d. This lets your Effects stay simple because they only need to send messages to the system you\u2019ve moved outside React.\n\nThe examples above assume that the fade-in logic needs to be written in JavaScript. However, this particular fade-in animation is both simpler and much more efficient to implement with a plain CSS Animation:\n\n\n```javascript\n.welcome{color:white;padding:50px;text-align:center;font-size:50px;background-image:radial-gradient(circle,rgba(63,94,251,1)0%,rgba(252,70,107,1)100%);animation:fadeIn1000ms;}@keyframesfadeIn{0%{opacity:0;}100%{opacity:1;}}\n```\n\n\nSometimes, you don\u2019t even need a Hook!", "source": "https://react.dev/learn/reusing-logic-with-custom-hooks", "category": "Reusing Logic with Custom Hooks"}
{"instruction": "How do I handle Combining a reducer with context in React?", "input": "", "output": "In this example from the introduction to reducers , the state is managed by a reducer. The reducer function contains all of the state update logic and is declared at the bottom of this file:\n\n\n```javascript\nimport{useReducer}from'react';importAddTaskfrom'./AddTask.js';importTaskListfrom'./TaskList.js';exportdefaultfunctionTaskApp(){const[tasks,dispatch]=useReducer(tasksReducer,initialTasks);functionhandleAddTask(text){dispatch({type:'added',id:nextId++,text:text,});}functionhandleChangeTask(task){dispatch({type:'changed',task:task});}functionhandleDeleteTask(taskId){dispatch({type:'deleted',id:taskId});}return(<><h1>Day off in Kyoto</h1><AddTaskonAddTask={handleAddTask}/><TaskListtasks={tasks}onChangeTask={handleChangeTask}onDeleteTask={handleDeleteTask}/></>);}functiontasksReducer(tasks,action){switch(action.type){case'added':{return[...tasks,{id:action.id,text:action.text,done:false}];}case'changed':{returntasks.map(t=>{if(t.id===action.task.id){returnaction.task;}else{returnt;}});}case'deleted':{returntasks.filter(t=>t.id!==action.id);}default:{throwError('Unknown action: '+action.type);}}}letnextId=3;constinitialTasks=[{id:0,text:'Philosopher\u2019s Path',done:true},{id:1,text:'Visit the temple',done:false},{id:2,text:'Drink matcha',done:false}];\n```\n\n\nA reducer helps keep the event handlers short and concise. However, as your app grows, you might run into another difficulty. Currently, the tasks state and the dispatch function are only available in the top-level TaskApp component. To let other components read the list of tasks or change it, you have to explicitly pass down the current state and the event handlers that change it as props.\n\nFor example, TaskApp passes a list of tasks and the event handlers to TaskList :\n\n\n```javascript\n<TaskListtasks={tasks}onChangeTask={handleChangeTask}onDeleteTask={handleDeleteTask}/>\n```\n\n\nAnd TaskList passes the event handlers to Task :\n\n\n```javascript\n<Tasktask={task}onChange={onChangeTask}onDelete={onDeleteTask}/>\n```\n\n\nIn a small example like this, this works well, but if you have tens or hundreds of components in the middle, passing down all state and functions can be quite frustrating!\n\nThis is why, as an alternative to passing them through props, you might want to put both the tasks state and the dispatch function into context. This way, any component below TaskApp in the tree can read the tasks and dispatch actions without the repetitive \u201cprop drilling\u201d.\n\nHere is how you can combine a reducer with context:\n\n1. Create the context.\n2. Put state and dispatch into context.\n3. Use context anywhere in the tree.\n\n\n### Step 1: Create the context\n\n\nThe useReducer Hook returns the current tasks and the dispatch function that lets you update them:\n\n\n```javascript\nconst[tasks,dispatch]=useReducer(tasksReducer,initialTasks);\n```\n\n\nTo pass them down the tree, you will create two separate contexts:\n\n* TasksContext provides the current list of tasks.\n* TasksDispatchContext provides the function that lets components dispatch actions.\n\nExport them from a separate file so that you can later import them from other files:\n\n\n```javascript\nimport{createContext}from'react';exportconstTasksContext=createContext(null);exportconstTasksDispatchContext=createContext(null);\n```\n\n\nHere, you\u2019re passing null as the default value to both contexts. The actual values will be provided by the TaskApp component.\n\n\n### Step 2: Put state and dispatch into context\n\n\nNow you can import both contexts in your TaskApp component. Take the tasks and dispatch returned by useReducer() and provide them to the entire tree below:\n\n\n```javascript\nimport{TasksContext,TasksDispatchContext}from'./TasksContext.js';exportdefaultfunctionTaskApp(){const[tasks,dispatch]=useReducer(tasksReducer,initialTasks);// ...return(<TasksContextvalue={tasks}><TasksDispatchContextvalue={dispatch}>...</TasksDispatchContext></TasksContext>);}\n```\n\n\nFor now, you pass the information both via props and in context:\n\n\n```javascript\nimport{useReducer}from'react';importAddTaskfrom'./AddTask.js';importTaskListfrom'./TaskList.js';import{TasksContext,TasksDispatchContext}from'./TasksContext.js';exportdefaultfunctionTaskApp(){const[tasks,dispatch]=useReducer(tasksReducer,initialTasks);functionhandleAddTask(text){dispatch({type:'added',id:nextId++,text:text,});}functionhandleChangeTask(task){dispatch({type:'changed',task:task});}functionhandleDeleteTask(taskId){dispatch({type:'deleted',id:taskId});}return(<TasksContextvalue={tasks}><TasksDispatchContextvalue={dispatch}><h1>Day off in Kyoto</h1><AddTaskonAddTask={handleAddTask}/><TaskListtasks={tasks}onChangeTask={handleChangeTask}onDeleteTask={handleDeleteTask}/></TasksDispatchContext></TasksContext>);}functiontasksReducer(tasks,action){switch(action.type){case'added':{return[...tasks,{id:action.id,text:action.text,done:false}];}case'changed':{returntasks.map(t=>{if(t.id===action.task.id){returnaction.task;}else{returnt;}});}case'deleted':{returntasks.filter(t=>t.id!==action.id);}default:{throwError('Unknown action: '+action.type);}}}letnextId=3;constinitialTasks=[{id:0,text:'Philosopher\u2019s Path',done:true},{id:1,text:'Visit the temple',done:false},{id:2,text:'Drink matcha',done:false}];\n```\n\n\nIn the next step, you will remove prop passing.\n\n\n### Step 3: Use context anywhere in the tree\n\n\nNow you don\u2019t need to pass the list of tasks or the event handlers down the tree:\n\n\n```javascript\n<TasksContextvalue={tasks}><TasksDispatchContextvalue={dispatch}><h1>Day off in Kyoto</h1><AddTask/><TaskList/></TasksDispatchContext></TasksContext>\n```\n\n\nInstead, any component that needs the task list can read it from the TasksContext :\n\n\n```javascript\nexportdefaultfunctionTaskList(){consttasks=useContext(TasksContext);// ...\n```\n\n\nTo update the task list, any component can read the dispatch function from context and call it:\n\n\n```javascript\nexportdefaultfunctionAddTask(){const[text,setText]=useState('');constdispatch=useContext(TasksDispatchContext);// ...return(// ...<buttononClick={()=>{setText('');dispatch({type:'added',id:nextId++,text:text,});}}>Add</button>// ...\n```\n\n\nThe TaskApp component does not pass any event handlers down, and the TaskList does not pass any event handlers to the Task component either. Each component reads the context that it needs:\n\n\n```javascript\nimport{useState,useContext}from'react';import{TasksContext,TasksDispatchContext}from'./TasksContext.js';exportdefaultfunctionTaskList(){consttasks=useContext(TasksContext);return(<ul>{tasks.map(task=>(<likey={task.id}><Tasktask={task}/></li>))}</ul>);}functionTask({task}){const[isEditing,setIsEditing]=useState(false);constdispatch=useContext(TasksDispatchContext);lettaskContent;if(isEditing){taskContent=(<><inputvalue={task.text}onChange={e=>{dispatch({type:'changed',task:{...task,text:e.target.value}});}}/><buttononClick={()=>setIsEditing(false)}>Save</button></>);}else{taskContent=(<>{task.text}<buttononClick={()=>setIsEditing(true)}>Edit</button></>);}return(<label><inputtype=\"checkbox\"checked={task.done}onChange={e=>{dispatch({type:'changed',task:{...task,done:e.target.checked}});}}/>{taskContent}<buttononClick={()=>{dispatch({type:'deleted',id:task.id});}}>Delete</button></label>);}\n```\n\n\nThe state still \u201clives\u201d in the top-level TaskApp component, managed with useReducer . But its tasks and dispatch are now available to every component below in the tree by importing and using these contexts.", "source": "https://react.dev/learn/scaling-up-with-reducer-and-context", "category": "Scaling Up with Reducer and Context"}
{"instruction": "Show me a code example of Combining a reducer with context in React.", "input": "", "output": "In this example from the introduction to reducers , the state is managed by a reducer. The reducer function contains all of the state update logic and is declared at the bottom of this file:\n\n\n```javascript\nimport{useReducer}from'react';importAddTaskfrom'./AddTask.js';importTaskListfrom'./TaskList.js';exportdefaultfunctionTaskApp(){const[tasks,dispatch]=useReducer(tasksReducer,initialTasks);functionhandleAddTask(text){dispatch({type:'added',id:nextId++,text:text,});}functionhandleChangeTask(task){dispatch({type:'changed',task:task});}functionhandleDeleteTask(taskId){dispatch({type:'deleted',id:taskId});}return(<><h1>Day off in Kyoto</h1><AddTaskonAddTask={handleAddTask}/><TaskListtasks={tasks}onChangeTask={handleChangeTask}onDeleteTask={handleDeleteTask}/></>);}functiontasksReducer(tasks,action){switch(action.type){case'added':{return[...tasks,{id:action.id,text:action.text,done:false}];}case'changed':{returntasks.map(t=>{if(t.id===action.task.id){returnaction.task;}else{returnt;}});}case'deleted':{returntasks.filter(t=>t.id!==action.id);}default:{throwError('Unknown action: '+action.type);}}}letnextId=3;constinitialTasks=[{id:0,text:'Philosopher\u2019s Path',done:true},{id:1,text:'Visit the temple',done:false},{id:2,text:'Drink matcha',done:false}];\n```\n\n\nA reducer helps keep the event handlers short and concise. However, as your app grows, you might run into another difficulty. Currently, the tasks state and the dispatch function are only available in the top-level TaskApp component. To let other components read the list of tasks or change it, you have to explicitly pass down the current state and the event handlers that change it as props.\n\nFor example, TaskApp passes a list of tasks and the event handlers to TaskList :\n\n\n```javascript\n<TaskListtasks={tasks}onChangeTask={handleChangeTask}onDeleteTask={handleDeleteTask}/>\n```\n\n\nAnd TaskList passes the event handlers to Task :\n\n\n```javascript\n<Tasktask={task}onChange={onChangeTask}onDelete={onDeleteTask}/>\n```\n\n\nIn a small example like this, this works well, but if you have tens or hundreds of components in the middle, passing down all state and functions can be quite frustrating!\n\nThis is why, as an alternative to passing them through props, you might want to put both the tasks state and the dispatch function into context. This way, any component below TaskApp in the tree can read the tasks and dispatch actions without the repetitive \u201cprop drilling\u201d.\n\nHere is how you can combine a reducer with context:\n\n1. Create the context.\n2. Put state and dispatch into context.\n3. Use context anywhere in the tree.\n\n\n### Step 1: Create the context\n\n\nThe useReducer Hook returns the current tasks and the dispatch function that lets you update them:\n\n\n```javascript\nconst[tasks,dispatch]=useReducer(tasksReducer,initialTasks);\n```\n\n\nTo pass them down the tree, you will create two separate contexts:\n\n* TasksContext provides the current list of tasks.\n* TasksDispatchContext provides the function that lets components dispatch actions.\n\nExport them from a separate file so that you can later import them from other files:\n\n\n```javascript\nimport{createContext}from'react';exportconstTasksContext=createContext(null);exportconstTasksDispatchContext=createContext(null);\n```\n\n\nHere, you\u2019re passing null as the default value to both contexts. The actual values will be provided by the TaskApp component.\n\n\n### Step 2: Put state and dispatch into context\n\n\nNow you can import both contexts in your TaskApp component. Take the tasks and dispatch returned by useReducer() and provide them to the entire tree below:\n\n\n```javascript\nimport{TasksContext,TasksDispatchContext}from'./TasksContext.js';exportdefaultfunctionTaskApp(){const[tasks,dispatch]=useReducer(tasksReducer,initialTasks);// ...return(<TasksContextvalue={tasks}><TasksDispatchContextvalue={dispatch}>...</TasksDispatchContext></TasksContext>);}\n```\n\n\nFor now, you pass the information both via props and in context:\n\n\n```javascript\nimport{useReducer}from'react';importAddTaskfrom'./AddTask.js';importTaskListfrom'./TaskList.js';import{TasksContext,TasksDispatchContext}from'./TasksContext.js';exportdefaultfunctionTaskApp(){const[tasks,dispatch]=useReducer(tasksReducer,initialTasks);functionhandleAddTask(text){dispatch({type:'added',id:nextId++,text:text,});}functionhandleChangeTask(task){dispatch({type:'changed',task:task});}functionhandleDeleteTask(taskId){dispatch({type:'deleted',id:taskId});}return(<TasksContextvalue={tasks}><TasksDispatchContextvalue={dispatch}><h1>Day off in Kyoto</h1><AddTaskonAddTask={handleAddTask}/><TaskListtasks={tasks}onChangeTask={handleChangeTask}onDeleteTask={handleDeleteTask}/></TasksDispatchContext></TasksContext>);}functiontasksReducer(tasks,action){switch(action.type){case'added':{return[...tasks,{id:action.id,text:action.text,done:false}];}case'changed':{returntasks.map(t=>{if(t.id===action.task.id){returnaction.task;}else{returnt;}});}case'deleted':{returntasks.filter(t=>t.id!==action.id);}default:{throwError('Unknown action: '+action.type);}}}letnextId=3;constinitialTasks=[{id:0,text:'Philosopher\u2019s Path',done:true},{id:1,text:'Visit the temple',done:false},{id:2,text:'Drink matcha',done:false}];\n```\n\n\nIn the next step, you will remove prop passing.\n\n\n### Step 3: Use context anywhere in the tree\n\n\nNow you don\u2019t need to pass the list of tasks or the event handlers down the tree:\n\n\n```javascript\n<TasksContextvalue={tasks}><TasksDispatchContextvalue={dispatch}><h1>Day off in Kyoto</h1><AddTask/><TaskList/></TasksDispatchContext></TasksContext>\n```\n\n\nInstead, any component that needs the task list can read it from the TasksContext :\n\n\n```javascript\nexportdefaultfunctionTaskList(){consttasks=useContext(TasksContext);// ...\n```\n\n\nTo update the task list, any component can read the dispatch function from context and call it:\n\n\n```javascript\nexportdefaultfunctionAddTask(){const[text,setText]=useState('');constdispatch=useContext(TasksDispatchContext);// ...return(// ...<buttononClick={()=>{setText('');dispatch({type:'added',id:nextId++,text:text,});}}>Add</button>// ...\n```\n\n\nThe TaskApp component does not pass any event handlers down, and the TaskList does not pass any event handlers to the Task component either. Each component reads the context that it needs:\n\n\n```javascript\nimport{useState,useContext}from'react';import{TasksContext,TasksDispatchContext}from'./TasksContext.js';exportdefaultfunctionTaskList(){consttasks=useContext(TasksContext);return(<ul>{tasks.map(task=>(<likey={task.id}><Tasktask={task}/></li>))}</ul>);}functionTask({task}){const[isEditing,setIsEditing]=useState(false);constdispatch=useContext(TasksDispatchContext);lettaskContent;if(isEditing){taskContent=(<><inputvalue={task.text}onChange={e=>{dispatch({type:'changed',task:{...task,text:e.target.value}});}}/><buttononClick={()=>setIsEditing(false)}>Save</button></>);}else{taskContent=(<>{task.text}<buttononClick={()=>setIsEditing(true)}>Edit</button></>);}return(<label><inputtype=\"checkbox\"checked={task.done}onChange={e=>{dispatch({type:'changed',task:{...task,done:e.target.checked}});}}/>{taskContent}<buttononClick={()=>{dispatch({type:'deleted',id:task.id});}}>Delete</button></label>);}\n```\n\n\nThe state still \u201clives\u201d in the top-level TaskApp component, managed with useReducer . But its tasks and dispatch are now available to every component below in the tree by importing and using these contexts.", "source": "https://react.dev/learn/scaling-up-with-reducer-and-context", "category": "Scaling Up with Reducer and Context"}
{"instruction": "What is the process for Moving all wiring into a single file in a React component?", "input": "", "output": "You don\u2019t have to do this, but you could further declutter the components by moving both reducer and context into a single file. Currently, TasksContext.js contains only two context declarations:\n\n\n```javascript\nimport{createContext}from'react';exportconstTasksContext=createContext(null);exportconstTasksDispatchContext=createContext(null);\n```\n\n\nThis file is about to get crowded! You\u2019ll move the reducer into that same file. Then you\u2019ll declare a new TasksProvider component in the same file. This component will tie all the pieces together:\n\n1. It will manage the state with a reducer.\n2. It will provide both contexts to components below.\n3. It will take children as a prop so you can pass JSX to it.\n\n\n```javascript\nexportfunctionTasksProvider({children}){const[tasks,dispatch]=useReducer(tasksReducer,initialTasks);return(<TasksContextvalue={tasks}><TasksDispatchContextvalue={dispatch}>{children}</TasksDispatchContext></TasksContext>);}\n```\n\n\nThis removes all the complexity and wiring from your TaskApp component:\n\n\n```javascript\nimportAddTaskfrom'./AddTask.js';importTaskListfrom'./TaskList.js';import{TasksProvider}from'./TasksContext.js';exportdefaultfunctionTaskApp(){return(<TasksProvider><h1>Day off in Kyoto</h1><AddTask/><TaskList/></TasksProvider>);}\n```\n\n\nYou can also export functions that use the context from TasksContext.js :\n\n\n```javascript\nexportfunctionuseTasks(){returnuseContext(TasksContext);}exportfunctionuseTasksDispatch(){returnuseContext(TasksDispatchContext);}\n```\n\n\nWhen a component needs to read context, it can do it through these functions:\n\n\n```javascript\nconsttasks=useTasks();constdispatch=useTasksDispatch();\n```\n\n\nThis doesn\u2019t change the behavior in any way, but it lets you later split these contexts further or add some logic to these functions. Now all of the context and reducer wiring is in TasksContext.js . This keeps the components clean and uncluttered, focused on what they display rather than where they get the data:\n\n\n```javascript\nimport{useState}from'react';import{useTasks,useTasksDispatch}from'./TasksContext.js';exportdefaultfunctionTaskList(){consttasks=useTasks();return(<ul>{tasks.map(task=>(<likey={task.id}><Tasktask={task}/></li>))}</ul>);}functionTask({task}){const[isEditing,setIsEditing]=useState(false);constdispatch=useTasksDispatch();lettaskContent;if(isEditing){taskContent=(<><inputvalue={task.text}onChange={e=>{dispatch({type:'changed',task:{...task,text:e.target.value}});}}/><buttononClick={()=>setIsEditing(false)}>Save</button></>);}else{taskContent=(<>{task.text}<buttononClick={()=>setIsEditing(true)}>Edit</button></>);}return(<label><inputtype=\"checkbox\"checked={task.done}onChange={e=>{dispatch({type:'changed',task:{...task,done:e.target.checked}});}}/>{taskContent}<buttononClick={()=>{dispatch({type:'deleted',id:task.id});}}>Delete</button></label>);}\n```\n\n\nYou can think of TasksProvider as a part of the screen that knows how to deal with tasks, useTasks as a way to read them, and useTasksDispatch as a way to update them from any component below in the tree.\n\n\n### Note\n\n\nFunctions like useTasks and useTasksDispatch are called Custom Hooks. Your function is considered a custom Hook if its name starts with use . This lets you use other Hooks, like useContext , inside it.\n\nAs your app grows, you may have many context-reducer pairs like this. This is a powerful way to scale your app and lift state up without too much work whenever you want to access the data deep in the tree.", "source": "https://react.dev/learn/scaling-up-with-reducer-and-context", "category": "Scaling Up with Reducer and Context"}
{"instruction": "Show me a code example of Moving all wiring into a single file in React.", "input": "", "output": "You don\u2019t have to do this, but you could further declutter the components by moving both reducer and context into a single file. Currently, TasksContext.js contains only two context declarations:\n\n\n```javascript\nimport{createContext}from'react';exportconstTasksContext=createContext(null);exportconstTasksDispatchContext=createContext(null);\n```\n\n\nThis file is about to get crowded! You\u2019ll move the reducer into that same file. Then you\u2019ll declare a new TasksProvider component in the same file. This component will tie all the pieces together:\n\n1. It will manage the state with a reducer.\n2. It will provide both contexts to components below.\n3. It will take children as a prop so you can pass JSX to it.\n\n\n```javascript\nexportfunctionTasksProvider({children}){const[tasks,dispatch]=useReducer(tasksReducer,initialTasks);return(<TasksContextvalue={tasks}><TasksDispatchContextvalue={dispatch}>{children}</TasksDispatchContext></TasksContext>);}\n```\n\n\nThis removes all the complexity and wiring from your TaskApp component:\n\n\n```javascript\nimportAddTaskfrom'./AddTask.js';importTaskListfrom'./TaskList.js';import{TasksProvider}from'./TasksContext.js';exportdefaultfunctionTaskApp(){return(<TasksProvider><h1>Day off in Kyoto</h1><AddTask/><TaskList/></TasksProvider>);}\n```\n\n\nYou can also export functions that use the context from TasksContext.js :\n\n\n```javascript\nexportfunctionuseTasks(){returnuseContext(TasksContext);}exportfunctionuseTasksDispatch(){returnuseContext(TasksDispatchContext);}\n```\n\n\nWhen a component needs to read context, it can do it through these functions:\n\n\n```javascript\nconsttasks=useTasks();constdispatch=useTasksDispatch();\n```\n\n\nThis doesn\u2019t change the behavior in any way, but it lets you later split these contexts further or add some logic to these functions. Now all of the context and reducer wiring is in TasksContext.js . This keeps the components clean and uncluttered, focused on what they display rather than where they get the data:\n\n\n```javascript\nimport{useState}from'react';import{useTasks,useTasksDispatch}from'./TasksContext.js';exportdefaultfunctionTaskList(){consttasks=useTasks();return(<ul>{tasks.map(task=>(<likey={task.id}><Tasktask={task}/></li>))}</ul>);}functionTask({task}){const[isEditing,setIsEditing]=useState(false);constdispatch=useTasksDispatch();lettaskContent;if(isEditing){taskContent=(<><inputvalue={task.text}onChange={e=>{dispatch({type:'changed',task:{...task,text:e.target.value}});}}/><buttononClick={()=>setIsEditing(false)}>Save</button></>);}else{taskContent=(<>{task.text}<buttononClick={()=>setIsEditing(true)}>Edit</button></>);}return(<label><inputtype=\"checkbox\"checked={task.done}onChange={e=>{dispatch({type:'changed',task:{...task,done:e.target.checked}});}}/>{taskContent}<buttononClick={()=>{dispatch({type:'deleted',id:task.id});}}>Delete</button></label>);}\n```\n\n\nYou can think of TasksProvider as a part of the screen that knows how to deal with tasks, useTasks as a way to read them, and useTasksDispatch as a way to update them from any component below in the tree.\n\n\n### Note\n\n\nFunctions like useTasks and useTasksDispatch are called Custom Hooks. Your function is considered a custom Hook if its name starts with use . This lets you use other Hooks, like useContext , inside it.\n\nAs your app grows, you may have many context-reducer pairs like this. This is a powerful way to scale your app and lift state up without too much work whenever you want to access the data deep in the tree.", "source": "https://react.dev/learn/scaling-up-with-reducer-and-context", "category": "Scaling Up with Reducer and Context"}
{"instruction": "What is the process for Choosing between event handlers and Effects in a React component?", "input": "", "output": "First, let\u2019s recap the difference between event handlers and Effects.\n\nImagine you\u2019re implementing a chat room component. Your requirements look like this:\n\n1. Your component should automatically connect to the selected chat room.\n2. When you click the \u201cSend\u201d button, it should send a message to the chat.\n\nLet\u2019s say you\u2019ve already implemented the code for them, but you\u2019re not sure where to put it. Should you use event handlers or Effects? Every time you need to answer this question, consider why the code needs to run.\n\n\n### Event handlers run in response to specific interactions\n\n\nFrom the user\u2019s perspective, sending a message should happen because the particular \u201cSend\u201d button was clicked. The user will get rather upset if you send their message at any other time or for any other reason. This is why sending a message should be an event handler. Event handlers let you handle specific interactions:\n\n\n```javascript\nfunctionChatRoom({roomId}){const[message,setMessage]=useState('');// ...functionhandleSendClick(){sendMessage(message);}// ...return(<><inputvalue={message}onChange={e=>setMessage(e.target.value)}/><buttononClick={handleSendClick}>Send</button></>);}\n```\n\n\nWith an event handler, you can be sure that sendMessage(message) will only run if the user presses the button.\n\n\n### Effects run whenever synchronization is needed\n\n\nRecall that you also need to keep the component connected to the chat room. Where does that code go?\n\nThe reason to run this code is not some particular interaction. It doesn\u2019t matter why or how the user navigated to the chat room screen. Now that they\u2019re looking at it and could interact with it, the component needs to stay connected to the selected chat server. Even if the chat room component was the initial screen of your app, and the user has not performed any interactions at all, you would still need to connect. This is why it\u2019s an Effect:\n\n\n```javascript\nfunctionChatRoom({roomId}){// ...useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};},[roomId]);// ...}\n```\n\n\nWith this code, you can be sure that there is always an active connection to the currently selected chat server, regardless of the specific interactions performed by the user. Whether the user has only opened your app, selected a different room, or navigated to another screen and back, your Effect ensures that the component will remain synchronized with the currently selected room, and will re-connect whenever it\u2019s necessary.\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection,sendMessage}from'./chat.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId}){const[message,setMessage]=useState('');useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[roomId]);functionhandleSendClick(){sendMessage(message);}return(<><h1>Welcome to the{roomId}room!</h1><inputvalue={message}onChange={e=>setMessage(e.target.value)}/><buttononClick={handleSendClick}>Send</button></>);}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');const[show,setShow]=useState(false);return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><buttononClick={()=>setShow(!show)}>{show?'Close chat':'Open chat'}</button>{show&&<hr/>}{show&&<ChatRoomroomId={roomId}/>}</>);}\n```\n", "source": "https://react.dev/learn/separating-events-from-effects", "category": "Separating Events from Effects"}
{"instruction": "Show me a code example of Choosing between event handlers and Effects in React.", "input": "", "output": "First, let\u2019s recap the difference between event handlers and Effects.\n\nImagine you\u2019re implementing a chat room component. Your requirements look like this:\n\n1. Your component should automatically connect to the selected chat room.\n2. When you click the \u201cSend\u201d button, it should send a message to the chat.\n\nLet\u2019s say you\u2019ve already implemented the code for them, but you\u2019re not sure where to put it. Should you use event handlers or Effects? Every time you need to answer this question, consider why the code needs to run.\n\n\n### Event handlers run in response to specific interactions\n\n\nFrom the user\u2019s perspective, sending a message should happen because the particular \u201cSend\u201d button was clicked. The user will get rather upset if you send their message at any other time or for any other reason. This is why sending a message should be an event handler. Event handlers let you handle specific interactions:\n\n\n```javascript\nfunctionChatRoom({roomId}){const[message,setMessage]=useState('');// ...functionhandleSendClick(){sendMessage(message);}// ...return(<><inputvalue={message}onChange={e=>setMessage(e.target.value)}/><buttononClick={handleSendClick}>Send</button></>);}\n```\n\n\nWith an event handler, you can be sure that sendMessage(message) will only run if the user presses the button.\n\n\n### Effects run whenever synchronization is needed\n\n\nRecall that you also need to keep the component connected to the chat room. Where does that code go?\n\nThe reason to run this code is not some particular interaction. It doesn\u2019t matter why or how the user navigated to the chat room screen. Now that they\u2019re looking at it and could interact with it, the component needs to stay connected to the selected chat server. Even if the chat room component was the initial screen of your app, and the user has not performed any interactions at all, you would still need to connect. This is why it\u2019s an Effect:\n\n\n```javascript\nfunctionChatRoom({roomId}){// ...useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};},[roomId]);// ...}\n```\n\n\nWith this code, you can be sure that there is always an active connection to the currently selected chat server, regardless of the specific interactions performed by the user. Whether the user has only opened your app, selected a different room, or navigated to another screen and back, your Effect ensures that the component will remain synchronized with the currently selected room, and will re-connect whenever it\u2019s necessary.\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection,sendMessage}from'./chat.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId}){const[message,setMessage]=useState('');useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[roomId]);functionhandleSendClick(){sendMessage(message);}return(<><h1>Welcome to the{roomId}room!</h1><inputvalue={message}onChange={e=>setMessage(e.target.value)}/><buttononClick={handleSendClick}>Send</button></>);}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');const[show,setShow]=useState(false);return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><buttononClick={()=>setShow(!show)}>{show?'Close chat':'Open chat'}</button>{show&&<hr/>}{show&&<ChatRoomroomId={roomId}/>}</>);}\n```\n", "source": "https://react.dev/learn/separating-events-from-effects", "category": "Separating Events from Effects"}
{"instruction": "Explain the concept of Reactive values and reactive logic in React.", "input": "", "output": "Intuitively, you could say that event handlers are always triggered \u201cmanually\u201d, for example by clicking a button. Effects, on the other hand, are \u201cautomatic\u201d: they run and re-run as often as it\u2019s needed to stay synchronized.\n\nThere is a more precise way to think about this.\n\nProps, state, and variables declared inside your component\u2019s body are called reactive values . In this example, serverUrl is not a reactive value, but roomId and message are. They participate in the rendering data flow:\n\n\n```javascript\nconstserverUrl='https://localhost:1234';functionChatRoom({roomId}){const[message,setMessage]=useState('');// ...}\n```\n\n\nReactive values like these can change due to a re-render. For example, the user may edit the message or choose a different roomId in a dropdown. Event handlers and Effects respond to changes differently:\n\n* Logic inside event handlers is not reactive. It will not run again unless the user performs the same interaction (e.g. a click) again. Event handlers can read reactive values without \u201creacting\u201d to their changes.\n* Logic inside Effects is reactive. If your Effect reads a reactive value, you have to specify it as a dependency. Then, if a re-render causes that value to change, React will re-run your Effect\u2019s logic with the new value.\n\nLet\u2019s revisit the previous example to illustrate this difference.\n\n\n### Logic inside event handlers is not reactive\n\n\nTake a look at this line of code. Should this logic be reactive or not?\n\n\n```javascript\n// ...sendMessage(message);// ...\n```\n\n\nFrom the user\u2019s perspective, a change to the message does not mean that they want to send a message. It only means that the user is typing. In other words, the logic that sends a message should not be reactive. It should not run again only because the reactive value has changed. That\u2019s why it belongs in the event handler:\n\n\n```javascript\nfunctionhandleSendClick(){sendMessage(message);}\n```\n\n\nEvent handlers aren\u2019t reactive, so sendMessage(message) will only run when the user clicks the Send button.\n\n\n### Logic inside Effects is reactive\n\n\nNow let\u2019s return to these lines:\n\n\n```javascript\n// ...constconnection=createConnection(serverUrl,roomId);connection.connect();// ...\n```\n\n\nFrom the user\u2019s perspective, a change to the roomId does mean that they want to connect to a different room. In other words, the logic for connecting to the room should be reactive. You want these lines of code to \u201ckeep up\u201d with the reactive value , and to run again if that value is different. That\u2019s why it belongs in an Effect:\n\n\n```javascript\nuseEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect()};},[roomId]);\n```\n\n\nEffects are reactive, so createConnection(serverUrl, roomId) and connection.connect() will run for every distinct value of roomId . Your Effect keeps the chat connection synchronized to the currently selected room.", "source": "https://react.dev/learn/separating-events-from-effects", "category": "Separating Events from Effects"}
{"instruction": "Show me a code example of Reactive values and reactive logic in React.", "input": "", "output": "Intuitively, you could say that event handlers are always triggered \u201cmanually\u201d, for example by clicking a button. Effects, on the other hand, are \u201cautomatic\u201d: they run and re-run as often as it\u2019s needed to stay synchronized.\n\nThere is a more precise way to think about this.\n\nProps, state, and variables declared inside your component\u2019s body are called reactive values . In this example, serverUrl is not a reactive value, but roomId and message are. They participate in the rendering data flow:\n\n\n```javascript\nconstserverUrl='https://localhost:1234';functionChatRoom({roomId}){const[message,setMessage]=useState('');// ...}\n```\n\n\nReactive values like these can change due to a re-render. For example, the user may edit the message or choose a different roomId in a dropdown. Event handlers and Effects respond to changes differently:\n\n* Logic inside event handlers is not reactive. It will not run again unless the user performs the same interaction (e.g. a click) again. Event handlers can read reactive values without \u201creacting\u201d to their changes.\n* Logic inside Effects is reactive. If your Effect reads a reactive value, you have to specify it as a dependency. Then, if a re-render causes that value to change, React will re-run your Effect\u2019s logic with the new value.\n\nLet\u2019s revisit the previous example to illustrate this difference.\n\n\n### Logic inside event handlers is not reactive\n\n\nTake a look at this line of code. Should this logic be reactive or not?\n\n\n```javascript\n// ...sendMessage(message);// ...\n```\n\n\nFrom the user\u2019s perspective, a change to the message does not mean that they want to send a message. It only means that the user is typing. In other words, the logic that sends a message should not be reactive. It should not run again only because the reactive value has changed. That\u2019s why it belongs in the event handler:\n\n\n```javascript\nfunctionhandleSendClick(){sendMessage(message);}\n```\n\n\nEvent handlers aren\u2019t reactive, so sendMessage(message) will only run when the user clicks the Send button.\n\n\n### Logic inside Effects is reactive\n\n\nNow let\u2019s return to these lines:\n\n\n```javascript\n// ...constconnection=createConnection(serverUrl,roomId);connection.connect();// ...\n```\n\n\nFrom the user\u2019s perspective, a change to the roomId does mean that they want to connect to a different room. In other words, the logic for connecting to the room should be reactive. You want these lines of code to \u201ckeep up\u201d with the reactive value , and to run again if that value is different. That\u2019s why it belongs in an Effect:\n\n\n```javascript\nuseEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect()};},[roomId]);\n```\n\n\nEffects are reactive, so createConnection(serverUrl, roomId) and connection.connect() will run for every distinct value of roomId . Your Effect keeps the chat connection synchronized to the currently selected room.", "source": "https://react.dev/learn/separating-events-from-effects", "category": "Separating Events from Effects"}
{"instruction": "Tell me about Extracting non-reactive logic out of Effects.", "input": "", "output": "Things get more tricky when you want to mix reactive logic with non-reactive logic.\n\nFor example, imagine that you want to show a notification when the user connects to the chat. You read the current theme (dark or light) from the props so that you can show the notification in the correct color:\n\n\n```javascript\nfunctionChatRoom({roomId,theme}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.on('connected',()=>{showNotification('Connected!',theme);});connection.connect();// ...\n```\n\n\nHowever, theme is a reactive value (it can change as a result of re-rendering), and every reactive value read by an Effect must be declared as its dependency. Now you have to specify theme as a dependency of your Effect:\n\n\n```javascript\nfunctionChatRoom({roomId,theme}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.on('connected',()=>{showNotification('Connected!',theme);});connection.connect();return()=>{connection.disconnect()};},[roomId,theme]);// \u2705 All dependencies declared// ...\n```\n\n\nPlay with this example and see if you can spot the problem with this user experience:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection,sendMessage}from'./chat.js';import{showNotification}from'./notifications.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId,theme}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.on('connected',()=>{showNotification('Connected!',theme);});connection.connect();return()=>connection.disconnect();},[roomId,theme]);return<h1>Welcome to the{roomId}room!</h1>}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');const[isDark,setIsDark]=useState(false);return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><label><inputtype=\"checkbox\"checked={isDark}onChange={e=>setIsDark(e.target.checked)}/>Use dark theme</label><hr/><ChatRoomroomId={roomId}theme={isDark?'dark':'light'}/></>);}\n```\n\n\nWhen the roomId changes, the chat re-connects as you would expect. But since theme is also a dependency, the chat also re-connects every time you switch between the dark and the light theme. That\u2019s not great!\n\nIn other words, you don\u2019t want this line to be reactive, even though it is inside an Effect (which is reactive):\n\n\n```javascript\n// ...showNotification('Connected!',theme);// ...\n```\n\n\nYou need a way to separate this non-reactive logic from the reactive Effect around it.\n\n\n### Declaring an Effect Event\n\n\n\n### Under Construction\n\n\nThis section describes an experimental API that has not yet been released in a stable version of React.\n\nUse a special Hook called useEffectEvent to extract this non-reactive logic out of your Effect:\n\n\n```javascript\nimport{useEffect,useEffectEvent}from'react';functionChatRoom({roomId,theme}){constonConnected=useEffectEvent(()=>{showNotification('Connected!',theme);});// ...\n```\n\n\nHere, onConnected is called an Effect Event. It\u2019s a part of your Effect logic, but it behaves a lot more like an event handler. The logic inside it is not reactive, and it always \u201csees\u201d the latest values of your props and state.\n\nNow you can call the onConnected Effect Event from inside your Effect:\n\n\n```javascript\nfunctionChatRoom({roomId,theme}){constonConnected=useEffectEvent(()=>{showNotification('Connected!',theme);});useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.on('connected',()=>{onConnected();});connection.connect();return()=>connection.disconnect();},[roomId]);// \u2705 All dependencies declared// ...\n```\n\n\nThis solves the problem. Note that you had to remove theme from the list of your Effect\u2019s dependencies, because it\u2019s no longer used in the Effect. You also don\u2019t need to add onConnected to it, because Effect Events are not reactive and must be omitted from dependencies.\n\nVerify that the new behavior works as you would expect:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{experimental_useEffectEventasuseEffectEvent}from'react';import{createConnection,sendMessage}from'./chat.js';import{showNotification}from'./notifications.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId,theme}){constonConnected=useEffectEvent(()=>{showNotification('Connected!',theme);});useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.on('connected',()=>{onConnected();});connection.connect();return()=>connection.disconnect();},[roomId]);return<h1>Welcome to the{roomId}room!</h1>}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');const[isDark,setIsDark]=useState(false);return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><label><inputtype=\"checkbox\"checked={isDark}onChange={e=>setIsDark(e.target.checked)}/>Use dark theme</label><hr/><ChatRoomroomId={roomId}theme={isDark?'dark':'light'}/></>);}\n```\n\n\nYou can think of Effect Events as being very similar to event handlers. The main difference is that event handlers run in response to a user interactions, whereas Effect Events are triggered by you from Effects. Effect Events let you \u201cbreak the chain\u201d between the reactivity of Effects and code that should not be reactive.\n\n\n### Reading latest props and state with Effect Events\n\n\n\n### Under Construction\n\n\nThis section describes an experimental API that has not yet been released in a stable version of React.\n\nEffect Events let you fix many patterns where you might be tempted to suppress the dependency linter.\n\nFor example, say you have an Effect to log the page visits:\n\n\n```javascript\nfunctionPage(){useEffect(()=>{logVisit();},[]);// ...}\n```\n\n\nLater, you add multiple routes to your site. Now your Page component receives a url prop with the current path. You want to pass the url as a part of your logVisit call, but the dependency linter complains:\n\n\n```javascript\nfunctionPage({url}){useEffect(()=>{logVisit(url);},[]);// \ud83d\udd34 React Hook useEffect has a missing dependency: 'url'// ...}\n```\n\n\nThink about what you want the code to do. You want to log a separate visit for different URLs since each URL represents a different page. In other words, this logVisit call should be reactive with respect to the url . This is why, in this case, it makes sense to follow the dependency linter, and add url as a dependency:\n\n\n```javascript\nfunctionPage({url}){useEffect(()=>{logVisit(url);},[url]);// \u2705 All dependencies declared// ...}\n```\n\n\nNow let\u2019s say you want to include the number of items in the shopping cart together with every page visit:\n\n\n```javascript\nfunctionPage({url}){const{items}=useContext(ShoppingCartContext);constnumberOfItems=items.length;useEffect(()=>{logVisit(url,numberOfItems);},[url]);// \ud83d\udd34 React Hook useEffect has a missing dependency: 'numberOfItems'// ...}\n```\n\n\nYou used numberOfItems inside the Effect, so the linter asks you to add it as a dependency. However, you don\u2019t want the logVisit call to be reactive with respect to numberOfItems . If the user puts something into the shopping cart, and the numberOfItems changes, this does not mean that the user visited the page again. In other words, visiting the page is, in some sense, an \u201cevent\u201d. It happens at a precise moment in time.\n\nSplit the code in two parts:\n\n\n```javascript\nfunctionPage({url}){const{items}=useContext(ShoppingCartContext);constnumberOfItems=items.length;constonVisit=useEffectEvent(visitedUrl=>{logVisit(visitedUrl,numberOfItems);});useEffect(()=>{onVisit(url);},[url]);// \u2705 All dependencies declared// ...}\n```\n\n\nHere, onVisit is an Effect Event. The code inside it isn\u2019t reactive. This is why you can use numberOfItems (or any other reactive value!) without worrying that it will cause the surrounding code to re-execute on changes.\n\nOn the other hand, the Effect itself remains reactive. Code inside the Effect uses the url prop, so the Effect will re-run after every re-render with a different url . This, in turn, will call the onVisit Effect Event.\n\nAs a result, you will call logVisit for every change to the url , and always read the latest numberOfItems . However, if numberOfItems changes on its own, this will not cause any of the code to re-run.\n\n\n### Note\n\n\nYou might be wondering if you could call onVisit() with no arguments, and read the url inside it:\n\n\n```javascript\nconstonVisit=useEffectEvent(()=>{logVisit(url,numberOfItems);});useEffect(()=>{onVisit();},[url]);\n```\n\n\nThis would work, but it\u2019s better to pass this url to the Effect Event explicitly. By passing url as an argument to your Effect Event, you are saying that visiting a page with a different url constitutes a separate \u201cevent\u201d from the user\u2019s perspective. The visitedUrl is a part of the \u201cevent\u201d that happened:\n\n\n```javascript\nconstonVisit=useEffectEvent(visitedUrl=>{logVisit(visitedUrl,numberOfItems);});useEffect(()=>{onVisit(url);},[url]);\n```\n\n\nSince your Effect Event explicitly \u201casks\u201d for the visitedUrl , now you can\u2019t accidentally remove url from the Effect\u2019s dependencies. If you remove the url dependency (causing distinct page visits to be counted as one), the linter will warn you about it. You want onVisit to be reactive with regards to the url , so instead of reading the url inside (where it wouldn\u2019t be reactive), you pass it from your Effect.\n\nThis becomes especially important if there is some asynchronous logic inside the Effect:\n\n\n```javascript\nconstonVisit=useEffectEvent(visitedUrl=>{logVisit(visitedUrl,numberOfItems);});useEffect(()=>{setTimeout(()=>{onVisit(url);},5000);// Delay logging visits},[url]);\n```\n\n\nHere, url inside onVisit corresponds to the latest url (which could have already changed), but visitedUrl corresponds to the url that originally caused this Effect (and this onVisit call) to run.\n\nIn the existing codebases, you may sometimes see the lint rule suppressed like this:\n\n\n```javascript\nfunctionPage({url}){const{items}=useContext(ShoppingCartContext);constnumberOfItems=items.length;useEffect(()=>{logVisit(url,numberOfItems);// \ud83d\udd34 Avoid suppressing the linter like this:// eslint-disable-next-line react-hooks/exhaustive-deps},[url]);// ...}\n```\n\n\nAfter useEffectEvent becomes a stable part of React, we recommend never suppressing the linter .\n\nThe first downside of suppressing the rule is that React will no longer warn you when your Effect needs to \u201creact\u201d to a new reactive dependency you\u2019ve introduced to your code. In the earlier example, you added url to the dependencies because React reminded you to do it. You will no longer get such reminders for any future edits to that Effect if you disable the linter. This leads to bugs.\n\nHere is an example of a confusing bug caused by suppressing the linter. In this example, the handleMove function is supposed to read the current canMove state variable value in order to decide whether the dot should follow the cursor. However, canMove is always true inside handleMove .\n\nCan you see why?\n\n\n```javascript\nimport{useState,useEffect}from'react';exportdefaultfunctionApp(){const[position,setPosition]=useState({x:0,y:0});const[canMove,setCanMove]=useState(true);functionhandleMove(e){if(canMove){setPosition({x:e.clientX,y:e.clientY});}}useEffect(()=>{window.addEventListener('pointermove',handleMove);return()=>window.removeEventListener('pointermove',handleMove);// eslint-disable-next-line react-hooks/exhaustive-deps},[]);return(<><label><inputtype=\"checkbox\"checked={canMove}onChange={e=>setCanMove(e.target.checked)}/>The dot is allowed to move</label><hr/><divstyle={{position:'absolute',backgroundColor:'pink',borderRadius:'50%',opacity:0.6,transform:`translate(${position.x}px,${position.y}px)`,pointerEvents:'none',left:-20,top:-20,width:40,height:40,}}/></>);}\n```\n\n\nThe problem with this code is in suppressing the dependency linter. If you remove the suppression, you\u2019ll see that this Effect should depend on the handleMove function. This makes sense: handleMove is declared inside the component body, which makes it a reactive value. Every reactive value must be specified as a dependency, or it can potentially get stale over time!\n\nThe author of the original code has \u201clied\u201d to React by saying that the Effect does not depend ( [] ) on any reactive values. This is why React did not re-synchronize the Effect after canMove has changed (and handleMove with it). Because React did not re-synchronize the Effect, the handleMove attached as a listener is the handleMove function created during the initial render. During the initial render, canMove was true , which is why handleMove from the initial render will forever see that value.\n\nIf you never suppress the linter, you will never see problems with stale values.\n\nWith useEffectEvent , there is no need to \u201clie\u201d to the linter, and the code works as you would expect:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{experimental_useEffectEventasuseEffectEvent}from'react';exportdefaultfunctionApp(){const[position,setPosition]=useState({x:0,y:0});const[canMove,setCanMove]=useState(true);constonMove=useEffectEvent(e=>{if(canMove){setPosition({x:e.clientX,y:e.clientY});}});useEffect(()=>{window.addEventListener('pointermove',onMove);return()=>window.removeEventListener('pointermove',onMove);},[]);return(<><label><inputtype=\"checkbox\"checked={canMove}onChange={e=>setCanMove(e.target.checked)}/>The dot is allowed to move</label><hr/><divstyle={{position:'absolute',backgroundColor:'pink',borderRadius:'50%',opacity:0.6,transform:`translate(${position.x}px,${position.y}px)`,pointerEvents:'none',left:-20,top:-20,width:40,height:40,}}/></>);}\n```\n\n\nThis doesn\u2019t mean that useEffectEvent is always the correct solution. You should only apply it to the lines of code that you don\u2019t want to be reactive. In the above sandbox, you didn\u2019t want the Effect\u2019s code to be reactive with regards to canMove . That\u2019s why it made sense to extract an Effect Event.\n\nRead Removing Effect Dependencies for other correct alternatives to suppressing the linter.\n\n\n### Limitations of Effect Events\n\n\n\n### Under Construction\n\n\nThis section describes an experimental API that has not yet been released in a stable version of React.\n\nEffect Events are very limited in how you can use them:\n\n* Only call them from inside Effects.\n* Never pass them to other components or Hooks.\n\nFor example, don\u2019t declare and pass an Effect Event like this:\n\n\n```javascript\nfunctionTimer(){const[count,setCount]=useState(0);constonTick=useEffectEvent(()=>{setCount(count+1);});useTimer(onTick,1000);// \ud83d\udd34 Avoid: Passing Effect Eventsreturn<h1>{count}</h1>}functionuseTimer(callback,delay){useEffect(()=>{constid=setInterval(()=>{callback();},delay);return()=>{clearInterval(id);};},[delay,callback]);// Need to specify \"callback\" in dependencies}\n```\n\n\nInstead, always declare Effect Events directly next to the Effects that use them:\n\n\n```javascript\nfunctionTimer(){const[count,setCount]=useState(0);useTimer(()=>{setCount(count+1);},1000);return<h1>{count}</h1>}functionuseTimer(callback,delay){constonTick=useEffectEvent(()=>{callback();});useEffect(()=>{constid=setInterval(()=>{onTick();// \u2705 Good: Only called locally inside an Effect},delay);return()=>{clearInterval(id);};},[delay]);// No need to specify \"onTick\" (an Effect Event) as a dependency}\n```\n\n\nEffect Events are non-reactive \u201cpieces\u201d of your Effect code. They should be next to the Effect using them.", "source": "https://react.dev/learn/separating-events-from-effects", "category": "Separating Events from Effects"}
{"instruction": "Show me a code example of Extracting non-reactive logic out of Effects in React.", "input": "", "output": "Things get more tricky when you want to mix reactive logic with non-reactive logic.\n\nFor example, imagine that you want to show a notification when the user connects to the chat. You read the current theme (dark or light) from the props so that you can show the notification in the correct color:\n\n\n```javascript\nfunctionChatRoom({roomId,theme}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.on('connected',()=>{showNotification('Connected!',theme);});connection.connect();// ...\n```\n\n\nHowever, theme is a reactive value (it can change as a result of re-rendering), and every reactive value read by an Effect must be declared as its dependency. Now you have to specify theme as a dependency of your Effect:\n\n\n```javascript\nfunctionChatRoom({roomId,theme}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.on('connected',()=>{showNotification('Connected!',theme);});connection.connect();return()=>{connection.disconnect()};},[roomId,theme]);// \u2705 All dependencies declared// ...\n```\n\n\nPlay with this example and see if you can spot the problem with this user experience:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection,sendMessage}from'./chat.js';import{showNotification}from'./notifications.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId,theme}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.on('connected',()=>{showNotification('Connected!',theme);});connection.connect();return()=>connection.disconnect();},[roomId,theme]);return<h1>Welcome to the{roomId}room!</h1>}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');const[isDark,setIsDark]=useState(false);return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><label><inputtype=\"checkbox\"checked={isDark}onChange={e=>setIsDark(e.target.checked)}/>Use dark theme</label><hr/><ChatRoomroomId={roomId}theme={isDark?'dark':'light'}/></>);}\n```\n\n\nWhen the roomId changes, the chat re-connects as you would expect. But since theme is also a dependency, the chat also re-connects every time you switch between the dark and the light theme. That\u2019s not great!\n\nIn other words, you don\u2019t want this line to be reactive, even though it is inside an Effect (which is reactive):\n\n\n```javascript\n// ...showNotification('Connected!',theme);// ...\n```\n\n\nYou need a way to separate this non-reactive logic from the reactive Effect around it.\n\n\n### Declaring an Effect Event\n\n\n\n### Under Construction\n\n\nThis section describes an experimental API that has not yet been released in a stable version of React.\n\nUse a special Hook called useEffectEvent to extract this non-reactive logic out of your Effect:\n\n\n```javascript\nimport{useEffect,useEffectEvent}from'react';functionChatRoom({roomId,theme}){constonConnected=useEffectEvent(()=>{showNotification('Connected!',theme);});// ...\n```\n\n\nHere, onConnected is called an Effect Event. It\u2019s a part of your Effect logic, but it behaves a lot more like an event handler. The logic inside it is not reactive, and it always \u201csees\u201d the latest values of your props and state.\n\nNow you can call the onConnected Effect Event from inside your Effect:\n\n\n```javascript\nfunctionChatRoom({roomId,theme}){constonConnected=useEffectEvent(()=>{showNotification('Connected!',theme);});useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.on('connected',()=>{onConnected();});connection.connect();return()=>connection.disconnect();},[roomId]);// \u2705 All dependencies declared// ...\n```\n\n\nThis solves the problem. Note that you had to remove theme from the list of your Effect\u2019s dependencies, because it\u2019s no longer used in the Effect. You also don\u2019t need to add onConnected to it, because Effect Events are not reactive and must be omitted from dependencies.\n\nVerify that the new behavior works as you would expect:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{experimental_useEffectEventasuseEffectEvent}from'react';import{createConnection,sendMessage}from'./chat.js';import{showNotification}from'./notifications.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId,theme}){constonConnected=useEffectEvent(()=>{showNotification('Connected!',theme);});useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.on('connected',()=>{onConnected();});connection.connect();return()=>connection.disconnect();},[roomId]);return<h1>Welcome to the{roomId}room!</h1>}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');const[isDark,setIsDark]=useState(false);return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><label><inputtype=\"checkbox\"checked={isDark}onChange={e=>setIsDark(e.target.checked)}/>Use dark theme</label><hr/><ChatRoomroomId={roomId}theme={isDark?'dark':'light'}/></>);}\n```\n\n\nYou can think of Effect Events as being very similar to event handlers. The main difference is that event handlers run in response to a user interactions, whereas Effect Events are triggered by you from Effects. Effect Events let you \u201cbreak the chain\u201d between the reactivity of Effects and code that should not be reactive.\n\n\n### Reading latest props and state with Effect Events\n\n\n\n### Under Construction\n\n\nThis section describes an experimental API that has not yet been released in a stable version of React.\n\nEffect Events let you fix many patterns where you might be tempted to suppress the dependency linter.\n\nFor example, say you have an Effect to log the page visits:\n\n\n```javascript\nfunctionPage(){useEffect(()=>{logVisit();},[]);// ...}\n```\n\n\nLater, you add multiple routes to your site. Now your Page component receives a url prop with the current path. You want to pass the url as a part of your logVisit call, but the dependency linter complains:\n\n\n```javascript\nfunctionPage({url}){useEffect(()=>{logVisit(url);},[]);// \ud83d\udd34 React Hook useEffect has a missing dependency: 'url'// ...}\n```\n\n\nThink about what you want the code to do. You want to log a separate visit for different URLs since each URL represents a different page. In other words, this logVisit call should be reactive with respect to the url . This is why, in this case, it makes sense to follow the dependency linter, and add url as a dependency:\n\n\n```javascript\nfunctionPage({url}){useEffect(()=>{logVisit(url);},[url]);// \u2705 All dependencies declared// ...}\n```\n\n\nNow let\u2019s say you want to include the number of items in the shopping cart together with every page visit:\n\n\n```javascript\nfunctionPage({url}){const{items}=useContext(ShoppingCartContext);constnumberOfItems=items.length;useEffect(()=>{logVisit(url,numberOfItems);},[url]);// \ud83d\udd34 React Hook useEffect has a missing dependency: 'numberOfItems'// ...}\n```\n\n\nYou used numberOfItems inside the Effect, so the linter asks you to add it as a dependency. However, you don\u2019t want the logVisit call to be reactive with respect to numberOfItems . If the user puts something into the shopping cart, and the numberOfItems changes, this does not mean that the user visited the page again. In other words, visiting the page is, in some sense, an \u201cevent\u201d. It happens at a precise moment in time.\n\nSplit the code in two parts:\n\n\n```javascript\nfunctionPage({url}){const{items}=useContext(ShoppingCartContext);constnumberOfItems=items.length;constonVisit=useEffectEvent(visitedUrl=>{logVisit(visitedUrl,numberOfItems);});useEffect(()=>{onVisit(url);},[url]);// \u2705 All dependencies declared// ...}\n```\n\n\nHere, onVisit is an Effect Event. The code inside it isn\u2019t reactive. This is why you can use numberOfItems (or any other reactive value!) without worrying that it will cause the surrounding code to re-execute on changes.\n\nOn the other hand, the Effect itself remains reactive. Code inside the Effect uses the url prop, so the Effect will re-run after every re-render with a different url . This, in turn, will call the onVisit Effect Event.\n\nAs a result, you will call logVisit for every change to the url , and always read the latest numberOfItems . However, if numberOfItems changes on its own, this will not cause any of the code to re-run.\n\n\n### Note\n\n\nYou might be wondering if you could call onVisit() with no arguments, and read the url inside it:\n\n\n```javascript\nconstonVisit=useEffectEvent(()=>{logVisit(url,numberOfItems);});useEffect(()=>{onVisit();},[url]);\n```\n\n\nThis would work, but it\u2019s better to pass this url to the Effect Event explicitly. By passing url as an argument to your Effect Event, you are saying that visiting a page with a different url constitutes a separate \u201cevent\u201d from the user\u2019s perspective. The visitedUrl is a part of the \u201cevent\u201d that happened:\n\n\n```javascript\nconstonVisit=useEffectEvent(visitedUrl=>{logVisit(visitedUrl,numberOfItems);});useEffect(()=>{onVisit(url);},[url]);\n```\n\n\nSince your Effect Event explicitly \u201casks\u201d for the visitedUrl , now you can\u2019t accidentally remove url from the Effect\u2019s dependencies. If you remove the url dependency (causing distinct page visits to be counted as one), the linter will warn you about it. You want onVisit to be reactive with regards to the url , so instead of reading the url inside (where it wouldn\u2019t be reactive), you pass it from your Effect.\n\nThis becomes especially important if there is some asynchronous logic inside the Effect:\n\n\n```javascript\nconstonVisit=useEffectEvent(visitedUrl=>{logVisit(visitedUrl,numberOfItems);});useEffect(()=>{setTimeout(()=>{onVisit(url);},5000);// Delay logging visits},[url]);\n```\n\n\nHere, url inside onVisit corresponds to the latest url (which could have already changed), but visitedUrl corresponds to the url that originally caused this Effect (and this onVisit call) to run.\n\nIn the existing codebases, you may sometimes see the lint rule suppressed like this:\n\n\n```javascript\nfunctionPage({url}){const{items}=useContext(ShoppingCartContext);constnumberOfItems=items.length;useEffect(()=>{logVisit(url,numberOfItems);// \ud83d\udd34 Avoid suppressing the linter like this:// eslint-disable-next-line react-hooks/exhaustive-deps},[url]);// ...}\n```\n\n\nAfter useEffectEvent becomes a stable part of React, we recommend never suppressing the linter .\n\nThe first downside of suppressing the rule is that React will no longer warn you when your Effect needs to \u201creact\u201d to a new reactive dependency you\u2019ve introduced to your code. In the earlier example, you added url to the dependencies because React reminded you to do it. You will no longer get such reminders for any future edits to that Effect if you disable the linter. This leads to bugs.\n\nHere is an example of a confusing bug caused by suppressing the linter. In this example, the handleMove function is supposed to read the current canMove state variable value in order to decide whether the dot should follow the cursor. However, canMove is always true inside handleMove .\n\nCan you see why?\n\n\n```javascript\nimport{useState,useEffect}from'react';exportdefaultfunctionApp(){const[position,setPosition]=useState({x:0,y:0});const[canMove,setCanMove]=useState(true);functionhandleMove(e){if(canMove){setPosition({x:e.clientX,y:e.clientY});}}useEffect(()=>{window.addEventListener('pointermove',handleMove);return()=>window.removeEventListener('pointermove',handleMove);// eslint-disable-next-line react-hooks/exhaustive-deps},[]);return(<><label><inputtype=\"checkbox\"checked={canMove}onChange={e=>setCanMove(e.target.checked)}/>The dot is allowed to move</label><hr/><divstyle={{position:'absolute',backgroundColor:'pink',borderRadius:'50%',opacity:0.6,transform:`translate(${position.x}px,${position.y}px)`,pointerEvents:'none',left:-20,top:-20,width:40,height:40,}}/></>);}\n```\n\n\nThe problem with this code is in suppressing the dependency linter. If you remove the suppression, you\u2019ll see that this Effect should depend on the handleMove function. This makes sense: handleMove is declared inside the component body, which makes it a reactive value. Every reactive value must be specified as a dependency, or it can potentially get stale over time!\n\nThe author of the original code has \u201clied\u201d to React by saying that the Effect does not depend ( [] ) on any reactive values. This is why React did not re-synchronize the Effect after canMove has changed (and handleMove with it). Because React did not re-synchronize the Effect, the handleMove attached as a listener is the handleMove function created during the initial render. During the initial render, canMove was true , which is why handleMove from the initial render will forever see that value.\n\nIf you never suppress the linter, you will never see problems with stale values.\n\nWith useEffectEvent , there is no need to \u201clie\u201d to the linter, and the code works as you would expect:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{experimental_useEffectEventasuseEffectEvent}from'react';exportdefaultfunctionApp(){const[position,setPosition]=useState({x:0,y:0});const[canMove,setCanMove]=useState(true);constonMove=useEffectEvent(e=>{if(canMove){setPosition({x:e.clientX,y:e.clientY});}});useEffect(()=>{window.addEventListener('pointermove',onMove);return()=>window.removeEventListener('pointermove',onMove);},[]);return(<><label><inputtype=\"checkbox\"checked={canMove}onChange={e=>setCanMove(e.target.checked)}/>The dot is allowed to move</label><hr/><divstyle={{position:'absolute',backgroundColor:'pink',borderRadius:'50%',opacity:0.6,transform:`translate(${position.x}px,${position.y}px)`,pointerEvents:'none',left:-20,top:-20,width:40,height:40,}}/></>);}\n```\n\n\nThis doesn\u2019t mean that useEffectEvent is always the correct solution. You should only apply it to the lines of code that you don\u2019t want to be reactive. In the above sandbox, you didn\u2019t want the Effect\u2019s code to be reactive with regards to canMove . That\u2019s why it made sense to extract an Effect Event.\n\nRead Removing Effect Dependencies for other correct alternatives to suppressing the linter.\n\n\n### Limitations of Effect Events\n\n\n\n### Under Construction\n\n\nThis section describes an experimental API that has not yet been released in a stable version of React.\n\nEffect Events are very limited in how you can use them:\n\n* Only call them from inside Effects.\n* Never pass them to other components or Hooks.\n\nFor example, don\u2019t declare and pass an Effect Event like this:\n\n\n```javascript\nfunctionTimer(){const[count,setCount]=useState(0);constonTick=useEffectEvent(()=>{setCount(count+1);});useTimer(onTick,1000);// \ud83d\udd34 Avoid: Passing Effect Eventsreturn<h1>{count}</h1>}functionuseTimer(callback,delay){useEffect(()=>{constid=setInterval(()=>{callback();},delay);return()=>{clearInterval(id);};},[delay,callback]);// Need to specify \"callback\" in dependencies}\n```\n\n\nInstead, always declare Effect Events directly next to the Effects that use them:\n\n\n```javascript\nfunctionTimer(){const[count,setCount]=useState(0);useTimer(()=>{setCount(count+1);},1000);return<h1>{count}</h1>}functionuseTimer(callback,delay){constonTick=useEffectEvent(()=>{callback();});useEffect(()=>{constid=setInterval(()=>{onTick();// \u2705 Good: Only called locally inside an Effect},delay);return()=>{clearInterval(id);};},[delay]);// No need to specify \"onTick\" (an Effect Event) as a dependency}\n```\n\n\nEffect Events are non-reactive \u201cpieces\u201d of your Effect code. They should be next to the Effect using them.", "source": "https://react.dev/learn/separating-events-from-effects", "category": "Separating Events from Effects"}
{"instruction": "Can you describe Editor Setup in the context of React?", "input": "", "output": "See our recommended editors and learn how to set them up to work with React.", "source": "https://react.dev/learn/setup", "category": "Setup"}
{"instruction": "Tell me about Using TypeScript.", "input": "", "output": "TypeScript is a popular way to add type definitions to JavaScript codebases. Learn how to integrate TypeScript into your React projects .", "source": "https://react.dev/learn/setup", "category": "Setup"}
{"instruction": "Tell me about React Developer Tools.", "input": "", "output": "React Developer Tools is a browser extension that can inspect React components, edit props and state, and identify performance problems. Learn how to install it here .", "source": "https://react.dev/learn/setup", "category": "Setup"}
{"instruction": "Tell me about React Compiler.", "input": "", "output": "React Compiler is a tool that automatically optimizes your React app. Learn more .", "source": "https://react.dev/learn/setup", "category": "Setup"}
{"instruction": "How do I handle Lifting state up by example in React?", "input": "", "output": "In this example, a parent Accordion component renders two separate Panel s:\n\n* Accordion Panel Panel\n\n* Panel\n* Panel\n\nEach Panel component has a boolean isActive state that determines whether its content is visible.\n\nPress the Show button for both panels:\n\n\n```javascript\nimport{useState}from'react';functionPanel({title,children}){const[isActive,setIsActive]=useState(false);return(<sectionclassName=\"panel\"><h3>{title}</h3>{isActive?(<p>{children}</p>):(<buttononClick={()=>setIsActive(true)}>Show</button>)}</section>);}exportdefaultfunctionAccordion(){return(<><h2>Almaty, Kazakhstan</h2><Paneltitle=\"About\">With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.</Panel><Paneltitle=\"Etymology\">The name comes from<spanlang=\"kk-KZ\">\u0430\u043b\u043c\u0430</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild<ilang=\"la\">Malus sieversii</i>is considered a likely candidate for the ancestor of the modern domestic apple.</Panel></>);}\n```\n\n\nNotice how pressing one panel\u2019s button does not affect the other panel\u2014they are independent.\n\nInitially, each Panel \u2019s isActive state is false , so they both appear collapsed\n\nClicking either Panel \u2019s button will only update that Panel \u2019s isActive state alone\n\nBut now let\u2019s say you want to change it so that only one panel is expanded at any given time. With that design, expanding the second panel should collapse the first one. How would you do that?\n\nTo coordinate these two panels, you need to \u201clift their state up\u201d to a parent component in three steps:\n\n1. Remove state from the child components.\n2. Pass hardcoded data from the common parent.\n3. Add state to the common parent and pass it down together with the event handlers.\n\nThis will allow the Accordion component to coordinate both Panel s and only expand one at a time.\n\n\n### Step 1: Remove state from the child components\n\n\nYou will give control of the Panel \u2019s isActive to its parent component. This means that the parent component will pass isActive to Panel as a prop instead. Start by removing this line from the Panel component:\n\n\n```javascript\nconst[isActive,setIsActive]=useState(false);\n```\n\n\nAnd instead, add isActive to the Panel \u2019s list of props:\n\n\n```javascript\nfunctionPanel({title,children,isActive}){\n```\n\n\nNow the Panel \u2019s parent component can control isActive by passing it down as a prop. Conversely, the Panel component now has no control over the value of isActive \u2014it\u2019s now up to the parent component!\n\n\n### Step 2: Pass hardcoded data from the common parent\n\n\nTo lift state up, you must locate the closest common parent component of both of the child components that you want to coordinate:\n\n* Accordion (closest common parent) Panel Panel\n\n* Panel\n* Panel\n\nIn this example, it\u2019s the Accordion component. Since it\u2019s above both panels and can control their props, it will become the \u201csource of truth\u201d for which panel is currently active. Make the Accordion component pass a hardcoded value of isActive (for example, true ) to both panels:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionAccordion(){return(<><h2>Almaty, Kazakhstan</h2><Paneltitle=\"About\"isActive={true}>With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.</Panel><Paneltitle=\"Etymology\"isActive={true}>The name comes from<spanlang=\"kk-KZ\">\u0430\u043b\u043c\u0430</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild<ilang=\"la\">Malus sieversii</i>is considered a likely candidate for the ancestor of the modern domestic apple.</Panel></>);}functionPanel({title,children,isActive}){return(<sectionclassName=\"panel\"><h3>{title}</h3>{isActive?(<p>{children}</p>):(<buttononClick={()=>setIsActive(true)}>Show</button>)}</section>);}\n```\n\n\nTry editing the hardcoded isActive values in the Accordion component and see the result on the screen.\n\n\n### Step 3: Add state to the common parent\n\n\nLifting state up often changes the nature of what you\u2019re storing as state.\n\nIn this case, only one panel should be active at a time. This means that the Accordion common parent component needs to keep track of which panel is the active one. Instead of a boolean value, it could use a number as the index of the active Panel for the state variable:\n\n\n```javascript\nconst[activeIndex,setActiveIndex]=useState(0);\n```\n\n\nWhen the activeIndex is 0 , the first panel is active, and when it\u2019s 1 , it\u2019s the second one.\n\nClicking the \u201cShow\u201d button in either Panel needs to change the active index in Accordion . A Panel can\u2019t set the activeIndex state directly because it\u2019s defined inside the Accordion . The Accordion component needs to explicitly allow the Panel component to change its state by passing an event handler down as a prop :\n\n\n```javascript\n<><PanelisActive={activeIndex===0}onShow={()=>setActiveIndex(0)}>...</Panel><PanelisActive={activeIndex===1}onShow={()=>setActiveIndex(1)}>...</Panel></>\n```\n\n\nThe <button> inside the Panel will now use the onShow prop as its click event handler:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionAccordion(){const[activeIndex,setActiveIndex]=useState(0);return(<><h2>Almaty, Kazakhstan</h2><Paneltitle=\"About\"isActive={activeIndex===0}onShow={()=>setActiveIndex(0)}>With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.</Panel><Paneltitle=\"Etymology\"isActive={activeIndex===1}onShow={()=>setActiveIndex(1)}>The name comes from<spanlang=\"kk-KZ\">\u0430\u043b\u043c\u0430</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild<ilang=\"la\">Malus sieversii</i>is considered a likely candidate for the ancestor of the modern domestic apple.</Panel></>);}functionPanel({title,children,isActive,onShow}){return(<sectionclassName=\"panel\"><h3>{title}</h3>{isActive?(<p>{children}</p>):(<buttononClick={onShow}>Show</button>)}</section>);}\n```\n\n\nThis completes lifting state up! Moving state into the common parent component allowed you to coordinate the two panels. Using the active index instead of two \u201cis shown\u201d flags ensured that only one panel is active at a given time. And passing down the event handler to the child allowed the child to change the parent\u2019s state.\n\nInitially, Accordion \u2019s activeIndex is 0 , so the first Panel receives isActive = true\n\nWhen Accordion \u2019s activeIndex state changes to 1 , the second Panel receives isActive = true instead\n\nIt is common to call a component with some local state \u201cuncontrolled\u201d. For example, the original Panel component with an isActive state variable is uncontrolled because its parent cannot influence whether the panel is active or not.\n\nIn contrast, you might say a component is \u201ccontrolled\u201d when the important information in it is driven by props rather than its own local state. This lets the parent component fully specify its behavior. The final Panel component with the isActive prop is controlled by the Accordion component.\n\nUncontrolled components are easier to use within their parents because they require less configuration. But they\u2019re less flexible when you want to coordinate them together. Controlled components are maximally flexible, but they require the parent components to fully configure them with props.\n\nIn practice, \u201ccontrolled\u201d and \u201cuncontrolled\u201d aren\u2019t strict technical terms\u2014each component usually has some mix of both local state and props. However, this is a useful way to talk about how components are designed and what capabilities they offer.\n\nWhen writing a component, consider which information in it should be controlled (via props), and which information should be uncontrolled (via state). But you can always change your mind and refactor later.", "source": "https://react.dev/learn/sharing-state-between-components", "category": "Sharing State Between Components"}
{"instruction": "Show me a code example of Lifting state up by example in React.", "input": "", "output": "In this example, a parent Accordion component renders two separate Panel s:\n\n* Accordion Panel Panel\n\n* Panel\n* Panel\n\nEach Panel component has a boolean isActive state that determines whether its content is visible.\n\nPress the Show button for both panels:\n\n\n```javascript\nimport{useState}from'react';functionPanel({title,children}){const[isActive,setIsActive]=useState(false);return(<sectionclassName=\"panel\"><h3>{title}</h3>{isActive?(<p>{children}</p>):(<buttononClick={()=>setIsActive(true)}>Show</button>)}</section>);}exportdefaultfunctionAccordion(){return(<><h2>Almaty, Kazakhstan</h2><Paneltitle=\"About\">With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.</Panel><Paneltitle=\"Etymology\">The name comes from<spanlang=\"kk-KZ\">\u0430\u043b\u043c\u0430</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild<ilang=\"la\">Malus sieversii</i>is considered a likely candidate for the ancestor of the modern domestic apple.</Panel></>);}\n```\n\n\nNotice how pressing one panel\u2019s button does not affect the other panel\u2014they are independent.\n\nInitially, each Panel \u2019s isActive state is false , so they both appear collapsed\n\nClicking either Panel \u2019s button will only update that Panel \u2019s isActive state alone\n\nBut now let\u2019s say you want to change it so that only one panel is expanded at any given time. With that design, expanding the second panel should collapse the first one. How would you do that?\n\nTo coordinate these two panels, you need to \u201clift their state up\u201d to a parent component in three steps:\n\n1. Remove state from the child components.\n2. Pass hardcoded data from the common parent.\n3. Add state to the common parent and pass it down together with the event handlers.\n\nThis will allow the Accordion component to coordinate both Panel s and only expand one at a time.\n\n\n### Step 1: Remove state from the child components\n\n\nYou will give control of the Panel \u2019s isActive to its parent component. This means that the parent component will pass isActive to Panel as a prop instead. Start by removing this line from the Panel component:\n\n\n```javascript\nconst[isActive,setIsActive]=useState(false);\n```\n\n\nAnd instead, add isActive to the Panel \u2019s list of props:\n\n\n```javascript\nfunctionPanel({title,children,isActive}){\n```\n\n\nNow the Panel \u2019s parent component can control isActive by passing it down as a prop. Conversely, the Panel component now has no control over the value of isActive \u2014it\u2019s now up to the parent component!\n\n\n### Step 2: Pass hardcoded data from the common parent\n\n\nTo lift state up, you must locate the closest common parent component of both of the child components that you want to coordinate:\n\n* Accordion (closest common parent) Panel Panel\n\n* Panel\n* Panel\n\nIn this example, it\u2019s the Accordion component. Since it\u2019s above both panels and can control their props, it will become the \u201csource of truth\u201d for which panel is currently active. Make the Accordion component pass a hardcoded value of isActive (for example, true ) to both panels:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionAccordion(){return(<><h2>Almaty, Kazakhstan</h2><Paneltitle=\"About\"isActive={true}>With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.</Panel><Paneltitle=\"Etymology\"isActive={true}>The name comes from<spanlang=\"kk-KZ\">\u0430\u043b\u043c\u0430</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild<ilang=\"la\">Malus sieversii</i>is considered a likely candidate for the ancestor of the modern domestic apple.</Panel></>);}functionPanel({title,children,isActive}){return(<sectionclassName=\"panel\"><h3>{title}</h3>{isActive?(<p>{children}</p>):(<buttononClick={()=>setIsActive(true)}>Show</button>)}</section>);}\n```\n\n\nTry editing the hardcoded isActive values in the Accordion component and see the result on the screen.\n\n\n### Step 3: Add state to the common parent\n\n\nLifting state up often changes the nature of what you\u2019re storing as state.\n\nIn this case, only one panel should be active at a time. This means that the Accordion common parent component needs to keep track of which panel is the active one. Instead of a boolean value, it could use a number as the index of the active Panel for the state variable:\n\n\n```javascript\nconst[activeIndex,setActiveIndex]=useState(0);\n```\n\n\nWhen the activeIndex is 0 , the first panel is active, and when it\u2019s 1 , it\u2019s the second one.\n\nClicking the \u201cShow\u201d button in either Panel needs to change the active index in Accordion . A Panel can\u2019t set the activeIndex state directly because it\u2019s defined inside the Accordion . The Accordion component needs to explicitly allow the Panel component to change its state by passing an event handler down as a prop :\n\n\n```javascript\n<><PanelisActive={activeIndex===0}onShow={()=>setActiveIndex(0)}>...</Panel><PanelisActive={activeIndex===1}onShow={()=>setActiveIndex(1)}>...</Panel></>\n```\n\n\nThe <button> inside the Panel will now use the onShow prop as its click event handler:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionAccordion(){const[activeIndex,setActiveIndex]=useState(0);return(<><h2>Almaty, Kazakhstan</h2><Paneltitle=\"About\"isActive={activeIndex===0}onShow={()=>setActiveIndex(0)}>With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.</Panel><Paneltitle=\"Etymology\"isActive={activeIndex===1}onShow={()=>setActiveIndex(1)}>The name comes from<spanlang=\"kk-KZ\">\u0430\u043b\u043c\u0430</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild<ilang=\"la\">Malus sieversii</i>is considered a likely candidate for the ancestor of the modern domestic apple.</Panel></>);}functionPanel({title,children,isActive,onShow}){return(<sectionclassName=\"panel\"><h3>{title}</h3>{isActive?(<p>{children}</p>):(<buttononClick={onShow}>Show</button>)}</section>);}\n```\n\n\nThis completes lifting state up! Moving state into the common parent component allowed you to coordinate the two panels. Using the active index instead of two \u201cis shown\u201d flags ensured that only one panel is active at a given time. And passing down the event handler to the child allowed the child to change the parent\u2019s state.\n\nInitially, Accordion \u2019s activeIndex is 0 , so the first Panel receives isActive = true\n\nWhen Accordion \u2019s activeIndex state changes to 1 , the second Panel receives isActive = true instead\n\nIt is common to call a component with some local state \u201cuncontrolled\u201d. For example, the original Panel component with an isActive state variable is uncontrolled because its parent cannot influence whether the panel is active or not.\n\nIn contrast, you might say a component is \u201ccontrolled\u201d when the important information in it is driven by props rather than its own local state. This lets the parent component fully specify its behavior. The final Panel component with the isActive prop is controlled by the Accordion component.\n\nUncontrolled components are easier to use within their parents because they require less configuration. But they\u2019re less flexible when you want to coordinate them together. Controlled components are maximally flexible, but they require the parent components to fully configure them with props.\n\nIn practice, \u201ccontrolled\u201d and \u201cuncontrolled\u201d aren\u2019t strict technical terms\u2014each component usually has some mix of both local state and props. However, this is a useful way to talk about how components are designed and what capabilities they offer.\n\nWhen writing a component, consider which information in it should be controlled (via props), and which information should be uncontrolled (via state). But you can always change your mind and refactor later.", "source": "https://react.dev/learn/sharing-state-between-components", "category": "Sharing State Between Components"}
{"instruction": "What is A single source of truth for each state in React and how does it work?", "input": "", "output": "In a React application, many components will have their own state. Some state may \u201clive\u201d close to the leaf components (components at the bottom of the tree) like inputs. Other state may \u201clive\u201d closer to the top of the app. For example, even client-side routing libraries are usually implemented by storing the current route in the React state, and passing it down by props!\n\nFor each unique piece of state, you will choose the component that \u201cowns\u201d it. This principle is also known as having a \u201csingle source of truth\u201d. It doesn\u2019t mean that all state lives in one place\u2014but that for each piece of state, there is a specific component that holds that piece of information. Instead of duplicating shared state between components, lift it up to their common shared parent, and pass it down to the children that need it.\n\nYour app will change as you work on it. It is common that you will move state down or back up while you\u2019re still figuring out where each piece of the state \u201clives\u201d. This is all part of the process!\n\nTo see what this feels like in practice with a few more components, read Thinking in React.", "source": "https://react.dev/learn/sharing-state-between-components", "category": "Sharing State Between Components"}
{"instruction": "What is When a regular variable isn\u2019t enough in React and how does it work?", "input": "", "output": "Here\u2019s a component that renders a sculpture image. Clicking the \u201cNext\u201d button should show the next sculpture by changing the index to 1 , then 2 , and so on. However, this won\u2019t work (you can try it!):\n\n\n```javascript\nimport{sculptureList}from'./data.js';exportdefaultfunctionGallery(){letindex=0;functionhandleClick(){index=index+1;}letsculpture=sculptureList[index];return(<><buttononClick={handleClick}>Next</button><h2><i>{sculpture.name}</i>by{sculpture.artist}</h2><h3>({index+1}of{sculptureList.length})</h3><imgsrc={sculpture.url}alt={sculpture.alt}/><p>{sculpture.description}</p></>);}\n```\n\n\nThe handleClick event handler is updating a local variable, index . But two things prevent that change from being visible:\n\n1. Local variables don\u2019t persist between renders. When React renders this component a second time, it renders it from scratch\u2014it doesn\u2019t consider any changes to the local variables.\n2. Changes to local variables won\u2019t trigger renders. React doesn\u2019t realize it needs to render the component again with the new data.\n\nTo update a component with new data, two things need to happen:\n\n1. Retain the data between renders.\n2. Trigger React to render the component with new data (re-rendering).\n\nThe useState Hook provides those two things:\n\n1. A state variable to retain the data between renders.\n2. A state setter function to update the variable and trigger React to render the component again.", "source": "https://react.dev/learn/state-a-components-memory", "category": "State: A Component's Memory"}
{"instruction": "Show me a code example of When a regular variable isn\u2019t enough in React.", "input": "", "output": "Here\u2019s a component that renders a sculpture image. Clicking the \u201cNext\u201d button should show the next sculpture by changing the index to 1 , then 2 , and so on. However, this won\u2019t work (you can try it!):\n\n\n```javascript\nimport{sculptureList}from'./data.js';exportdefaultfunctionGallery(){letindex=0;functionhandleClick(){index=index+1;}letsculpture=sculptureList[index];return(<><buttononClick={handleClick}>Next</button><h2><i>{sculpture.name}</i>by{sculpture.artist}</h2><h3>({index+1}of{sculptureList.length})</h3><imgsrc={sculpture.url}alt={sculpture.alt}/><p>{sculpture.description}</p></>);}\n```\n\n\nThe handleClick event handler is updating a local variable, index . But two things prevent that change from being visible:\n\n1. Local variables don\u2019t persist between renders. When React renders this component a second time, it renders it from scratch\u2014it doesn\u2019t consider any changes to the local variables.\n2. Changes to local variables won\u2019t trigger renders. React doesn\u2019t realize it needs to render the component again with the new data.\n\nTo update a component with new data, two things need to happen:\n\n1. Retain the data between renders.\n2. Trigger React to render the component with new data (re-rendering).\n\nThe useState Hook provides those two things:\n\n1. A state variable to retain the data between renders.\n2. A state setter function to update the variable and trigger React to render the component again.", "source": "https://react.dev/learn/state-a-components-memory", "category": "State: A Component's Memory"}
{"instruction": "What is Adding a state variable in React and how does it work?", "input": "", "output": "To add a state variable, import useState from React at the top of the file:\n\n\n```javascript\nimport{useState}from'react';\n```\n\n\nThen, replace this line:\n\n\n```javascript\nletindex=0;\n```\n\n\nwith\n\n\n```javascript\nconst[index,setIndex]=useState(0);\n```\n\n\nindex is a state variable and setIndex is the setter function.\n\n> The [ and ] syntax here is called array destructuring and it lets you read values from an array. The array returned by useState always has exactly two items.\n\nThe [ and ] syntax here is called array destructuring and it lets you read values from an array. The array returned by useState always has exactly two items.\n\nThis is how they work together in handleClick :\n\n\n```javascript\nfunctionhandleClick(){setIndex(index+1);}\n```\n\n\nNow clicking the \u201cNext\u201d button switches the current sculpture:\n\n\n```javascript\nimport{useState}from'react';import{sculptureList}from'./data.js';exportdefaultfunctionGallery(){const[index,setIndex]=useState(0);functionhandleClick(){setIndex(index+1);}letsculpture=sculptureList[index];return(<><buttononClick={handleClick}>Next</button><h2><i>{sculpture.name}</i>by{sculpture.artist}</h2><h3>({index+1}of{sculptureList.length})</h3><imgsrc={sculpture.url}alt={sculpture.alt}/><p>{sculpture.description}</p></>);}\n```\n\n\n\n### Meet your first Hook\n\n\nIn React, useState , as well as any other function starting with \u201c use \u201d, is called a Hook.\n\nHooks are special functions that are only available while React is rendering (which we\u2019ll get into in more detail on the next page). They let you \u201chook into\u201d different React features.\n\nState is just one of those features, but you will meet the other Hooks later.\n\n\n### Pitfall\n\n\nHooks\u2014functions starting with use \u2014can only be called at the top level of your components or your own Hooks. You can\u2019t call Hooks inside conditions, loops, or other nested functions. Hooks are functions, but it\u2019s helpful to think of them as unconditional declarations about your component\u2019s needs. You \u201cuse\u201d React features at the top of your component similar to how you \u201cimport\u201d modules at the top of your file.\n\n\n### Anatomy ofuseState\n\n\nWhen you call useState , you are telling React that you want this component to remember something:\n\n\n```javascript\nconst[index,setIndex]=useState(0);\n```\n\n\nIn this case, you want React to remember index .\n\n\n### Note\n\n\nThe convention is to name this pair like const [something, setSomething] . You could name it anything you like, but conventions make things easier to understand across projects.\n\nThe only argument to useState is the initial value of your state variable. In this example, the index \u2019s initial value is set to 0 with useState(0) .\n\nEvery time your component renders, useState gives you an array containing two values:\n\n1. The state variable ( index ) with the value you stored.\n2. The state setter function ( setIndex ) which can update the state variable and trigger React to render the component again.\n\nHere\u2019s how that happens in action:\n\n\n```javascript\nconst[index,setIndex]=useState(0);\n```\n\n\n1. Your component renders the first time. Because you passed 0 to useState as the initial value for index , it will return [0, setIndex] . React remembers 0 is the latest state value.\n2. You update the state. When a user clicks the button, it calls setIndex(index + 1) . index is 0 , so it\u2019s setIndex(1) . This tells React to remember index is 1 now and triggers another render.\n3. Your component\u2019s second render. React still sees useState(0) , but because React remembers that you set index to 1 , it returns [1, setIndex] instead.\n4. And so on!", "source": "https://react.dev/learn/state-a-components-memory", "category": "State: A Component's Memory"}
{"instruction": "Show me a code example of Adding a state variable in React.", "input": "", "output": "To add a state variable, import useState from React at the top of the file:\n\n\n```javascript\nimport{useState}from'react';\n```\n\n\nThen, replace this line:\n\n\n```javascript\nletindex=0;\n```\n\n\nwith\n\n\n```javascript\nconst[index,setIndex]=useState(0);\n```\n\n\nindex is a state variable and setIndex is the setter function.\n\n> The [ and ] syntax here is called array destructuring and it lets you read values from an array. The array returned by useState always has exactly two items.\n\nThe [ and ] syntax here is called array destructuring and it lets you read values from an array. The array returned by useState always has exactly two items.\n\nThis is how they work together in handleClick :\n\n\n```javascript\nfunctionhandleClick(){setIndex(index+1);}\n```\n\n\nNow clicking the \u201cNext\u201d button switches the current sculpture:\n\n\n```javascript\nimport{useState}from'react';import{sculptureList}from'./data.js';exportdefaultfunctionGallery(){const[index,setIndex]=useState(0);functionhandleClick(){setIndex(index+1);}letsculpture=sculptureList[index];return(<><buttononClick={handleClick}>Next</button><h2><i>{sculpture.name}</i>by{sculpture.artist}</h2><h3>({index+1}of{sculptureList.length})</h3><imgsrc={sculpture.url}alt={sculpture.alt}/><p>{sculpture.description}</p></>);}\n```\n\n\n\n### Meet your first Hook\n\n\nIn React, useState , as well as any other function starting with \u201c use \u201d, is called a Hook.\n\nHooks are special functions that are only available while React is rendering (which we\u2019ll get into in more detail on the next page). They let you \u201chook into\u201d different React features.\n\nState is just one of those features, but you will meet the other Hooks later.\n\n\n### Pitfall\n\n\nHooks\u2014functions starting with use \u2014can only be called at the top level of your components or your own Hooks. You can\u2019t call Hooks inside conditions, loops, or other nested functions. Hooks are functions, but it\u2019s helpful to think of them as unconditional declarations about your component\u2019s needs. You \u201cuse\u201d React features at the top of your component similar to how you \u201cimport\u201d modules at the top of your file.\n\n\n### Anatomy ofuseState\n\n\nWhen you call useState , you are telling React that you want this component to remember something:\n\n\n```javascript\nconst[index,setIndex]=useState(0);\n```\n\n\nIn this case, you want React to remember index .\n\n\n### Note\n\n\nThe convention is to name this pair like const [something, setSomething] . You could name it anything you like, but conventions make things easier to understand across projects.\n\nThe only argument to useState is the initial value of your state variable. In this example, the index \u2019s initial value is set to 0 with useState(0) .\n\nEvery time your component renders, useState gives you an array containing two values:\n\n1. The state variable ( index ) with the value you stored.\n2. The state setter function ( setIndex ) which can update the state variable and trigger React to render the component again.\n\nHere\u2019s how that happens in action:\n\n\n```javascript\nconst[index,setIndex]=useState(0);\n```\n\n\n1. Your component renders the first time. Because you passed 0 to useState as the initial value for index , it will return [0, setIndex] . React remembers 0 is the latest state value.\n2. You update the state. When a user clicks the button, it calls setIndex(index + 1) . index is 0 , so it\u2019s setIndex(1) . This tells React to remember index is 1 now and triggers another render.\n3. Your component\u2019s second render. React still sees useState(0) , but because React remembers that you set index to 1 , it returns [1, setIndex] instead.\n4. And so on!", "source": "https://react.dev/learn/state-a-components-memory", "category": "State: A Component's Memory"}
{"instruction": "What is Giving a component multiple state variables in React and how does it work?", "input": "", "output": "You can have as many state variables of as many types as you like in one component. This component has two state variables, a number index and a boolean showMore that\u2019s toggled when you click \u201cShow details\u201d:\n\n\n```javascript\nimport{useState}from'react';import{sculptureList}from'./data.js';exportdefaultfunctionGallery(){const[index,setIndex]=useState(0);const[showMore,setShowMore]=useState(false);functionhandleNextClick(){setIndex(index+1);}functionhandleMoreClick(){setShowMore(!showMore);}letsculpture=sculptureList[index];return(<><buttononClick={handleNextClick}>Next</button><h2><i>{sculpture.name}</i>by{sculpture.artist}</h2><h3>({index+1}of{sculptureList.length})</h3><buttononClick={handleMoreClick}>{showMore?'Hide':'Show'}details</button>{showMore&&<p>{sculpture.description}</p>}<imgsrc={sculpture.url}alt={sculpture.alt}/></>);}\n```\n\n\nIt is a good idea to have multiple state variables if their state is unrelated, like index and showMore in this example. But if you find that you often change two state variables together, it might be easier to combine them into one. For example, if you have a form with many fields, it\u2019s more convenient to have a single state variable that holds an object than state variable per field. Read Choosing the State Structure for more tips.\n\nYou might have noticed that the useState call does not receive any information about which state variable it refers to. There is no \u201cidentifier\u201d that is passed to useState , so how does it know which of the state variables to return? Does it rely on some magic like parsing your functions? The answer is no.\n\nInstead, to enable their concise syntax, Hooks rely on a stable call order on every render of the same component. This works well in practice because if you follow the rule above (\u201conly call Hooks at the top level\u201d), Hooks will always be called in the same order. Additionally, a linter plugin catches most mistakes.\n\nInternally, React holds an array of state pairs for every component. It also maintains the current pair index, which is set to 0 before rendering. Each time you call useState , React gives you the next state pair and increments the index. You can read more about this mechanism in React Hooks: Not Magic, Just Arrays.\n\nThis example doesn\u2019t use React but it gives you an idea of how useState works internally:\n\n\n```javascript\nletcomponentHooks=[];letcurrentHookIndex=0;// How useState works inside React (simplified).functionuseState(initialState){letpair=componentHooks[currentHookIndex];if(pair){// This is not the first render,// so the state pair already exists.// Return it and prepare for next Hook call.currentHookIndex++;returnpair;}// This is the first time we're rendering,// so create a state pair and store it.pair=[initialState,setState];functionsetState(nextState){// When the user requests a state change,// put the new value into the pair.pair[0]=nextState;updateDOM();}// Store the pair for future renders// and prepare for the next Hook call.componentHooks[currentHookIndex]=pair;currentHookIndex++;returnpair;}functionGallery(){// Each useState() call will get the next pair.const[index,setIndex]=useState(0);const[showMore,setShowMore]=useState(false);functionhandleNextClick(){setIndex(index+1);}functionhandleMoreClick(){setShowMore(!showMore);}letsculpture=sculptureList[index];// This example doesn't use React, so// return an output object instead of JSX.return{onNextClick:handleNextClick,onMoreClick:handleMoreClick,header:`${sculpture.name}by${sculpture.artist}`,counter:`${index+1}of${sculptureList.length}`,more:`${showMore?'Hide':'Show'}details`,description:showMore?sculpture.description:null,imageSrc:sculpture.url,imageAlt:sculpture.alt};}functionupdateDOM(){// Reset the current Hook index// before rendering the component.currentHookIndex=0;letoutput=Gallery();// Update the DOM to match the output.// This is the part React does for you.nextButton.onclick=output.onNextClick;header.textContent=output.header;moreButton.onclick=output.onMoreClick;moreButton.textContent=output.more;image.src=output.imageSrc;image.alt=output.imageAlt;if(output.description!==null){description.textContent=output.description;description.style.display='';}else{description.style.display='none';}}letnextButton=document.getElementById('nextButton');letheader=document.getElementById('header');letmoreButton=document.getElementById('moreButton');letdescription=document.getElementById('description');letimage=document.getElementById('image');letsculptureList=[{name:'Homenaje a la Neurocirug\u00eda',artist:'Marta Colvin Andrade',description:'Although Colvin is predominantly known for abstract themes that allude to pre-Hispanic symbols, this gigantic sculpture, an homage to neurosurgery, is one of her most recognizable public art pieces.',url:'https://i.imgur.com/Mx7dA2Y.jpg',alt:'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.'},{name:'Floralis Gen\u00e9rica',artist:'Eduardo Catalano',description:'This enormous (75 ft. or 23m) silver flower is located in Buenos Aires. It is designed to move, closing its petals in the evening or when strong winds blow and opening them in the morning.',url:'https://i.imgur.com/ZF6s192m.jpg',alt:'A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.'},{name:'Eternal Presence',artist:'John Woodrow Wilson',description:'Wilson was known for his preoccupation with equality, social justice, as well as the essential and spiritual qualities of humankind. This massive (7ft. or 2,13m) bronze represents what he described as \"a symbolic Black presence infused with a sense of universal humanity.\"',url:'https://i.imgur.com/aTtVpES.jpg',alt:'The sculpture depicting a human head seems ever-present and solemn. It radiates calm and serenity.'},{name:'Moai',artist:'Unknown Artist',description:'Located on the Easter Island, there are 1,000 moai, or extant monumental statues, created by the early Rapa Nui people, which some believe represented deified ancestors.',url:'https://i.imgur.com/RCwLEoQm.jpg',alt:'Three monumental stone busts with the heads that are disproportionately large with somber faces.'},{name:'Blue Nana',artist:'Niki de Saint Phalle',description:'The Nanas are triumphant creatures, symbols of femininity and maternity. Initially, Saint Phalle used fabric and found objects for the Nanas, and later on introduced polyester to achieve a more vibrant effect.',url:'https://i.imgur.com/Sd1AgUOm.jpg',alt:'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.'},{name:'Ultimate Form',artist:'Barbara Hepworth',description:'This abstract bronze sculpture is a part of The Family of Man series located at Yorkshire Sculpture Park. Hepworth chose not to create literal representations of the world but developed abstract forms inspired by people and landscapes.',url:'https://i.imgur.com/2heNQDcm.jpg',alt:'A tall sculpture made of three elements stacked on each other reminding of a human figure.'},{name:'Cavaliere',artist:'Lamidi Olonade Fakeye',description:\"Descended from four generations of woodcarvers, Fakeye's work blended traditional and contemporary Yoruba themes.\",url:'https://i.imgur.com/wIdGuZwm.png',alt:'An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.'},{name:'Big Bellies',artist:'Alina Szapocznikow',description:\"Szapocznikow is known for her sculptures of the fragmented body as a metaphor for the fragility and impermanence of youth and beauty. This sculpture depicts two very realistic large bellies stacked on top of each other, each around five feet (1,5m) tall.\",url:'https://i.imgur.com/AlHTAdDm.jpg',alt:'The sculpture reminds a cascade of folds, quite different from bellies in classical sculptures.'},{name:'Terracotta Army',artist:'Unknown Artist',description:'The Terracotta Army is a collection of terracotta sculptures depicting the armies of Qin Shi Huang, the first Emperor of China. The army consisted of more than 8,000 soldiers, 130 chariots with 520 horses, and 150 cavalry horses.',url:'https://i.imgur.com/HMFmH6m.jpg',alt:'12 terracotta sculptures of solemn warriors, each with a unique facial expression and armor.'},{name:'Lunar Landscape',artist:'Louise Nevelson',description:'Nevelson was known for scavenging objects from New York City debris, which she would later assemble into monumental constructions. In this one, she used disparate parts like a bedpost, juggling pin, and seat fragment, nailing and gluing them into boxes that reflect the influence of Cubism\u2019s geometric abstraction of space and form.',url:'https://i.imgur.com/rN7hY6om.jpg',alt:'A black matte sculpture where the individual elements are initially indistinguishable.'},{name:'Aureole',artist:'Ranjani Shettar',description:'Shettar merges the traditional and the modern, the natural and the industrial. Her art focuses on the relationship between man and nature. Her work was described as compelling both abstractly and figuratively, gravity defying, and a \"fine synthesis of unlikely materials.\"',url:'https://i.imgur.com/okTpbHhm.jpg',alt:'A pale wire-like sculpture mounted on concrete wall and descending on the floor. It appears light.'},{name:'Hippos',artist:'Taipei Zoo',description:'The Taipei Zoo commissioned a Hippo Square featuring submerged hippos at play.',url:'https://i.imgur.com/6o5Vuyu.jpg',alt:'A group of bronze hippo sculptures emerging from the sett sidewalk as if they were swimming.'}];// Make UI match the initial state.updateDOM();\n```\n\n\nYou don\u2019t have to understand it to use React, but you might find this a helpful mental model.", "source": "https://react.dev/learn/state-a-components-memory", "category": "State: A Component's Memory"}
{"instruction": "Show me a code example of Giving a component multiple state variables in React.", "input": "", "output": "You can have as many state variables of as many types as you like in one component. This component has two state variables, a number index and a boolean showMore that\u2019s toggled when you click \u201cShow details\u201d:\n\n\n```javascript\nimport{useState}from'react';import{sculptureList}from'./data.js';exportdefaultfunctionGallery(){const[index,setIndex]=useState(0);const[showMore,setShowMore]=useState(false);functionhandleNextClick(){setIndex(index+1);}functionhandleMoreClick(){setShowMore(!showMore);}letsculpture=sculptureList[index];return(<><buttononClick={handleNextClick}>Next</button><h2><i>{sculpture.name}</i>by{sculpture.artist}</h2><h3>({index+1}of{sculptureList.length})</h3><buttononClick={handleMoreClick}>{showMore?'Hide':'Show'}details</button>{showMore&&<p>{sculpture.description}</p>}<imgsrc={sculpture.url}alt={sculpture.alt}/></>);}\n```\n\n\nIt is a good idea to have multiple state variables if their state is unrelated, like index and showMore in this example. But if you find that you often change two state variables together, it might be easier to combine them into one. For example, if you have a form with many fields, it\u2019s more convenient to have a single state variable that holds an object than state variable per field. Read Choosing the State Structure for more tips.\n\nYou might have noticed that the useState call does not receive any information about which state variable it refers to. There is no \u201cidentifier\u201d that is passed to useState , so how does it know which of the state variables to return? Does it rely on some magic like parsing your functions? The answer is no.\n\nInstead, to enable their concise syntax, Hooks rely on a stable call order on every render of the same component. This works well in practice because if you follow the rule above (\u201conly call Hooks at the top level\u201d), Hooks will always be called in the same order. Additionally, a linter plugin catches most mistakes.\n\nInternally, React holds an array of state pairs for every component. It also maintains the current pair index, which is set to 0 before rendering. Each time you call useState , React gives you the next state pair and increments the index. You can read more about this mechanism in React Hooks: Not Magic, Just Arrays.\n\nThis example doesn\u2019t use React but it gives you an idea of how useState works internally:\n\n\n```javascript\nletcomponentHooks=[];letcurrentHookIndex=0;// How useState works inside React (simplified).functionuseState(initialState){letpair=componentHooks[currentHookIndex];if(pair){// This is not the first render,// so the state pair already exists.// Return it and prepare for next Hook call.currentHookIndex++;returnpair;}// This is the first time we're rendering,// so create a state pair and store it.pair=[initialState,setState];functionsetState(nextState){// When the user requests a state change,// put the new value into the pair.pair[0]=nextState;updateDOM();}// Store the pair for future renders// and prepare for the next Hook call.componentHooks[currentHookIndex]=pair;currentHookIndex++;returnpair;}functionGallery(){// Each useState() call will get the next pair.const[index,setIndex]=useState(0);const[showMore,setShowMore]=useState(false);functionhandleNextClick(){setIndex(index+1);}functionhandleMoreClick(){setShowMore(!showMore);}letsculpture=sculptureList[index];// This example doesn't use React, so// return an output object instead of JSX.return{onNextClick:handleNextClick,onMoreClick:handleMoreClick,header:`${sculpture.name}by${sculpture.artist}`,counter:`${index+1}of${sculptureList.length}`,more:`${showMore?'Hide':'Show'}details`,description:showMore?sculpture.description:null,imageSrc:sculpture.url,imageAlt:sculpture.alt};}functionupdateDOM(){// Reset the current Hook index// before rendering the component.currentHookIndex=0;letoutput=Gallery();// Update the DOM to match the output.// This is the part React does for you.nextButton.onclick=output.onNextClick;header.textContent=output.header;moreButton.onclick=output.onMoreClick;moreButton.textContent=output.more;image.src=output.imageSrc;image.alt=output.imageAlt;if(output.description!==null){description.textContent=output.description;description.style.display='';}else{description.style.display='none';}}letnextButton=document.getElementById('nextButton');letheader=document.getElementById('header');letmoreButton=document.getElementById('moreButton');letdescription=document.getElementById('description');letimage=document.getElementById('image');letsculptureList=[{name:'Homenaje a la Neurocirug\u00eda',artist:'Marta Colvin Andrade',description:'Although Colvin is predominantly known for abstract themes that allude to pre-Hispanic symbols, this gigantic sculpture, an homage to neurosurgery, is one of her most recognizable public art pieces.',url:'https://i.imgur.com/Mx7dA2Y.jpg',alt:'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.'},{name:'Floralis Gen\u00e9rica',artist:'Eduardo Catalano',description:'This enormous (75 ft. or 23m) silver flower is located in Buenos Aires. It is designed to move, closing its petals in the evening or when strong winds blow and opening them in the morning.',url:'https://i.imgur.com/ZF6s192m.jpg',alt:'A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.'},{name:'Eternal Presence',artist:'John Woodrow Wilson',description:'Wilson was known for his preoccupation with equality, social justice, as well as the essential and spiritual qualities of humankind. This massive (7ft. or 2,13m) bronze represents what he described as \"a symbolic Black presence infused with a sense of universal humanity.\"',url:'https://i.imgur.com/aTtVpES.jpg',alt:'The sculpture depicting a human head seems ever-present and solemn. It radiates calm and serenity.'},{name:'Moai',artist:'Unknown Artist',description:'Located on the Easter Island, there are 1,000 moai, or extant monumental statues, created by the early Rapa Nui people, which some believe represented deified ancestors.',url:'https://i.imgur.com/RCwLEoQm.jpg',alt:'Three monumental stone busts with the heads that are disproportionately large with somber faces.'},{name:'Blue Nana',artist:'Niki de Saint Phalle',description:'The Nanas are triumphant creatures, symbols of femininity and maternity. Initially, Saint Phalle used fabric and found objects for the Nanas, and later on introduced polyester to achieve a more vibrant effect.',url:'https://i.imgur.com/Sd1AgUOm.jpg',alt:'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.'},{name:'Ultimate Form',artist:'Barbara Hepworth',description:'This abstract bronze sculpture is a part of The Family of Man series located at Yorkshire Sculpture Park. Hepworth chose not to create literal representations of the world but developed abstract forms inspired by people and landscapes.',url:'https://i.imgur.com/2heNQDcm.jpg',alt:'A tall sculpture made of three elements stacked on each other reminding of a human figure.'},{name:'Cavaliere',artist:'Lamidi Olonade Fakeye',description:\"Descended from four generations of woodcarvers, Fakeye's work blended traditional and contemporary Yoruba themes.\",url:'https://i.imgur.com/wIdGuZwm.png',alt:'An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.'},{name:'Big Bellies',artist:'Alina Szapocznikow',description:\"Szapocznikow is known for her sculptures of the fragmented body as a metaphor for the fragility and impermanence of youth and beauty. This sculpture depicts two very realistic large bellies stacked on top of each other, each around five feet (1,5m) tall.\",url:'https://i.imgur.com/AlHTAdDm.jpg',alt:'The sculpture reminds a cascade of folds, quite different from bellies in classical sculptures.'},{name:'Terracotta Army',artist:'Unknown Artist',description:'The Terracotta Army is a collection of terracotta sculptures depicting the armies of Qin Shi Huang, the first Emperor of China. The army consisted of more than 8,000 soldiers, 130 chariots with 520 horses, and 150 cavalry horses.',url:'https://i.imgur.com/HMFmH6m.jpg',alt:'12 terracotta sculptures of solemn warriors, each with a unique facial expression and armor.'},{name:'Lunar Landscape',artist:'Louise Nevelson',description:'Nevelson was known for scavenging objects from New York City debris, which she would later assemble into monumental constructions. In this one, she used disparate parts like a bedpost, juggling pin, and seat fragment, nailing and gluing them into boxes that reflect the influence of Cubism\u2019s geometric abstraction of space and form.',url:'https://i.imgur.com/rN7hY6om.jpg',alt:'A black matte sculpture where the individual elements are initially indistinguishable.'},{name:'Aureole',artist:'Ranjani Shettar',description:'Shettar merges the traditional and the modern, the natural and the industrial. Her art focuses on the relationship between man and nature. Her work was described as compelling both abstractly and figuratively, gravity defying, and a \"fine synthesis of unlikely materials.\"',url:'https://i.imgur.com/okTpbHhm.jpg',alt:'A pale wire-like sculpture mounted on concrete wall and descending on the floor. It appears light.'},{name:'Hippos',artist:'Taipei Zoo',description:'The Taipei Zoo commissioned a Hippo Square featuring submerged hippos at play.',url:'https://i.imgur.com/6o5Vuyu.jpg',alt:'A group of bronze hippo sculptures emerging from the sett sidewalk as if they were swimming.'}];// Make UI match the initial state.updateDOM();\n```\n\n\nYou don\u2019t have to understand it to use React, but you might find this a helpful mental model.", "source": "https://react.dev/learn/state-a-components-memory", "category": "State: A Component's Memory"}
{"instruction": "Explain the concept of State is isolated and private in React.", "input": "", "output": "State is local to a component instance on the screen. In other words, if you render the same component twice, each copy will have completely isolated state! Changing one of them will not affect the other.\n\nIn this example, the Gallery component from earlier is rendered twice with no changes to its logic. Try clicking the buttons inside each of the galleries. Notice that their state is independent:\n\n\n```javascript\nimportGalleryfrom'./Gallery.js';exportdefaultfunctionPage(){return(<divclassName=\"Page\"><Gallery/><Gallery/></div>);}\n```\n\n\nThis is what makes state different from regular variables that you might declare at the top of your module. State is not tied to a particular function call or a place in the code, but it\u2019s \u201clocal\u201d to the specific place on the screen. You rendered two <Gallery /> components, so their state is stored separately.\n\nAlso notice how the Page component doesn\u2019t \u201cknow\u201d anything about the Gallery state or even whether it has any. Unlike props, state is fully private to the component declaring it. The parent component can\u2019t change it. This lets you add state to any component or remove it without impacting the rest of the components.\n\nWhat if you wanted both galleries to keep their states in sync? The right way to do it in React is to remove state from child components and add it to their closest shared parent. The next few pages will focus on organizing state of a single component, but we will return to this topic in Sharing State Between Components.", "source": "https://react.dev/learn/state-a-components-memory", "category": "State: A Component's Memory"}
{"instruction": "Show me a code example of State is isolated and private in React.", "input": "", "output": "State is local to a component instance on the screen. In other words, if you render the same component twice, each copy will have completely isolated state! Changing one of them will not affect the other.\n\nIn this example, the Gallery component from earlier is rendered twice with no changes to its logic. Try clicking the buttons inside each of the galleries. Notice that their state is independent:\n\n\n```javascript\nimportGalleryfrom'./Gallery.js';exportdefaultfunctionPage(){return(<divclassName=\"Page\"><Gallery/><Gallery/></div>);}\n```\n\n\nThis is what makes state different from regular variables that you might declare at the top of your module. State is not tied to a particular function call or a place in the code, but it\u2019s \u201clocal\u201d to the specific place on the screen. You rendered two <Gallery /> components, so their state is stored separately.\n\nAlso notice how the Page component doesn\u2019t \u201cknow\u201d anything about the Gallery state or even whether it has any. Unlike props, state is fully private to the component declaring it. The parent component can\u2019t change it. This lets you add state to any component or remove it without impacting the rest of the components.\n\nWhat if you wanted both galleries to keep their states in sync? The right way to do it in React is to remove state from child components and add it to their closest shared parent. The next few pages will focus on organizing state of a single component, but we will return to this topic in Sharing State Between Components.", "source": "https://react.dev/learn/state-a-components-memory", "category": "State: A Component's Memory"}
{"instruction": "How do I handle Setting state triggers renders in React?", "input": "", "output": "You might think of your user interface as changing directly in response to the user event like a click. In React, it works a little differently from this mental model. On the previous page, you saw that setting state requests a re-render from React. This means that for an interface to react to the event, you need to update the state .\n\nIn this example, when you press \u201csend\u201d, setIsSent(true) tells React to re-render the UI:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[isSent,setIsSent]=useState(false);const[message,setMessage]=useState('Hi!');if(isSent){return<h1>Your message is on its way!</h1>}return(<formonSubmit={(e)=>{e.preventDefault();setIsSent(true);sendMessage(message);}}><textareaplaceholder=\"Message\"value={message}onChange={e=>setMessage(e.target.value)}/><buttontype=\"submit\">Send</button></form>);}functionsendMessage(message){// ...}\n```\n\n\nHere\u2019s what happens when you click the button:\n\n1. The onSubmit event handler executes.\n2. setIsSent(true) sets isSent to true and queues a new render.\n3. React re-renders the component according to the new isSent value.\n\nLet\u2019s take a closer look at the relationship between state and rendering.", "source": "https://react.dev/learn/state-as-a-snapshot", "category": "State as a Snapshot"}
{"instruction": "Show me a code example of Setting state triggers renders in React.", "input": "", "output": "You might think of your user interface as changing directly in response to the user event like a click. In React, it works a little differently from this mental model. On the previous page, you saw that setting state requests a re-render from React. This means that for an interface to react to the event, you need to update the state .\n\nIn this example, when you press \u201csend\u201d, setIsSent(true) tells React to re-render the UI:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[isSent,setIsSent]=useState(false);const[message,setMessage]=useState('Hi!');if(isSent){return<h1>Your message is on its way!</h1>}return(<formonSubmit={(e)=>{e.preventDefault();setIsSent(true);sendMessage(message);}}><textareaplaceholder=\"Message\"value={message}onChange={e=>setMessage(e.target.value)}/><buttontype=\"submit\">Send</button></form>);}functionsendMessage(message){// ...}\n```\n\n\nHere\u2019s what happens when you click the button:\n\n1. The onSubmit event handler executes.\n2. setIsSent(true) sets isSent to true and queues a new render.\n3. React re-renders the component according to the new isSent value.\n\nLet\u2019s take a closer look at the relationship between state and rendering.", "source": "https://react.dev/learn/state-as-a-snapshot", "category": "State as a Snapshot"}
{"instruction": "Tell me about Rendering takes a snapshot in time.", "input": "", "output": "\u201cRendering\u201d means that React is calling your component, which is a function. The JSX you return from that function is like a snapshot of the UI in time. Its props, event handlers, and local variables were all calculated using its state at the time of the render.\n\nUnlike a photograph or a movie frame, the UI \u201csnapshot\u201d you return is interactive. It includes logic like event handlers that specify what happens in response to inputs. React updates the screen to match this snapshot and connects the event handlers. As a result, pressing a button will trigger the click handler from your JSX.\n\nWhen React re-renders a component:\n\n1. React calls your function again.\n2. Your function returns a new JSX snapshot.\n3. React then updates the screen to match the snapshot your function returned.\n\n1. React executing the function\n2. Calculating the snapshot\n3. Updating the DOM tree\n\nIllustrated by Rachel Lee Nabors\n\nAs a component\u2019s memory, state is not like a regular variable that disappears after your function returns. State actually \u201clives\u201d in React itself\u2014as if on a shelf!\u2014outside of your function. When React calls your component, it gives you a snapshot of the state for that particular render. Your component returns a snapshot of the UI with a fresh set of props and event handlers in its JSX, all calculated using the state values from that render!\n\n1. You tell React to update the state\n2. React updates the state value\n3. React passes a snapshot of the state value into the component\n\nIllustrated by Rachel Lee Nabors\n\nHere\u2019s a little experiment to show you how this works. In this example, you might expect that clicking the \u201c+3\u201d button would increment the counter three times because it calls setNumber(number + 1) three times.\n\nSee what happens when you click the \u201c+3\u201d button:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionCounter(){const[number,setNumber]=useState(0);return(<><h1>{number}</h1><buttononClick={()=>{setNumber(number+1);setNumber(number+1);setNumber(number+1);}}>+3</button></>)}\n```\n\n\nNotice that number only increments once per click!\n\nSetting state only changes it for the next render. During the first render, number was 0 . This is why, in that render\u2019s onClick handler, the value of number is still 0 even after setNumber(number + 1) was called:\n\n\n```javascript\n<buttononClick={()=>{setNumber(number+1);setNumber(number+1);setNumber(number+1);}}>+3</button>\n```\n\n\nHere is what this button\u2019s click handler tells React to do:\n\n1. setNumber(number + 1) : number is 0 so setNumber(0 + 1) . React prepares to change number to 1 on the next render.\n2. setNumber(number + 1) : number is 0 so setNumber(0 + 1) . React prepares to change number to 1 on the next render.\n3. setNumber(number + 1) : number is 0 so setNumber(0 + 1) . React prepares to change number to 1 on the next render.\n\n* React prepares to change number to 1 on the next render.\n\n* React prepares to change number to 1 on the next render.\n\n* React prepares to change number to 1 on the next render.\n\nEven though you called setNumber(number + 1) three times, in this render\u2019s event handler number is always 0 , so you set the state to 1 three times. This is why, after your event handler finishes, React re-renders the component with number equal to 1 rather than 3 .\n\nYou can also visualize this by mentally substituting state variables with their values in your code. Since the number state variable is 0 for this render , its event handler looks like this:\n\n\n```javascript\n<buttononClick={()=>{setNumber(0+1);setNumber(0+1);setNumber(0+1);}}>+3</button>\n```\n\n\nFor the next render, number is 1 , so that render\u2019s click handler looks like this:\n\n\n```javascript\n<buttononClick={()=>{setNumber(1+1);setNumber(1+1);setNumber(1+1);}}>+3</button>\n```\n\n\nThis is why clicking the button again will set the counter to 2 , then to 3 on the next click, and so on.", "source": "https://react.dev/learn/state-as-a-snapshot", "category": "State as a Snapshot"}
{"instruction": "Show me a code example of Rendering takes a snapshot in time in React.", "input": "", "output": "\u201cRendering\u201d means that React is calling your component, which is a function. The JSX you return from that function is like a snapshot of the UI in time. Its props, event handlers, and local variables were all calculated using its state at the time of the render.\n\nUnlike a photograph or a movie frame, the UI \u201csnapshot\u201d you return is interactive. It includes logic like event handlers that specify what happens in response to inputs. React updates the screen to match this snapshot and connects the event handlers. As a result, pressing a button will trigger the click handler from your JSX.\n\nWhen React re-renders a component:\n\n1. React calls your function again.\n2. Your function returns a new JSX snapshot.\n3. React then updates the screen to match the snapshot your function returned.\n\n1. React executing the function\n2. Calculating the snapshot\n3. Updating the DOM tree\n\nIllustrated by Rachel Lee Nabors\n\nAs a component\u2019s memory, state is not like a regular variable that disappears after your function returns. State actually \u201clives\u201d in React itself\u2014as if on a shelf!\u2014outside of your function. When React calls your component, it gives you a snapshot of the state for that particular render. Your component returns a snapshot of the UI with a fresh set of props and event handlers in its JSX, all calculated using the state values from that render!\n\n1. You tell React to update the state\n2. React updates the state value\n3. React passes a snapshot of the state value into the component\n\nIllustrated by Rachel Lee Nabors\n\nHere\u2019s a little experiment to show you how this works. In this example, you might expect that clicking the \u201c+3\u201d button would increment the counter three times because it calls setNumber(number + 1) three times.\n\nSee what happens when you click the \u201c+3\u201d button:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionCounter(){const[number,setNumber]=useState(0);return(<><h1>{number}</h1><buttononClick={()=>{setNumber(number+1);setNumber(number+1);setNumber(number+1);}}>+3</button></>)}\n```\n\n\nNotice that number only increments once per click!\n\nSetting state only changes it for the next render. During the first render, number was 0 . This is why, in that render\u2019s onClick handler, the value of number is still 0 even after setNumber(number + 1) was called:\n\n\n```javascript\n<buttononClick={()=>{setNumber(number+1);setNumber(number+1);setNumber(number+1);}}>+3</button>\n```\n\n\nHere is what this button\u2019s click handler tells React to do:\n\n1. setNumber(number + 1) : number is 0 so setNumber(0 + 1) . React prepares to change number to 1 on the next render.\n2. setNumber(number + 1) : number is 0 so setNumber(0 + 1) . React prepares to change number to 1 on the next render.\n3. setNumber(number + 1) : number is 0 so setNumber(0 + 1) . React prepares to change number to 1 on the next render.\n\n* React prepares to change number to 1 on the next render.\n\n* React prepares to change number to 1 on the next render.\n\n* React prepares to change number to 1 on the next render.\n\nEven though you called setNumber(number + 1) three times, in this render\u2019s event handler number is always 0 , so you set the state to 1 three times. This is why, after your event handler finishes, React re-renders the component with number equal to 1 rather than 3 .\n\nYou can also visualize this by mentally substituting state variables with their values in your code. Since the number state variable is 0 for this render , its event handler looks like this:\n\n\n```javascript\n<buttononClick={()=>{setNumber(0+1);setNumber(0+1);setNumber(0+1);}}>+3</button>\n```\n\n\nFor the next render, number is 1 , so that render\u2019s click handler looks like this:\n\n\n```javascript\n<buttononClick={()=>{setNumber(1+1);setNumber(1+1);setNumber(1+1);}}>+3</button>\n```\n\n\nThis is why clicking the button again will set the counter to 2 , then to 3 on the next click, and so on.", "source": "https://react.dev/learn/state-as-a-snapshot", "category": "State as a Snapshot"}
{"instruction": "Can you describe State over time in the context of React?", "input": "", "output": "Well, that was fun. Try to guess what clicking this button will alert:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionCounter(){const[number,setNumber]=useState(0);return(<><h1>{number}</h1><buttononClick={()=>{setNumber(number+5);alert(number);}}>+5</button></>)}\n```\n\n\nIf you use the substitution method from before, you can guess that the alert shows \u201c0\u201d:\n\n\n```javascript\nsetNumber(0+5);alert(0);\n```\n\n\nBut what if you put a timer on the alert, so it only fires after the component re-rendered? Would it say \u201c0\u201d or \u201c5\u201d? Have a guess!\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionCounter(){const[number,setNumber]=useState(0);return(<><h1>{number}</h1><buttononClick={()=>{setNumber(number+5);setTimeout(()=>{alert(number);},3000);}}>+5</button></>)}\n```\n\n\nSurprised? If you use the substitution method, you can see the \u201csnapshot\u201d of the state passed to the alert.\n\n\n```javascript\nsetNumber(0+5);setTimeout(()=>{alert(0);},3000);\n```\n\n\nThe state stored in React may have changed by the time the alert runs, but it was scheduled using a snapshot of the state at the time the user interacted with it!\n\nA state variable\u2019s value never changes within a render, even if its event handler\u2019s code is asynchronous. Inside that render\u2019s onClick , the value of number continues to be 0 even after setNumber(number + 5) was called. Its value was \u201cfixed\u201d when React \u201ctook the snapshot\u201d of the UI by calling your component.\n\nHere is an example of how that makes your event handlers less prone to timing mistakes. Below is a form that sends a message with a five-second delay. Imagine this scenario:\n\n1. You press the \u201cSend\u201d button, sending \u201cHello\u201d to Alice.\n2. Before the five-second delay ends, you change the value of the \u201cTo\u201d field to \u201cBob\u201d.\n\nWhat do you expect the alert to display? Would it display, \u201cYou said Hello to Alice\u201d? Or would it display, \u201cYou said Hello to Bob\u201d? Make a guess based on what you know, and then try it:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[to,setTo]=useState('Alice');const[message,setMessage]=useState('Hello');functionhandleSubmit(e){e.preventDefault();setTimeout(()=>{alert(`You said${message}to${to}`);},5000);}return(<formonSubmit={handleSubmit}><label>To:{' '}<selectvalue={to}onChange={e=>setTo(e.target.value)}><optionvalue=\"Alice\">Alice</option><optionvalue=\"Bob\">Bob</option></select></label><textareaplaceholder=\"Message\"value={message}onChange={e=>setMessage(e.target.value)}/><buttontype=\"submit\">Send</button></form>);}\n```\n\n\nReact keeps the state values \u201cfixed\u201d within one render\u2019s event handlers. You don\u2019t need to worry whether the state has changed while the code is running.\n\nBut what if you wanted to read the latest state before a re-render? You\u2019ll want to use a state updater function , covered on the next page!", "source": "https://react.dev/learn/state-as-a-snapshot", "category": "State as a Snapshot"}
{"instruction": "Show me a code example of State over time in React.", "input": "", "output": "Well, that was fun. Try to guess what clicking this button will alert:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionCounter(){const[number,setNumber]=useState(0);return(<><h1>{number}</h1><buttononClick={()=>{setNumber(number+5);alert(number);}}>+5</button></>)}\n```\n\n\nIf you use the substitution method from before, you can guess that the alert shows \u201c0\u201d:\n\n\n```javascript\nsetNumber(0+5);alert(0);\n```\n\n\nBut what if you put a timer on the alert, so it only fires after the component re-rendered? Would it say \u201c0\u201d or \u201c5\u201d? Have a guess!\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionCounter(){const[number,setNumber]=useState(0);return(<><h1>{number}</h1><buttononClick={()=>{setNumber(number+5);setTimeout(()=>{alert(number);},3000);}}>+5</button></>)}\n```\n\n\nSurprised? If you use the substitution method, you can see the \u201csnapshot\u201d of the state passed to the alert.\n\n\n```javascript\nsetNumber(0+5);setTimeout(()=>{alert(0);},3000);\n```\n\n\nThe state stored in React may have changed by the time the alert runs, but it was scheduled using a snapshot of the state at the time the user interacted with it!\n\nA state variable\u2019s value never changes within a render, even if its event handler\u2019s code is asynchronous. Inside that render\u2019s onClick , the value of number continues to be 0 even after setNumber(number + 5) was called. Its value was \u201cfixed\u201d when React \u201ctook the snapshot\u201d of the UI by calling your component.\n\nHere is an example of how that makes your event handlers less prone to timing mistakes. Below is a form that sends a message with a five-second delay. Imagine this scenario:\n\n1. You press the \u201cSend\u201d button, sending \u201cHello\u201d to Alice.\n2. Before the five-second delay ends, you change the value of the \u201cTo\u201d field to \u201cBob\u201d.\n\nWhat do you expect the alert to display? Would it display, \u201cYou said Hello to Alice\u201d? Or would it display, \u201cYou said Hello to Bob\u201d? Make a guess based on what you know, and then try it:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[to,setTo]=useState('Alice');const[message,setMessage]=useState('Hello');functionhandleSubmit(e){e.preventDefault();setTimeout(()=>{alert(`You said${message}to${to}`);},5000);}return(<formonSubmit={handleSubmit}><label>To:{' '}<selectvalue={to}onChange={e=>setTo(e.target.value)}><optionvalue=\"Alice\">Alice</option><optionvalue=\"Bob\">Bob</option></select></label><textareaplaceholder=\"Message\"value={message}onChange={e=>setMessage(e.target.value)}/><buttontype=\"submit\">Send</button></form>);}\n```\n\n\nReact keeps the state values \u201cfixed\u201d within one render\u2019s event handlers. You don\u2019t need to worry whether the state has changed while the code is running.\n\nBut what if you wanted to read the latest state before a re-render? You\u2019ll want to use a state updater function , covered on the next page!", "source": "https://react.dev/learn/state-as-a-snapshot", "category": "State as a Snapshot"}
{"instruction": "Can you describe What are Effects and how are they different from events? in the context of React?", "input": "", "output": "Before getting to Effects, you need to be familiar with two types of logic inside React components:\n\n* Rendering code (introduced in Describing the UI ) lives at the top level of your component. This is where you take the props and state, transform them, and return the JSX you want to see on the screen. Rendering code must be pure. Like a math formula, it should only calculate the result, but not do anything else.\n* Event handlers (introduced in Adding Interactivity ) are nested functions inside your components that do things rather than just calculate them. An event handler might update an input field, submit an HTTP POST request to buy a product, or navigate the user to another screen. Event handlers contain \u201cside effects\u201d (they change the program\u2019s state) caused by a specific user action (for example, a button click or typing).\n\nRendering code (introduced in Describing the UI ) lives at the top level of your component. This is where you take the props and state, transform them, and return the JSX you want to see on the screen. Rendering code must be pure. Like a math formula, it should only calculate the result, but not do anything else.\n\nEvent handlers (introduced in Adding Interactivity ) are nested functions inside your components that do things rather than just calculate them. An event handler might update an input field, submit an HTTP POST request to buy a product, or navigate the user to another screen. Event handlers contain \u201cside effects\u201d (they change the program\u2019s state) caused by a specific user action (for example, a button click or typing).\n\nSometimes this isn\u2019t enough. Consider a ChatRoom component that must connect to the chat server whenever it\u2019s visible on the screen. Connecting to a server is not a pure calculation (it\u2019s a side effect) so it can\u2019t happen during rendering. However, there is no single particular event like a click that causes ChatRoom to be displayed.\n\nEffects let you specify side effects that are caused by rendering itself, rather than by a particular event. Sending a message in the chat is an event because it is directly caused by the user clicking a specific button. However, setting up a server connection is an Effect because it should happen no matter which interaction caused the component to appear. Effects run at the end of a commit after the screen updates. This is a good time to synchronize the React components with some external system (like network or a third-party library).\n\n\n### Note\n\n\nHere and later in this text, capitalized \u201cEffect\u201d refers to the React-specific definition above, i.e. a side effect caused by rendering. To refer to the broader programming concept, we\u2019ll say \u201cside effect\u201d.", "source": "https://react.dev/learn/synchronizing-with-effects", "category": "Synchronizing with Effects"}
{"instruction": "Tell me about You might not need an Effect.", "input": "", "output": "Don\u2019t rush to add Effects to your components. Keep in mind that Effects are typically used to \u201cstep out\u201d of your React code and synchronize with some external system. This includes browser APIs, third-party widgets, network, and so on. If your Effect only adjusts some state based on other state, you might not need an Effect.", "source": "https://react.dev/learn/synchronizing-with-effects", "category": "Synchronizing with Effects"}
{"instruction": "Can you describe How to write an Effect in the context of React?", "input": "", "output": "To write an Effect, follow these three steps:\n\n1. Declare an Effect. By default, your Effect will run after every commit .\n2. Specify the Effect dependencies. Most Effects should only re-run when needed rather than after every render. For example, a fade-in animation should only trigger when a component appears. Connecting and disconnecting to a chat room should only happen when the component appears and disappears, or when the chat room changes. You will learn how to control this by specifying dependencies.\n3. Add cleanup if needed. Some Effects need to specify how to stop, undo, or clean up whatever they were doing. For example, \u201cconnect\u201d needs \u201cdisconnect\u201d, \u201csubscribe\u201d needs \u201cunsubscribe\u201d, and \u201cfetch\u201d needs either \u201ccancel\u201d or \u201cignore\u201d. You will learn how to do this by returning a cleanup function .\n\nLet\u2019s look at each of these steps in detail.\n\n\n### Step 1: Declare an Effect\n\n\nTo declare an Effect in your component, import the useEffect Hook from React:\n\n\n```javascript\nimport{useEffect}from'react';\n```\n\n\nThen, call it at the top level of your component and put some code inside your Effect:\n\n\n```javascript\nfunctionMyComponent(){useEffect(()=>{// Code here will run after *every* render});return<div/>;}\n```\n\n\nEvery time your component renders, React will update the screen and then run the code inside useEffect . In other words, useEffect \u201cdelays\u201d a piece of code from running until that render is reflected on the screen.\n\nLet\u2019s see how you can use an Effect to synchronize with an external system. Consider a <VideoPlayer> React component. It would be nice to control whether it\u2019s playing or paused by passing an isPlaying prop to it:\n\n\n```javascript\n<VideoPlayerisPlaying={isPlaying}/>;\n```\n\n\nYour custom VideoPlayer component renders the built-in browser <video> tag:\n\n\n```javascript\nfunctionVideoPlayer({src,isPlaying}){// TODO: do something with isPlayingreturn<videosrc={src}/>;}\n```\n\n\nHowever, the browser <video> tag does not have an isPlaying prop. The only way to control it is to manually call the play() and pause() methods on the DOM element. You need to synchronize the value of isPlaying prop, which tells whether the video should currently be playing, with calls like play() and pause() .\n\nWe\u2019ll need to first get a ref to the <video> DOM node.\n\nYou might be tempted to try to call play() or pause() during rendering, but that isn\u2019t correct:\n\n\n```javascript\nimport{useState,useRef,useEffect}from'react';functionVideoPlayer({src,isPlaying}){constref=useRef(null);if(isPlaying){ref.current.play();// Calling these while rendering isn't allowed.}else{ref.current.pause();// Also, this crashes.}return<videoref={ref}src={src}loopplaysInline/>;}exportdefaultfunctionApp(){const[isPlaying,setIsPlaying]=useState(false);return(<><buttononClick={()=>setIsPlaying(!isPlaying)}>{isPlaying?'Pause':'Play'}</button><VideoPlayerisPlaying={isPlaying}src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"/></>);}\n```\n\n\nThe reason this code isn\u2019t correct is that it tries to do something with the DOM node during rendering. In React, rendering should be a pure calculation of JSX and should not contain side effects like modifying the DOM.\n\nMoreover, when VideoPlayer is called for the first time, its DOM does not exist yet! There isn\u2019t a DOM node yet to call play() or pause() on, because React doesn\u2019t know what DOM to create until you return the JSX.\n\nThe solution here is to wrap the side effect with useEffect to move it out of the rendering calculation:\n\n\n```javascript\nimport{useEffect,useRef}from'react';functionVideoPlayer({src,isPlaying}){constref=useRef(null);useEffect(()=>{if(isPlaying){ref.current.play();}else{ref.current.pause();}});return<videoref={ref}src={src}loopplaysInline/>;}\n```\n\n\nBy wrapping the DOM update in an Effect, you let React update the screen first. Then your Effect runs.\n\nWhen your VideoPlayer component renders (either the first time or if it re-renders), a few things will happen. First, React will update the screen, ensuring the <video> tag is in the DOM with the right props. Then React will run your Effect. Finally, your Effect will call play() or pause() depending on the value of isPlaying .\n\nPress Play/Pause multiple times and see how the video player stays synchronized to the isPlaying value:\n\n\n```javascript\nimport{useState,useRef,useEffect}from'react';functionVideoPlayer({src,isPlaying}){constref=useRef(null);useEffect(()=>{if(isPlaying){ref.current.play();}else{ref.current.pause();}});return<videoref={ref}src={src}loopplaysInline/>;}exportdefaultfunctionApp(){const[isPlaying,setIsPlaying]=useState(false);return(<><buttononClick={()=>setIsPlaying(!isPlaying)}>{isPlaying?'Pause':'Play'}</button><VideoPlayerisPlaying={isPlaying}src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"/></>);}\n```\n\n\nIn this example, the \u201cexternal system\u201d you synchronized to React state was the browser media API. You can use a similar approach to wrap legacy non-React code (like jQuery plugins) into declarative React components.\n\nNote that controlling a video player is much more complex in practice. Calling play() may fail, the user might play or pause using the built-in browser controls, and so on. This example is very simplified and incomplete.\n\n\n### Pitfall\n\n\nBy default, Effects run after every render. This is why code like this will produce an infinite loop:\n\n\n```javascript\nconst[count,setCount]=useState(0);useEffect(()=>{setCount(count+1);});\n```\n\n\nEffects run as a result of rendering. Setting state triggers rendering. Setting state immediately in an Effect is like plugging a power outlet into itself. The Effect runs, it sets the state, which causes a re-render, which causes the Effect to run, it sets the state again, this causes another re-render, and so on.\n\nEffects should usually synchronize your components with an external system. If there\u2019s no external system and you only want to adjust some state based on other state, you might not need an Effect.\n\n\n### Step 2: Specify the Effect dependencies\n\n\nBy default, Effects run after every render. Often, this is not what you want:\n\n* Sometimes, it\u2019s slow. Synchronizing with an external system is not always instant, so you might want to skip doing it unless it\u2019s necessary. For example, you don\u2019t want to reconnect to the chat server on every keystroke.\n* Sometimes, it\u2019s wrong. For example, you don\u2019t want to trigger a component fade-in animation on every keystroke. The animation should only play once when the component appears for the first time.\n\nTo demonstrate the issue, here is the previous example with a few console.log calls and a text input that updates the parent component\u2019s state. Notice how typing causes the Effect to re-run:\n\n\n```javascript\nimport{useState,useRef,useEffect}from'react';functionVideoPlayer({src,isPlaying}){constref=useRef(null);useEffect(()=>{if(isPlaying){console.log('Calling video.play()');ref.current.play();}else{console.log('Calling video.pause()');ref.current.pause();}});return<videoref={ref}src={src}loopplaysInline/>;}exportdefaultfunctionApp(){const[isPlaying,setIsPlaying]=useState(false);const[text,setText]=useState('');return(<><inputvalue={text}onChange={e=>setText(e.target.value)}/><buttononClick={()=>setIsPlaying(!isPlaying)}>{isPlaying?'Pause':'Play'}</button><VideoPlayerisPlaying={isPlaying}src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"/></>);}\n```\n\n\nYou can tell React to skip unnecessarily re-running the Effect by specifying an array of dependencies as the second argument to the useEffect call. Start by adding an empty [] array to the above example on line 14:\n\n\n```javascript\nuseEffect(()=>{// ...},[]);\n```\n\n\nYou should see an error saying React Hook useEffect has a missing dependency: 'isPlaying' :\n\n\n```javascript\nimport{useState,useRef,useEffect}from'react';functionVideoPlayer({src,isPlaying}){constref=useRef(null);useEffect(()=>{if(isPlaying){console.log('Calling video.play()');ref.current.play();}else{console.log('Calling video.pause()');ref.current.pause();}},[]);// This causes an errorreturn<videoref={ref}src={src}loopplaysInline/>;}exportdefaultfunctionApp(){const[isPlaying,setIsPlaying]=useState(false);const[text,setText]=useState('');return(<><inputvalue={text}onChange={e=>setText(e.target.value)}/><buttononClick={()=>setIsPlaying(!isPlaying)}>{isPlaying?'Pause':'Play'}</button><VideoPlayerisPlaying={isPlaying}src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"/></>);}\n```\n\n\nThe problem is that the code inside of your Effect depends on the isPlaying prop to decide what to do, but this dependency was not explicitly declared. To fix this issue, add isPlaying to the dependency array:\n\n\n```javascript\nuseEffect(()=>{if(isPlaying){// It's used here...// ...}else{// ...}},[isPlaying]);// ...so it must be declared here!\n```\n\n\nNow all dependencies are declared, so there is no error. Specifying [isPlaying] as the dependency array tells React that it should skip re-running your Effect if isPlaying is the same as it was during the previous render. With this change, typing into the input doesn\u2019t cause the Effect to re-run, but pressing Play/Pause does:\n\n\n```javascript\nimport{useState,useRef,useEffect}from'react';functionVideoPlayer({src,isPlaying}){constref=useRef(null);useEffect(()=>{if(isPlaying){console.log('Calling video.play()');ref.current.play();}else{console.log('Calling video.pause()');ref.current.pause();}},[isPlaying]);return<videoref={ref}src={src}loopplaysInline/>;}exportdefaultfunctionApp(){const[isPlaying,setIsPlaying]=useState(false);const[text,setText]=useState('');return(<><inputvalue={text}onChange={e=>setText(e.target.value)}/><buttononClick={()=>setIsPlaying(!isPlaying)}>{isPlaying?'Pause':'Play'}</button><VideoPlayerisPlaying={isPlaying}src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"/></>);}\n```\n\n\nThe dependency array can contain multiple dependencies. React will only skip re-running the Effect if all of the dependencies you specify have exactly the same values as they had during the previous render. React compares the dependency values using the Object.is comparison. See the useEffect reference for details.\n\nNotice that you can\u2019t \u201cchoose\u201d your dependencies. You will get a lint error if the dependencies you specified don\u2019t match what React expects based on the code inside your Effect. This helps catch many bugs in your code. If you don\u2019t want some code to re-run, edit the Effect code itself to not \u201cneed\u201d that dependency.\n\n\n### Pitfall\n\n\nThe behaviors without the dependency array and with an empty [] dependency array are different:\n\n\n```javascript\nuseEffect(()=>{// This runs after every render});useEffect(()=>{// This runs only on mount (when the component appears)},[]);useEffect(()=>{// This runs on mount *and also* if either a or b have changed since the last render},[a,b]);\n```\n\n\nWe\u2019ll take a close look at what \u201cmount\u201d means in the next step.\n\nThis Effect uses both ref and isPlaying , but only isPlaying is declared as a dependency:\n\n\n```javascript\nfunctionVideoPlayer({src,isPlaying}){constref=useRef(null);useEffect(()=>{if(isPlaying){ref.current.play();}else{ref.current.pause();}},[isPlaying]);\n```\n\n\nThis is because the ref object has a stable identity: React guarantees you\u2019ll always get the same object from the same useRef call on every render. It never changes, so it will never by itself cause the Effect to re-run. Therefore, it does not matter whether you include it or not. Including it is fine too:\n\n\n```javascript\nfunctionVideoPlayer({src,isPlaying}){constref=useRef(null);useEffect(()=>{if(isPlaying){ref.current.play();}else{ref.current.pause();}},[isPlaying,ref]);\n```\n\n\nThe set functions returned by useState also have stable identity, so you will often see them omitted from the dependencies too. If the linter lets you omit a dependency without errors, it is safe to do.\n\nOmitting always-stable dependencies only works when the linter can \u201csee\u201d that the object is stable. For example, if ref was passed from a parent component, you would have to specify it in the dependency array. However, this is good because you can\u2019t know whether the parent component always passes the same ref, or passes one of several refs conditionally. So your Effect would depend on which ref is passed.\n\n\n### Step 3: Add cleanup if needed\n\n\nConsider a different example. You\u2019re writing a ChatRoom component that needs to connect to the chat server when it appears. You are given a createConnection() API that returns an object with connect() and disconnect() methods. How do you keep the component connected while it is displayed to the user?\n\nStart by writing the Effect logic:\n\n\n```javascript\nuseEffect(()=>{constconnection=createConnection();connection.connect();});\n```\n\n\nIt would be slow to connect to the chat after every re-render, so you add the dependency array:\n\n\n```javascript\nuseEffect(()=>{constconnection=createConnection();connection.connect();},[]);\n```\n\n\nThe code inside the Effect does not use any props or state, so your dependency array is [] (empty). This tells React to only run this code when the component \u201cmounts\u201d, i.e. appears on the screen for the first time.\n\nLet\u2019s try running this code:\n\n\n```javascript\nimport{useEffect}from'react';import{createConnection}from'./chat.js';exportdefaultfunctionChatRoom(){useEffect(()=>{constconnection=createConnection();connection.connect();},[]);return<h1>Welcome to the chat!</h1>;}\n```\n\n\nThis Effect only runs on mount, so you might expect \"\u2705 Connecting...\" to be printed once in the console. However, if you check the console, \"\u2705 Connecting...\" gets printed twice. Why does it happen?\n\nImagine the ChatRoom component is a part of a larger app with many different screens. The user starts their journey on the ChatRoom page. The component mounts and calls connection.connect() . Then imagine the user navigates to another screen\u2014for example, to the Settings page. The ChatRoom component unmounts. Finally, the user clicks Back and ChatRoom mounts again. This would set up a second connection\u2014but the first connection was never destroyed! As the user navigates across the app, the connections would keep piling up.\n\nBugs like this are easy to miss without extensive manual testing. To help you spot them quickly, in development React remounts every component once immediately after its initial mount.\n\nSeeing the \"\u2705 Connecting...\" log twice helps you notice the real issue: your code doesn\u2019t close the connection when the component unmounts.\n\nTo fix the issue, return a cleanup function from your Effect:\n\n\n```javascript\nuseEffect(()=>{constconnection=createConnection();connection.connect();return()=>{connection.disconnect();};},[]);\n```\n\n\nReact will call your cleanup function each time before the Effect runs again, and one final time when the component unmounts (gets removed). Let\u2019s see what happens when the cleanup function is implemented:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';exportdefaultfunctionChatRoom(){useEffect(()=>{constconnection=createConnection();connection.connect();return()=>connection.disconnect();},[]);return<h1>Welcome to the chat!</h1>;}\n```\n\n\nNow you get three console logs in development:\n\n1. \"\u2705 Connecting...\"\n2. \"\u274c Disconnected.\"\n3. \"\u2705 Connecting...\"\n\nThis is the correct behavior in development. By remounting your component, React verifies that navigating away and back would not break your code. Disconnecting and then connecting again is exactly what should happen! When you implement the cleanup well, there should be no user-visible difference between running the Effect once vs running it, cleaning it up, and running it again. There\u2019s an extra connect/disconnect call pair because React is probing your code for bugs in development. This is normal\u2014don\u2019t try to make it go away!\n\nIn production, you would only see \"\u2705 Connecting...\" printed once. Remounting components only happens in development to help you find Effects that need cleanup. You can turn off Strict Mode to opt out of the development behavior, but we recommend keeping it on. This lets you find many bugs like the one above.", "source": "https://react.dev/learn/synchronizing-with-effects", "category": "Synchronizing with Effects"}
{"instruction": "Show me a code example of How to write an Effect in React.", "input": "", "output": "To write an Effect, follow these three steps:\n\n1. Declare an Effect. By default, your Effect will run after every commit .\n2. Specify the Effect dependencies. Most Effects should only re-run when needed rather than after every render. For example, a fade-in animation should only trigger when a component appears. Connecting and disconnecting to a chat room should only happen when the component appears and disappears, or when the chat room changes. You will learn how to control this by specifying dependencies.\n3. Add cleanup if needed. Some Effects need to specify how to stop, undo, or clean up whatever they were doing. For example, \u201cconnect\u201d needs \u201cdisconnect\u201d, \u201csubscribe\u201d needs \u201cunsubscribe\u201d, and \u201cfetch\u201d needs either \u201ccancel\u201d or \u201cignore\u201d. You will learn how to do this by returning a cleanup function .\n\nLet\u2019s look at each of these steps in detail.\n\n\n### Step 1: Declare an Effect\n\n\nTo declare an Effect in your component, import the useEffect Hook from React:\n\n\n```javascript\nimport{useEffect}from'react';\n```\n\n\nThen, call it at the top level of your component and put some code inside your Effect:\n\n\n```javascript\nfunctionMyComponent(){useEffect(()=>{// Code here will run after *every* render});return<div/>;}\n```\n\n\nEvery time your component renders, React will update the screen and then run the code inside useEffect . In other words, useEffect \u201cdelays\u201d a piece of code from running until that render is reflected on the screen.\n\nLet\u2019s see how you can use an Effect to synchronize with an external system. Consider a <VideoPlayer> React component. It would be nice to control whether it\u2019s playing or paused by passing an isPlaying prop to it:\n\n\n```javascript\n<VideoPlayerisPlaying={isPlaying}/>;\n```\n\n\nYour custom VideoPlayer component renders the built-in browser <video> tag:\n\n\n```javascript\nfunctionVideoPlayer({src,isPlaying}){// TODO: do something with isPlayingreturn<videosrc={src}/>;}\n```\n\n\nHowever, the browser <video> tag does not have an isPlaying prop. The only way to control it is to manually call the play() and pause() methods on the DOM element. You need to synchronize the value of isPlaying prop, which tells whether the video should currently be playing, with calls like play() and pause() .\n\nWe\u2019ll need to first get a ref to the <video> DOM node.\n\nYou might be tempted to try to call play() or pause() during rendering, but that isn\u2019t correct:\n\n\n```javascript\nimport{useState,useRef,useEffect}from'react';functionVideoPlayer({src,isPlaying}){constref=useRef(null);if(isPlaying){ref.current.play();// Calling these while rendering isn't allowed.}else{ref.current.pause();// Also, this crashes.}return<videoref={ref}src={src}loopplaysInline/>;}exportdefaultfunctionApp(){const[isPlaying,setIsPlaying]=useState(false);return(<><buttononClick={()=>setIsPlaying(!isPlaying)}>{isPlaying?'Pause':'Play'}</button><VideoPlayerisPlaying={isPlaying}src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"/></>);}\n```\n\n\nThe reason this code isn\u2019t correct is that it tries to do something with the DOM node during rendering. In React, rendering should be a pure calculation of JSX and should not contain side effects like modifying the DOM.\n\nMoreover, when VideoPlayer is called for the first time, its DOM does not exist yet! There isn\u2019t a DOM node yet to call play() or pause() on, because React doesn\u2019t know what DOM to create until you return the JSX.\n\nThe solution here is to wrap the side effect with useEffect to move it out of the rendering calculation:\n\n\n```javascript\nimport{useEffect,useRef}from'react';functionVideoPlayer({src,isPlaying}){constref=useRef(null);useEffect(()=>{if(isPlaying){ref.current.play();}else{ref.current.pause();}});return<videoref={ref}src={src}loopplaysInline/>;}\n```\n\n\nBy wrapping the DOM update in an Effect, you let React update the screen first. Then your Effect runs.\n\nWhen your VideoPlayer component renders (either the first time or if it re-renders), a few things will happen. First, React will update the screen, ensuring the <video> tag is in the DOM with the right props. Then React will run your Effect. Finally, your Effect will call play() or pause() depending on the value of isPlaying .\n\nPress Play/Pause multiple times and see how the video player stays synchronized to the isPlaying value:\n\n\n```javascript\nimport{useState,useRef,useEffect}from'react';functionVideoPlayer({src,isPlaying}){constref=useRef(null);useEffect(()=>{if(isPlaying){ref.current.play();}else{ref.current.pause();}});return<videoref={ref}src={src}loopplaysInline/>;}exportdefaultfunctionApp(){const[isPlaying,setIsPlaying]=useState(false);return(<><buttononClick={()=>setIsPlaying(!isPlaying)}>{isPlaying?'Pause':'Play'}</button><VideoPlayerisPlaying={isPlaying}src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"/></>);}\n```\n\n\nIn this example, the \u201cexternal system\u201d you synchronized to React state was the browser media API. You can use a similar approach to wrap legacy non-React code (like jQuery plugins) into declarative React components.\n\nNote that controlling a video player is much more complex in practice. Calling play() may fail, the user might play or pause using the built-in browser controls, and so on. This example is very simplified and incomplete.\n\n\n### Pitfall\n\n\nBy default, Effects run after every render. This is why code like this will produce an infinite loop:\n\n\n```javascript\nconst[count,setCount]=useState(0);useEffect(()=>{setCount(count+1);});\n```\n\n\nEffects run as a result of rendering. Setting state triggers rendering. Setting state immediately in an Effect is like plugging a power outlet into itself. The Effect runs, it sets the state, which causes a re-render, which causes the Effect to run, it sets the state again, this causes another re-render, and so on.\n\nEffects should usually synchronize your components with an external system. If there\u2019s no external system and you only want to adjust some state based on other state, you might not need an Effect.\n\n\n### Step 2: Specify the Effect dependencies\n\n\nBy default, Effects run after every render. Often, this is not what you want:\n\n* Sometimes, it\u2019s slow. Synchronizing with an external system is not always instant, so you might want to skip doing it unless it\u2019s necessary. For example, you don\u2019t want to reconnect to the chat server on every keystroke.\n* Sometimes, it\u2019s wrong. For example, you don\u2019t want to trigger a component fade-in animation on every keystroke. The animation should only play once when the component appears for the first time.\n\nTo demonstrate the issue, here is the previous example with a few console.log calls and a text input that updates the parent component\u2019s state. Notice how typing causes the Effect to re-run:\n\n\n```javascript\nimport{useState,useRef,useEffect}from'react';functionVideoPlayer({src,isPlaying}){constref=useRef(null);useEffect(()=>{if(isPlaying){console.log('Calling video.play()');ref.current.play();}else{console.log('Calling video.pause()');ref.current.pause();}});return<videoref={ref}src={src}loopplaysInline/>;}exportdefaultfunctionApp(){const[isPlaying,setIsPlaying]=useState(false);const[text,setText]=useState('');return(<><inputvalue={text}onChange={e=>setText(e.target.value)}/><buttononClick={()=>setIsPlaying(!isPlaying)}>{isPlaying?'Pause':'Play'}</button><VideoPlayerisPlaying={isPlaying}src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"/></>);}\n```\n\n\nYou can tell React to skip unnecessarily re-running the Effect by specifying an array of dependencies as the second argument to the useEffect call. Start by adding an empty [] array to the above example on line 14:\n\n\n```javascript\nuseEffect(()=>{// ...},[]);\n```\n\n\nYou should see an error saying React Hook useEffect has a missing dependency: 'isPlaying' :\n\n\n```javascript\nimport{useState,useRef,useEffect}from'react';functionVideoPlayer({src,isPlaying}){constref=useRef(null);useEffect(()=>{if(isPlaying){console.log('Calling video.play()');ref.current.play();}else{console.log('Calling video.pause()');ref.current.pause();}},[]);// This causes an errorreturn<videoref={ref}src={src}loopplaysInline/>;}exportdefaultfunctionApp(){const[isPlaying,setIsPlaying]=useState(false);const[text,setText]=useState('');return(<><inputvalue={text}onChange={e=>setText(e.target.value)}/><buttononClick={()=>setIsPlaying(!isPlaying)}>{isPlaying?'Pause':'Play'}</button><VideoPlayerisPlaying={isPlaying}src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"/></>);}\n```\n\n\nThe problem is that the code inside of your Effect depends on the isPlaying prop to decide what to do, but this dependency was not explicitly declared. To fix this issue, add isPlaying to the dependency array:\n\n\n```javascript\nuseEffect(()=>{if(isPlaying){// It's used here...// ...}else{// ...}},[isPlaying]);// ...so it must be declared here!\n```\n\n\nNow all dependencies are declared, so there is no error. Specifying [isPlaying] as the dependency array tells React that it should skip re-running your Effect if isPlaying is the same as it was during the previous render. With this change, typing into the input doesn\u2019t cause the Effect to re-run, but pressing Play/Pause does:\n\n\n```javascript\nimport{useState,useRef,useEffect}from'react';functionVideoPlayer({src,isPlaying}){constref=useRef(null);useEffect(()=>{if(isPlaying){console.log('Calling video.play()');ref.current.play();}else{console.log('Calling video.pause()');ref.current.pause();}},[isPlaying]);return<videoref={ref}src={src}loopplaysInline/>;}exportdefaultfunctionApp(){const[isPlaying,setIsPlaying]=useState(false);const[text,setText]=useState('');return(<><inputvalue={text}onChange={e=>setText(e.target.value)}/><buttononClick={()=>setIsPlaying(!isPlaying)}>{isPlaying?'Pause':'Play'}</button><VideoPlayerisPlaying={isPlaying}src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"/></>);}\n```\n\n\nThe dependency array can contain multiple dependencies. React will only skip re-running the Effect if all of the dependencies you specify have exactly the same values as they had during the previous render. React compares the dependency values using the Object.is comparison. See the useEffect reference for details.\n\nNotice that you can\u2019t \u201cchoose\u201d your dependencies. You will get a lint error if the dependencies you specified don\u2019t match what React expects based on the code inside your Effect. This helps catch many bugs in your code. If you don\u2019t want some code to re-run, edit the Effect code itself to not \u201cneed\u201d that dependency.\n\n\n### Pitfall\n\n\nThe behaviors without the dependency array and with an empty [] dependency array are different:\n\n\n```javascript\nuseEffect(()=>{// This runs after every render});useEffect(()=>{// This runs only on mount (when the component appears)},[]);useEffect(()=>{// This runs on mount *and also* if either a or b have changed since the last render},[a,b]);\n```\n\n\nWe\u2019ll take a close look at what \u201cmount\u201d means in the next step.\n\nThis Effect uses both ref and isPlaying , but only isPlaying is declared as a dependency:\n\n\n```javascript\nfunctionVideoPlayer({src,isPlaying}){constref=useRef(null);useEffect(()=>{if(isPlaying){ref.current.play();}else{ref.current.pause();}},[isPlaying]);\n```\n\n\nThis is because the ref object has a stable identity: React guarantees you\u2019ll always get the same object from the same useRef call on every render. It never changes, so it will never by itself cause the Effect to re-run. Therefore, it does not matter whether you include it or not. Including it is fine too:\n\n\n```javascript\nfunctionVideoPlayer({src,isPlaying}){constref=useRef(null);useEffect(()=>{if(isPlaying){ref.current.play();}else{ref.current.pause();}},[isPlaying,ref]);\n```\n\n\nThe set functions returned by useState also have stable identity, so you will often see them omitted from the dependencies too. If the linter lets you omit a dependency without errors, it is safe to do.\n\nOmitting always-stable dependencies only works when the linter can \u201csee\u201d that the object is stable. For example, if ref was passed from a parent component, you would have to specify it in the dependency array. However, this is good because you can\u2019t know whether the parent component always passes the same ref, or passes one of several refs conditionally. So your Effect would depend on which ref is passed.\n\n\n### Step 3: Add cleanup if needed\n\n\nConsider a different example. You\u2019re writing a ChatRoom component that needs to connect to the chat server when it appears. You are given a createConnection() API that returns an object with connect() and disconnect() methods. How do you keep the component connected while it is displayed to the user?\n\nStart by writing the Effect logic:\n\n\n```javascript\nuseEffect(()=>{constconnection=createConnection();connection.connect();});\n```\n\n\nIt would be slow to connect to the chat after every re-render, so you add the dependency array:\n\n\n```javascript\nuseEffect(()=>{constconnection=createConnection();connection.connect();},[]);\n```\n\n\nThe code inside the Effect does not use any props or state, so your dependency array is [] (empty). This tells React to only run this code when the component \u201cmounts\u201d, i.e. appears on the screen for the first time.\n\nLet\u2019s try running this code:\n\n\n```javascript\nimport{useEffect}from'react';import{createConnection}from'./chat.js';exportdefaultfunctionChatRoom(){useEffect(()=>{constconnection=createConnection();connection.connect();},[]);return<h1>Welcome to the chat!</h1>;}\n```\n\n\nThis Effect only runs on mount, so you might expect \"\u2705 Connecting...\" to be printed once in the console. However, if you check the console, \"\u2705 Connecting...\" gets printed twice. Why does it happen?\n\nImagine the ChatRoom component is a part of a larger app with many different screens. The user starts their journey on the ChatRoom page. The component mounts and calls connection.connect() . Then imagine the user navigates to another screen\u2014for example, to the Settings page. The ChatRoom component unmounts. Finally, the user clicks Back and ChatRoom mounts again. This would set up a second connection\u2014but the first connection was never destroyed! As the user navigates across the app, the connections would keep piling up.\n\nBugs like this are easy to miss without extensive manual testing. To help you spot them quickly, in development React remounts every component once immediately after its initial mount.\n\nSeeing the \"\u2705 Connecting...\" log twice helps you notice the real issue: your code doesn\u2019t close the connection when the component unmounts.\n\nTo fix the issue, return a cleanup function from your Effect:\n\n\n```javascript\nuseEffect(()=>{constconnection=createConnection();connection.connect();return()=>{connection.disconnect();};},[]);\n```\n\n\nReact will call your cleanup function each time before the Effect runs again, and one final time when the component unmounts (gets removed). Let\u2019s see what happens when the cleanup function is implemented:\n\n\n```javascript\nimport{useState,useEffect}from'react';import{createConnection}from'./chat.js';exportdefaultfunctionChatRoom(){useEffect(()=>{constconnection=createConnection();connection.connect();return()=>connection.disconnect();},[]);return<h1>Welcome to the chat!</h1>;}\n```\n\n\nNow you get three console logs in development:\n\n1. \"\u2705 Connecting...\"\n2. \"\u274c Disconnected.\"\n3. \"\u2705 Connecting...\"\n\nThis is the correct behavior in development. By remounting your component, React verifies that navigating away and back would not break your code. Disconnecting and then connecting again is exactly what should happen! When you implement the cleanup well, there should be no user-visible difference between running the Effect once vs running it, cleaning it up, and running it again. There\u2019s an extra connect/disconnect call pair because React is probing your code for bugs in development. This is normal\u2014don\u2019t try to make it go away!\n\nIn production, you would only see \"\u2705 Connecting...\" printed once. Remounting components only happens in development to help you find Effects that need cleanup. You can turn off Strict Mode to opt out of the development behavior, but we recommend keeping it on. This lets you find many bugs like the one above.", "source": "https://react.dev/learn/synchronizing-with-effects", "category": "Synchronizing with Effects"}
{"instruction": "What is How to handle the Effect firing twice in development? in React and how does it work?", "input": "", "output": "React intentionally remounts your components in development to find bugs like in the last example. The right question isn\u2019t \u201chow to run an Effect once\u201d, but \u201chow to fix my Effect so that it works after remounting\u201d.\n\nUsually, the answer is to implement the cleanup function.  The cleanup function should stop or undo whatever the Effect was doing. The rule of thumb is that the user shouldn\u2019t be able to distinguish between the Effect running once (as in production) and a setup \u2192 cleanup \u2192 setup sequence (as you\u2019d see in development).\n\nMost of the Effects you\u2019ll write will fit into one of the common patterns below.\n\n\n### Pitfall\n\n\nA common pitfall for preventing Effects firing twice in development is to use a ref to prevent the Effect from running more than once. For example, you could \u201cfix\u201d the above bug with a useRef :\n\n\n```javascript\nconstconnectionRef=useRef(null);useEffect(()=>{// \ud83d\udea9 This wont fix the bug!!!if(!connectionRef.current){connectionRef.current=createConnection();connectionRef.current.connect();}},[]);\n```\n\n\nThis makes it so you only see \"\u2705 Connecting...\" once in development, but it doesn\u2019t fix the bug.\n\nWhen the user navigates away, the connection still isn\u2019t closed and when they navigate back, a new connection is created. As the user navigates across the app, the connections would keep piling up, the same as it would before the \u201cfix\u201d.\n\nTo fix the bug, it is not enough to just make the Effect run once. The effect needs to work after re-mounting, which means the connection needs to be cleaned up like in the solution above.\n\nSee the examples below for how to handle common patterns.\n\n\n### Controlling non-React widgets\n\n\nSometimes you need to add UI widgets that aren\u2019t written in React. For example, let\u2019s say you\u2019re adding a map component to your page. It has a setZoomLevel() method, and you\u2019d like to keep the zoom level in sync with a zoomLevel state variable in your React code. Your Effect would look similar to this:\n\n\n```javascript\nuseEffect(()=>{constmap=mapRef.current;map.setZoomLevel(zoomLevel);},[zoomLevel]);\n```\n\n\nNote that there is no cleanup needed in this case. In development, React will call the Effect twice, but this is not a problem because calling setZoomLevel twice with the same value does not do anything. It may be slightly slower, but this doesn\u2019t matter because it won\u2019t remount needlessly in production.\n\nSome APIs may not allow you to call them twice in a row. For example, the showModal method of the built-in <dialog> element throws if you call it twice. Implement the cleanup function and make it close the dialog:\n\n\n```javascript\nuseEffect(()=>{constdialog=dialogRef.current;dialog.showModal();return()=>dialog.close();},[]);\n```\n\n\nIn development, your Effect will call showModal() , then immediately close() , and then showModal() again. This has the same user-visible behavior as calling showModal() once, as you would see in production.\n\n\n### Subscribing to events\n\n\nIf your Effect subscribes to something, the cleanup function should unsubscribe:\n\n\n```javascript\nuseEffect(()=>{functionhandleScroll(e){console.log(window.scrollX,window.scrollY);}window.addEventListener('scroll',handleScroll);return()=>window.removeEventListener('scroll',handleScroll);},[]);\n```\n\n\nIn development, your Effect will call addEventListener() , then immediately removeEventListener() , and then addEventListener() again with the same handler. So there would be only one active subscription at a time. This has the same user-visible behavior as calling addEventListener() once, as in production.\n\n\n### Triggering animations\n\n\nIf your Effect animates something in, the cleanup function should reset the animation to the initial values:\n\n\n```javascript\nuseEffect(()=>{constnode=ref.current;node.style.opacity=1;// Trigger the animationreturn()=>{node.style.opacity=0;// Reset to the initial value};},[]);\n```\n\n\nIn development, opacity will be set to 1 , then to 0 , and then to 1 again. This should have the same user-visible behavior as setting it to 1 directly, which is what would happen in production. If you use a third-party animation library with support for tweening, your cleanup function should reset the timeline to its initial state.\n\n\n### Fetching data\n\n\nIf your Effect fetches something, the cleanup function should either abort the fetch or ignore its result:\n\n\n```javascript\nuseEffect(()=>{letignore=false;asyncfunctionstartFetching(){constjson=awaitfetchTodos(userId);if(!ignore){setTodos(json);}}startFetching();return()=>{ignore=true;};},[userId]);\n```\n\n\nYou can\u2019t \u201cundo\u201d a network request that already happened, but your cleanup function should ensure that the fetch that\u2019s not relevant anymore does not keep affecting your application. If the userId changes from 'Alice' to 'Bob' , cleanup ensures that the 'Alice' response is ignored even if it arrives after 'Bob' .\n\nIn development, you will see two fetches in the Network tab. There is nothing wrong with that. With the approach above, the first Effect will immediately get cleaned up so its copy of the ignore variable will be set to true . So even though there is an extra request, it won\u2019t affect the state thanks to the if (!ignore) check.\n\nIn production, there will only be one request. If the second request in development is bothering you, the best approach is to use a solution that deduplicates requests and caches their responses between components:\n\n\n```javascript\nfunctionTodoList(){consttodos=useSomeDataLibrary(`/api/user/${userId}/todos`);// ...\n```\n\n\nThis will not only improve the development experience, but also make your application feel faster. For example, the user pressing the Back button won\u2019t have to wait for some data to load again because it will be cached. You can either build such a cache yourself or use one of the many alternatives to manual fetching in Effects.\n\nWriting fetch calls inside Effects is a popular way to fetch data , especially in fully client-side apps. This is, however, a very manual approach and it has significant downsides:\n\n* Effects don\u2019t run on the server. This means that the initial server-rendered HTML will only include a loading state with no data. The client computer will have to download all JavaScript and render your app only to discover that now it needs to load the data. This is not very efficient.\n* Fetching directly in Effects makes it easy to create \u201cnetwork waterfalls\u201d. You render the parent component, it fetches some data, renders the child components, and then they start fetching their data. If the network is not very fast, this is significantly slower than fetching all data in parallel.\n* Fetching directly in Effects usually means you don\u2019t preload or cache data. For example, if the component unmounts and then mounts again, it would have to fetch the data again.\n* It\u2019s not very ergonomic. There\u2019s quite a bit of boilerplate code involved when writing fetch calls in a way that doesn\u2019t suffer from bugs like race conditions.\n\nThis list of downsides is not specific to React. It applies to fetching data on mount with any library. Like with routing, data fetching is not trivial to do well, so we recommend the following approaches:\n\n* If you use a framework , use its built-in data fetching mechanism. Modern React frameworks have integrated data fetching mechanisms that are efficient and don\u2019t suffer from the above pitfalls.\n* Otherwise, consider using or building a client-side cache. Popular open source solutions include React Query , useSWR , and React Router 6.4+. You can build your own solution too, in which case you would use Effects under the hood, but add logic for deduplicating requests, caching responses, and avoiding network waterfalls (by preloading data or hoisting data requirements to routes).\n\nYou can continue fetching data directly in Effects if neither of these approaches suit you.\n\n\n### Sending analytics\n\n\nConsider this code that sends an analytics event on the page visit:\n\n\n```javascript\nuseEffect(()=>{logVisit(url);// Sends a POST request},[url]);\n```\n\n\nIn development, logVisit will be called twice for every URL, so you might be tempted to try to fix that. We recommend keeping this code as is. Like with earlier examples, there is no user-visible behavior difference between running it once and running it twice. From a practical point of view, logVisit should not do anything in development because you don\u2019t want the logs from the development machines to skew the production metrics. Your component remounts every time you save its file, so it logs extra visits in development anyway.\n\nIn production, there will be no duplicate visit logs.\n\nTo debug the analytics events you\u2019re sending, you can deploy your app to a staging environment (which runs in production mode) or temporarily opt out of Strict Mode and its development-only remounting checks. You may also send analytics from the route change event handlers instead of Effects. For more precise analytics, intersection observers can help track which components are in the viewport and how long they remain visible.\n\n\n### Not an Effect: Initializing the application\n\n\nSome logic should only run once when the application starts. You can put it outside your components:\n\n\n```javascript\nif(typeofwindow!=='undefined'){// Check if we're running in the browser.checkAuthToken();loadDataFromLocalStorage();}functionApp(){// ...}\n```\n\n\nThis guarantees that such logic only runs once after the browser loads the page.\n\n\n### Not an Effect: Buying a product\n\n\nSometimes, even if you write a cleanup function, there\u2019s no way to prevent user-visible consequences of running the Effect twice. For example, maybe your Effect sends a POST request like buying a product:\n\n\n```javascript\nuseEffect(()=>{// \ud83d\udd34 Wrong: This Effect fires twice in development, exposing a problem in the code.fetch('/api/buy',{method:'POST'});},[]);\n```\n\n\nYou wouldn\u2019t want to buy the product twice. However, this is also why you shouldn\u2019t put this logic in an Effect. What if the user goes to another page and then presses Back? Your Effect would run again. You don\u2019t want to buy the product when the user visits a page; you want to buy it when the user clicks the Buy button.\n\nBuying is not caused by rendering; it\u2019s caused by a specific interaction. It should run only when the user presses the button. Delete the Effect and move your /api/buy request into the Buy button event handler:\n\n\n```javascript\nfunctionhandleClick(){// \u2705 Buying is an event because it is caused by a particular interaction.fetch('/api/buy',{method:'POST'});}\n```\n\n\nThis illustrates that if remounting breaks the logic of your application, this usually uncovers existing bugs. From a user\u2019s perspective, visiting a page shouldn\u2019t be different from visiting it, clicking a link, then pressing Back to view the page again. React verifies that your components abide by this principle by remounting them once in development.", "source": "https://react.dev/learn/synchronizing-with-effects", "category": "Synchronizing with Effects"}
{"instruction": "Show me a code example of How to handle the Effect firing twice in development? in React.", "input": "", "output": "React intentionally remounts your components in development to find bugs like in the last example. The right question isn\u2019t \u201chow to run an Effect once\u201d, but \u201chow to fix my Effect so that it works after remounting\u201d.\n\nUsually, the answer is to implement the cleanup function.  The cleanup function should stop or undo whatever the Effect was doing. The rule of thumb is that the user shouldn\u2019t be able to distinguish between the Effect running once (as in production) and a setup \u2192 cleanup \u2192 setup sequence (as you\u2019d see in development).\n\nMost of the Effects you\u2019ll write will fit into one of the common patterns below.\n\n\n### Pitfall\n\n\nA common pitfall for preventing Effects firing twice in development is to use a ref to prevent the Effect from running more than once. For example, you could \u201cfix\u201d the above bug with a useRef :\n\n\n```javascript\nconstconnectionRef=useRef(null);useEffect(()=>{// \ud83d\udea9 This wont fix the bug!!!if(!connectionRef.current){connectionRef.current=createConnection();connectionRef.current.connect();}},[]);\n```\n\n\nThis makes it so you only see \"\u2705 Connecting...\" once in development, but it doesn\u2019t fix the bug.\n\nWhen the user navigates away, the connection still isn\u2019t closed and when they navigate back, a new connection is created. As the user navigates across the app, the connections would keep piling up, the same as it would before the \u201cfix\u201d.\n\nTo fix the bug, it is not enough to just make the Effect run once. The effect needs to work after re-mounting, which means the connection needs to be cleaned up like in the solution above.\n\nSee the examples below for how to handle common patterns.\n\n\n### Controlling non-React widgets\n\n\nSometimes you need to add UI widgets that aren\u2019t written in React. For example, let\u2019s say you\u2019re adding a map component to your page. It has a setZoomLevel() method, and you\u2019d like to keep the zoom level in sync with a zoomLevel state variable in your React code. Your Effect would look similar to this:\n\n\n```javascript\nuseEffect(()=>{constmap=mapRef.current;map.setZoomLevel(zoomLevel);},[zoomLevel]);\n```\n\n\nNote that there is no cleanup needed in this case. In development, React will call the Effect twice, but this is not a problem because calling setZoomLevel twice with the same value does not do anything. It may be slightly slower, but this doesn\u2019t matter because it won\u2019t remount needlessly in production.\n\nSome APIs may not allow you to call them twice in a row. For example, the showModal method of the built-in <dialog> element throws if you call it twice. Implement the cleanup function and make it close the dialog:\n\n\n```javascript\nuseEffect(()=>{constdialog=dialogRef.current;dialog.showModal();return()=>dialog.close();},[]);\n```\n\n\nIn development, your Effect will call showModal() , then immediately close() , and then showModal() again. This has the same user-visible behavior as calling showModal() once, as you would see in production.\n\n\n### Subscribing to events\n\n\nIf your Effect subscribes to something, the cleanup function should unsubscribe:\n\n\n```javascript\nuseEffect(()=>{functionhandleScroll(e){console.log(window.scrollX,window.scrollY);}window.addEventListener('scroll',handleScroll);return()=>window.removeEventListener('scroll',handleScroll);},[]);\n```\n\n\nIn development, your Effect will call addEventListener() , then immediately removeEventListener() , and then addEventListener() again with the same handler. So there would be only one active subscription at a time. This has the same user-visible behavior as calling addEventListener() once, as in production.\n\n\n### Triggering animations\n\n\nIf your Effect animates something in, the cleanup function should reset the animation to the initial values:\n\n\n```javascript\nuseEffect(()=>{constnode=ref.current;node.style.opacity=1;// Trigger the animationreturn()=>{node.style.opacity=0;// Reset to the initial value};},[]);\n```\n\n\nIn development, opacity will be set to 1 , then to 0 , and then to 1 again. This should have the same user-visible behavior as setting it to 1 directly, which is what would happen in production. If you use a third-party animation library with support for tweening, your cleanup function should reset the timeline to its initial state.\n\n\n### Fetching data\n\n\nIf your Effect fetches something, the cleanup function should either abort the fetch or ignore its result:\n\n\n```javascript\nuseEffect(()=>{letignore=false;asyncfunctionstartFetching(){constjson=awaitfetchTodos(userId);if(!ignore){setTodos(json);}}startFetching();return()=>{ignore=true;};},[userId]);\n```\n\n\nYou can\u2019t \u201cundo\u201d a network request that already happened, but your cleanup function should ensure that the fetch that\u2019s not relevant anymore does not keep affecting your application. If the userId changes from 'Alice' to 'Bob' , cleanup ensures that the 'Alice' response is ignored even if it arrives after 'Bob' .\n\nIn development, you will see two fetches in the Network tab. There is nothing wrong with that. With the approach above, the first Effect will immediately get cleaned up so its copy of the ignore variable will be set to true . So even though there is an extra request, it won\u2019t affect the state thanks to the if (!ignore) check.\n\nIn production, there will only be one request. If the second request in development is bothering you, the best approach is to use a solution that deduplicates requests and caches their responses between components:\n\n\n```javascript\nfunctionTodoList(){consttodos=useSomeDataLibrary(`/api/user/${userId}/todos`);// ...\n```\n\n\nThis will not only improve the development experience, but also make your application feel faster. For example, the user pressing the Back button won\u2019t have to wait for some data to load again because it will be cached. You can either build such a cache yourself or use one of the many alternatives to manual fetching in Effects.\n\nWriting fetch calls inside Effects is a popular way to fetch data , especially in fully client-side apps. This is, however, a very manual approach and it has significant downsides:\n\n* Effects don\u2019t run on the server. This means that the initial server-rendered HTML will only include a loading state with no data. The client computer will have to download all JavaScript and render your app only to discover that now it needs to load the data. This is not very efficient.\n* Fetching directly in Effects makes it easy to create \u201cnetwork waterfalls\u201d. You render the parent component, it fetches some data, renders the child components, and then they start fetching their data. If the network is not very fast, this is significantly slower than fetching all data in parallel.\n* Fetching directly in Effects usually means you don\u2019t preload or cache data. For example, if the component unmounts and then mounts again, it would have to fetch the data again.\n* It\u2019s not very ergonomic. There\u2019s quite a bit of boilerplate code involved when writing fetch calls in a way that doesn\u2019t suffer from bugs like race conditions.\n\nThis list of downsides is not specific to React. It applies to fetching data on mount with any library. Like with routing, data fetching is not trivial to do well, so we recommend the following approaches:\n\n* If you use a framework , use its built-in data fetching mechanism. Modern React frameworks have integrated data fetching mechanisms that are efficient and don\u2019t suffer from the above pitfalls.\n* Otherwise, consider using or building a client-side cache. Popular open source solutions include React Query , useSWR , and React Router 6.4+. You can build your own solution too, in which case you would use Effects under the hood, but add logic for deduplicating requests, caching responses, and avoiding network waterfalls (by preloading data or hoisting data requirements to routes).\n\nYou can continue fetching data directly in Effects if neither of these approaches suit you.\n\n\n### Sending analytics\n\n\nConsider this code that sends an analytics event on the page visit:\n\n\n```javascript\nuseEffect(()=>{logVisit(url);// Sends a POST request},[url]);\n```\n\n\nIn development, logVisit will be called twice for every URL, so you might be tempted to try to fix that. We recommend keeping this code as is. Like with earlier examples, there is no user-visible behavior difference between running it once and running it twice. From a practical point of view, logVisit should not do anything in development because you don\u2019t want the logs from the development machines to skew the production metrics. Your component remounts every time you save its file, so it logs extra visits in development anyway.\n\nIn production, there will be no duplicate visit logs.\n\nTo debug the analytics events you\u2019re sending, you can deploy your app to a staging environment (which runs in production mode) or temporarily opt out of Strict Mode and its development-only remounting checks. You may also send analytics from the route change event handlers instead of Effects. For more precise analytics, intersection observers can help track which components are in the viewport and how long they remain visible.\n\n\n### Not an Effect: Initializing the application\n\n\nSome logic should only run once when the application starts. You can put it outside your components:\n\n\n```javascript\nif(typeofwindow!=='undefined'){// Check if we're running in the browser.checkAuthToken();loadDataFromLocalStorage();}functionApp(){// ...}\n```\n\n\nThis guarantees that such logic only runs once after the browser loads the page.\n\n\n### Not an Effect: Buying a product\n\n\nSometimes, even if you write a cleanup function, there\u2019s no way to prevent user-visible consequences of running the Effect twice. For example, maybe your Effect sends a POST request like buying a product:\n\n\n```javascript\nuseEffect(()=>{// \ud83d\udd34 Wrong: This Effect fires twice in development, exposing a problem in the code.fetch('/api/buy',{method:'POST'});},[]);\n```\n\n\nYou wouldn\u2019t want to buy the product twice. However, this is also why you shouldn\u2019t put this logic in an Effect. What if the user goes to another page and then presses Back? Your Effect would run again. You don\u2019t want to buy the product when the user visits a page; you want to buy it when the user clicks the Buy button.\n\nBuying is not caused by rendering; it\u2019s caused by a specific interaction. It should run only when the user presses the button. Delete the Effect and move your /api/buy request into the Buy button event handler:\n\n\n```javascript\nfunctionhandleClick(){// \u2705 Buying is an event because it is caused by a particular interaction.fetch('/api/buy',{method:'POST'});}\n```\n\n\nThis illustrates that if remounting breaks the logic of your application, this usually uncovers existing bugs. From a user\u2019s perspective, visiting a page shouldn\u2019t be different from visiting it, clicking a link, then pressing Back to view the page again. React verifies that your components abide by this principle by remounting them once in development.", "source": "https://react.dev/learn/synchronizing-with-effects", "category": "Synchronizing with Effects"}
{"instruction": "Tell me about Putting it all together.", "input": "", "output": "This playground can help you \u201cget a feel\u201d for how Effects work in practice.\n\nThis example uses setTimeout to schedule a console log with the input text to appear three seconds after the Effect runs. The cleanup function cancels the pending timeout. Start by pressing \u201cMount the component\u201d:\n\n\n```javascript\nimport{useState,useEffect}from'react';functionPlayground(){const[text,setText]=useState('a');useEffect(()=>{functiononTimeout(){console.log('\u23f0 '+text);}console.log('\ud83d\udd35 Schedule \"'+text+'\" log');consttimeoutId=setTimeout(onTimeout,3000);return()=>{console.log('\ud83d\udfe1 Cancel \"'+text+'\" log');clearTimeout(timeoutId);};},[text]);return(<><label>What to log:{' '}<inputvalue={text}onChange={e=>setText(e.target.value)}/></label><h1>{text}</h1></>);}exportdefaultfunctionApp(){const[show,setShow]=useState(false);return(<><buttononClick={()=>setShow(!show)}>{show?'Unmount':'Mount'}the component</button>{show&&<hr/>}{show&&<Playground/>}</>);}\n```\n\n\nYou will see three logs at first: Schedule \"a\" log , Cancel \"a\" log , and Schedule \"a\" log again. Three second later there will also be a log saying a . As you learned earlier, the extra schedule/cancel pair is because React remounts the component once in development to verify that you\u2019ve implemented cleanup well.\n\nNow edit the input to say abc . If you do it fast enough, you\u2019ll see Schedule \"ab\" log immediately followed by Cancel \"ab\" log and Schedule \"abc\" log . React always cleans up the previous render\u2019s Effect before the next render\u2019s Effect. This is why even if you type into the input fast, there is at most one timeout scheduled at a time. Edit the input a few times and watch the console to get a feel for how Effects get cleaned up.\n\nType something into the input and then immediately press \u201cUnmount the component\u201d. Notice how unmounting cleans up the last render\u2019s Effect. Here, it clears the last timeout before it has a chance to fire.\n\nFinally, edit the component above and comment out the cleanup function so that the timeouts don\u2019t get cancelled. Try typing abcde fast. What do you expect to happen in three seconds? Will console.log(text) inside the timeout print the latest text and produce five abcde logs? Give it a try to check your intuition!\n\nThree seconds later, you should see a sequence of logs ( a , ab , abc , abcd , and abcde ) rather than five abcde logs. Each Effect \u201ccaptures\u201d the text value from its corresponding render. It doesn\u2019t matter that the text state changed: an Effect from the render with text = 'ab' will always see 'ab' . In other words, Effects from each render are isolated from each other. If you\u2019re curious how this works, you can read about closures .\n\nYou can think of useEffect as \u201cattaching\u201d a piece of behavior to the render output. Consider this Effect:\n\n\n```javascript\nexportdefaultfunctionChatRoom({roomId}){useEffect(()=>{constconnection=createConnection(roomId);connection.connect();return()=>connection.disconnect();},[roomId]);return<h1>Welcome to{roomId}!</h1>;}\n```\n\n\nLet\u2019s see what exactly happens as the user navigates around the app.\n\nThe user visits <ChatRoom roomId=\"general\" /> . Let\u2019s mentally substitute roomId with 'general' :\n\n\n```javascript\n// JSX for the first render (roomId = \"general\")return<h1>Welcome to general!</h1>;\n```\n\n\nThe Effect is also a part of the rendering output. The first render\u2019s Effect becomes:\n\n\n```javascript\n// Effect for the first render (roomId = \"general\")()=>{constconnection=createConnection('general');connection.connect();return()=>connection.disconnect();},// Dependencies for the first render (roomId = \"general\")['general']\n```\n\n\nReact runs this Effect, which connects to the 'general' chat room.\n\nLet\u2019s say <ChatRoom roomId=\"general\" /> re-renders. The JSX output is the same:\n\n\n```javascript\n// JSX for the second render (roomId = \"general\")return<h1>Welcome to general!</h1>;\n```\n\n\nReact sees that the rendering output has not changed, so it doesn\u2019t update the DOM.\n\nThe Effect from the second render looks like this:\n\n\n```javascript\n// Effect for the second render (roomId = \"general\")()=>{constconnection=createConnection('general');connection.connect();return()=>connection.disconnect();},// Dependencies for the second render (roomId = \"general\")['general']\n```\n\n\nReact compares ['general'] from the second render with ['general'] from the first render. Because all dependencies are the same, React ignores the Effect from the second render. It never gets called.\n\nThen, the user visits <ChatRoom roomId=\"travel\" /> . This time, the component returns different JSX:\n\n\n```javascript\n// JSX for the third render (roomId = \"travel\")return<h1>Welcome to travel!</h1>;\n```\n\n\nReact updates the DOM to change \"Welcome to general\" into \"Welcome to travel\" .\n\nThe Effect from the third render looks like this:\n\n\n```javascript\n// Effect for the third render (roomId = \"travel\")()=>{constconnection=createConnection('travel');connection.connect();return()=>connection.disconnect();},// Dependencies for the third render (roomId = \"travel\")['travel']\n```\n\n\nReact compares ['travel'] from the third render with ['general'] from the second render. One dependency is different: Object.is('travel', 'general') is false . The Effect can\u2019t be skipped.\n\nBefore React can apply the Effect from the third render, it needs to clean up the last Effect that did run. The second render\u2019s Effect was skipped, so React needs to clean up the first render\u2019s Effect. If you scroll up to the first render, you\u2019ll see that its cleanup calls disconnect() on the connection that was created with createConnection('general') . This disconnects the app from the 'general' chat room.\n\nAfter that, React runs the third render\u2019s Effect. It connects to the 'travel' chat room.\n\nFinally, let\u2019s say the user navigates away, and the ChatRoom component unmounts. React runs the last Effect\u2019s cleanup function. The last Effect was from the third render. The third render\u2019s cleanup destroys the createConnection('travel') connection. So the app disconnects from the 'travel' room.\n\nWhen Strict Mode is on, React remounts every component once after mount (state and DOM are preserved). This helps you find Effects that need cleanup and exposes bugs like race conditions early. Additionally, React will remount the Effects whenever you save a file in development. Both of these behaviors are development-only.", "source": "https://react.dev/learn/synchronizing-with-effects", "category": "Synchronizing with Effects"}
{"instruction": "Show me a code example of Putting it all together in React.", "input": "", "output": "This playground can help you \u201cget a feel\u201d for how Effects work in practice.\n\nThis example uses setTimeout to schedule a console log with the input text to appear three seconds after the Effect runs. The cleanup function cancels the pending timeout. Start by pressing \u201cMount the component\u201d:\n\n\n```javascript\nimport{useState,useEffect}from'react';functionPlayground(){const[text,setText]=useState('a');useEffect(()=>{functiononTimeout(){console.log('\u23f0 '+text);}console.log('\ud83d\udd35 Schedule \"'+text+'\" log');consttimeoutId=setTimeout(onTimeout,3000);return()=>{console.log('\ud83d\udfe1 Cancel \"'+text+'\" log');clearTimeout(timeoutId);};},[text]);return(<><label>What to log:{' '}<inputvalue={text}onChange={e=>setText(e.target.value)}/></label><h1>{text}</h1></>);}exportdefaultfunctionApp(){const[show,setShow]=useState(false);return(<><buttononClick={()=>setShow(!show)}>{show?'Unmount':'Mount'}the component</button>{show&&<hr/>}{show&&<Playground/>}</>);}\n```\n\n\nYou will see three logs at first: Schedule \"a\" log , Cancel \"a\" log , and Schedule \"a\" log again. Three second later there will also be a log saying a . As you learned earlier, the extra schedule/cancel pair is because React remounts the component once in development to verify that you\u2019ve implemented cleanup well.\n\nNow edit the input to say abc . If you do it fast enough, you\u2019ll see Schedule \"ab\" log immediately followed by Cancel \"ab\" log and Schedule \"abc\" log . React always cleans up the previous render\u2019s Effect before the next render\u2019s Effect. This is why even if you type into the input fast, there is at most one timeout scheduled at a time. Edit the input a few times and watch the console to get a feel for how Effects get cleaned up.\n\nType something into the input and then immediately press \u201cUnmount the component\u201d. Notice how unmounting cleans up the last render\u2019s Effect. Here, it clears the last timeout before it has a chance to fire.\n\nFinally, edit the component above and comment out the cleanup function so that the timeouts don\u2019t get cancelled. Try typing abcde fast. What do you expect to happen in three seconds? Will console.log(text) inside the timeout print the latest text and produce five abcde logs? Give it a try to check your intuition!\n\nThree seconds later, you should see a sequence of logs ( a , ab , abc , abcd , and abcde ) rather than five abcde logs. Each Effect \u201ccaptures\u201d the text value from its corresponding render. It doesn\u2019t matter that the text state changed: an Effect from the render with text = 'ab' will always see 'ab' . In other words, Effects from each render are isolated from each other. If you\u2019re curious how this works, you can read about closures .\n\nYou can think of useEffect as \u201cattaching\u201d a piece of behavior to the render output. Consider this Effect:\n\n\n```javascript\nexportdefaultfunctionChatRoom({roomId}){useEffect(()=>{constconnection=createConnection(roomId);connection.connect();return()=>connection.disconnect();},[roomId]);return<h1>Welcome to{roomId}!</h1>;}\n```\n\n\nLet\u2019s see what exactly happens as the user navigates around the app.\n\nThe user visits <ChatRoom roomId=\"general\" /> . Let\u2019s mentally substitute roomId with 'general' :\n\n\n```javascript\n// JSX for the first render (roomId = \"general\")return<h1>Welcome to general!</h1>;\n```\n\n\nThe Effect is also a part of the rendering output. The first render\u2019s Effect becomes:\n\n\n```javascript\n// Effect for the first render (roomId = \"general\")()=>{constconnection=createConnection('general');connection.connect();return()=>connection.disconnect();},// Dependencies for the first render (roomId = \"general\")['general']\n```\n\n\nReact runs this Effect, which connects to the 'general' chat room.\n\nLet\u2019s say <ChatRoom roomId=\"general\" /> re-renders. The JSX output is the same:\n\n\n```javascript\n// JSX for the second render (roomId = \"general\")return<h1>Welcome to general!</h1>;\n```\n\n\nReact sees that the rendering output has not changed, so it doesn\u2019t update the DOM.\n\nThe Effect from the second render looks like this:\n\n\n```javascript\n// Effect for the second render (roomId = \"general\")()=>{constconnection=createConnection('general');connection.connect();return()=>connection.disconnect();},// Dependencies for the second render (roomId = \"general\")['general']\n```\n\n\nReact compares ['general'] from the second render with ['general'] from the first render. Because all dependencies are the same, React ignores the Effect from the second render. It never gets called.\n\nThen, the user visits <ChatRoom roomId=\"travel\" /> . This time, the component returns different JSX:\n\n\n```javascript\n// JSX for the third render (roomId = \"travel\")return<h1>Welcome to travel!</h1>;\n```\n\n\nReact updates the DOM to change \"Welcome to general\" into \"Welcome to travel\" .\n\nThe Effect from the third render looks like this:\n\n\n```javascript\n// Effect for the third render (roomId = \"travel\")()=>{constconnection=createConnection('travel');connection.connect();return()=>connection.disconnect();},// Dependencies for the third render (roomId = \"travel\")['travel']\n```\n\n\nReact compares ['travel'] from the third render with ['general'] from the second render. One dependency is different: Object.is('travel', 'general') is false . The Effect can\u2019t be skipped.\n\nBefore React can apply the Effect from the third render, it needs to clean up the last Effect that did run. The second render\u2019s Effect was skipped, so React needs to clean up the first render\u2019s Effect. If you scroll up to the first render, you\u2019ll see that its cleanup calls disconnect() on the connection that was created with createConnection('general') . This disconnects the app from the 'general' chat room.\n\nAfter that, React runs the third render\u2019s Effect. It connects to the 'travel' chat room.\n\nFinally, let\u2019s say the user navigates away, and the ChatRoom component unmounts. React runs the last Effect\u2019s cleanup function. The last Effect was from the third render. The third render\u2019s cleanup destroys the createConnection('travel') connection. So the app disconnects from the 'travel' room.\n\nWhen Strict Mode is on, React remounts every component once after mount (state and DOM are preserved). This helps you find Effects that need cleanup and exposes bugs like race conditions early. Additionally, React will remount the Effects whenever you save a file in development. Both of these behaviors are development-only.", "source": "https://react.dev/learn/synchronizing-with-effects", "category": "Synchronizing with Effects"}
{"instruction": "Tell me about Start with the mockup.", "input": "", "output": "Imagine that you already have a JSON API and a mockup from a designer.\n\nThe JSON API returns some data that looks like this:\n\n\n```javascript\n[{category:\"Fruits\",price:\"$1\",stocked:true,name:\"Apple\"},{category:\"Fruits\",price:\"$1\",stocked:true,name:\"Dragonfruit\"},{category:\"Fruits\",price:\"$2\",stocked:false,name:\"Passionfruit\"},{category:\"Vegetables\",price:\"$2\",stocked:true,name:\"Spinach\"},{category:\"Vegetables\",price:\"$4\",stocked:false,name:\"Pumpkin\"},{category:\"Vegetables\",price:\"$1\",stocked:true,name:\"Peas\"}]\n```\n\n\nThe mockup looks like this:\n\nTo implement a UI in React, you will usually follow the same five steps.", "source": "https://react.dev/learn/thinking-in-react", "category": "Thinking in React"}
{"instruction": "Show me a code example of Start with the mockup in React.", "input": "", "output": "Imagine that you already have a JSON API and a mockup from a designer.\n\nThe JSON API returns some data that looks like this:\n\n\n```javascript\n[{category:\"Fruits\",price:\"$1\",stocked:true,name:\"Apple\"},{category:\"Fruits\",price:\"$1\",stocked:true,name:\"Dragonfruit\"},{category:\"Fruits\",price:\"$2\",stocked:false,name:\"Passionfruit\"},{category:\"Vegetables\",price:\"$2\",stocked:true,name:\"Spinach\"},{category:\"Vegetables\",price:\"$4\",stocked:false,name:\"Pumpkin\"},{category:\"Vegetables\",price:\"$1\",stocked:true,name:\"Peas\"}]\n```\n\n\nThe mockup looks like this:\n\nTo implement a UI in React, you will usually follow the same five steps.", "source": "https://react.dev/learn/thinking-in-react", "category": "Thinking in React"}
{"instruction": "Explain the concept of Step 1: Break the UI into a component hierarchy in React.", "input": "", "output": "Start by drawing boxes around every component and subcomponent in the mockup and naming them. If you work with a designer, they may have already named these components in their design tool. Ask them!\n\nDepending on your background, you can think about splitting up a design into components in different ways:\n\n* Programming \u2014use the same techniques for deciding if you should create a new function or object. One such technique is the single responsibility principle , that is, a component should ideally only do one thing. If it ends up growing, it should be decomposed into smaller subcomponents.\n* CSS \u2014consider what you would make class selectors for. (However, components are a bit less granular.)\n* Design \u2014consider how you would organize the design\u2019s layers.\n\nIf your JSON is well-structured, you\u2019ll often find that it naturally maps to the component structure of your UI. That\u2019s because UI and data models often have the same information architecture\u2014that is, the same shape. Separate your UI into components, where each component matches one piece of your data model.\n\nThere are five components on this screen:\n\n1. FilterableProductTable (grey) contains the entire app.\n2. SearchBar (blue) receives the user input.\n3. ProductTable (lavender) displays and filters the list according to the user input.\n4. ProductCategoryRow (green) displays a heading for each category.\n5. ProductRow (yellow) displays a row for each product.\n\nIf you look at ProductTable (lavender), you\u2019ll see that the table header (containing the \u201cName\u201d and \u201cPrice\u201d labels) isn\u2019t its own component. This is a matter of preference, and you could go either way. For this example, it is a part of ProductTable because it appears inside the ProductTable \u2019s list. However, if this header grows to be complex (e.g., if you add sorting), you can move it into its own ProductTableHeader component.\n\nNow that you\u2019ve identified the components in the mockup, arrange them into a hierarchy. Components that appear within another component in the mockup should appear as a child in the hierarchy:\n\n* FilterableProductTable SearchBar ProductTable ProductCategoryRow ProductRow\n\n* SearchBar\n* ProductTable ProductCategoryRow ProductRow\n\n* ProductCategoryRow\n* ProductRow", "source": "https://react.dev/learn/thinking-in-react", "category": "Thinking in React"}
{"instruction": "Can you describe Step 2: Build a static version in React in the context of React?", "input": "", "output": "Now that you have your component hierarchy, it\u2019s time to implement your app. The most straightforward approach is to build a version that renders the UI from your data model without adding any interactivity\u2026 yet! It\u2019s often easier to build the static version first and add interactivity later. Building a static version requires a lot of typing and no thinking, but adding interactivity requires a lot of thinking and not a lot of typing.\n\nTo build a static version of your app that renders your data model, you\u2019ll want to build components that reuse other components and pass data using props. Props are a way of passing data from parent to child. (If you\u2019re familiar with the concept of state , don\u2019t use state at all to build this static version. State is reserved only for interactivity, that is, data that changes over time. Since this is a static version of the app, you don\u2019t need it.)\n\nYou can either build \u201ctop down\u201d by starting with building the components higher up in the hierarchy (like FilterableProductTable ) or \u201cbottom up\u201d by working from components lower down (like ProductRow ). In simpler examples, it\u2019s usually easier to go top-down, and on larger projects, it\u2019s easier to go bottom-up.\n\n\n```javascript\nfunctionProductCategoryRow({category}){return(<tr><thcolSpan=\"2\">{category}</th></tr>);}functionProductRow({product}){constname=product.stocked?product.name:<spanstyle={{color:'red'}}>{product.name}</span>;return(<tr><td>{name}</td><td>{product.price}</td></tr>);}functionProductTable({products}){constrows=[];letlastCategory=null;products.forEach((product)=>{if(product.category!==lastCategory){rows.push(<ProductCategoryRowcategory={product.category}key={product.category}/>);}rows.push(<ProductRowproduct={product}key={product.name}/>);lastCategory=product.category;});return(<table><thead><tr><th>Name</th><th>Price</th></tr></thead><tbody>{rows}</tbody></table>);}functionSearchBar(){return(<form><inputtype=\"text\"placeholder=\"Search...\"/><label><inputtype=\"checkbox\"/>{' '}Only show products in stock</label></form>);}functionFilterableProductTable({products}){return(<div><SearchBar/><ProductTableproducts={products}/></div>);}constPRODUCTS=[{category:\"Fruits\",price:\"$1\",stocked:true,name:\"Apple\"},{category:\"Fruits\",price:\"$1\",stocked:true,name:\"Dragonfruit\"},{category:\"Fruits\",price:\"$2\",stocked:false,name:\"Passionfruit\"},{category:\"Vegetables\",price:\"$2\",stocked:true,name:\"Spinach\"},{category:\"Vegetables\",price:\"$4\",stocked:false,name:\"Pumpkin\"},{category:\"Vegetables\",price:\"$1\",stocked:true,name:\"Peas\"}];exportdefaultfunctionApp(){return<FilterableProductTableproducts={PRODUCTS}/>;}\n```\n\n\n(If this code looks intimidating, go through the Quick Start first!)\n\nAfter building your components, you\u2019ll have a library of reusable components that render your data model. Because this is a static app, the components will only return JSX. The component at the top of the hierarchy ( FilterableProductTable ) will take your data model as a prop. This is called one-way data flow because the data flows down from the top-level component to the ones at the bottom of the tree.\n\n\n### Pitfall\n\n\nAt this point, you should not be using any state values. That\u2019s for the next step!", "source": "https://react.dev/learn/thinking-in-react", "category": "Thinking in React"}
{"instruction": "Show me a code example of Step 2: Build a static version in React in React.", "input": "", "output": "Now that you have your component hierarchy, it\u2019s time to implement your app. The most straightforward approach is to build a version that renders the UI from your data model without adding any interactivity\u2026 yet! It\u2019s often easier to build the static version first and add interactivity later. Building a static version requires a lot of typing and no thinking, but adding interactivity requires a lot of thinking and not a lot of typing.\n\nTo build a static version of your app that renders your data model, you\u2019ll want to build components that reuse other components and pass data using props. Props are a way of passing data from parent to child. (If you\u2019re familiar with the concept of state , don\u2019t use state at all to build this static version. State is reserved only for interactivity, that is, data that changes over time. Since this is a static version of the app, you don\u2019t need it.)\n\nYou can either build \u201ctop down\u201d by starting with building the components higher up in the hierarchy (like FilterableProductTable ) or \u201cbottom up\u201d by working from components lower down (like ProductRow ). In simpler examples, it\u2019s usually easier to go top-down, and on larger projects, it\u2019s easier to go bottom-up.\n\n\n```javascript\nfunctionProductCategoryRow({category}){return(<tr><thcolSpan=\"2\">{category}</th></tr>);}functionProductRow({product}){constname=product.stocked?product.name:<spanstyle={{color:'red'}}>{product.name}</span>;return(<tr><td>{name}</td><td>{product.price}</td></tr>);}functionProductTable({products}){constrows=[];letlastCategory=null;products.forEach((product)=>{if(product.category!==lastCategory){rows.push(<ProductCategoryRowcategory={product.category}key={product.category}/>);}rows.push(<ProductRowproduct={product}key={product.name}/>);lastCategory=product.category;});return(<table><thead><tr><th>Name</th><th>Price</th></tr></thead><tbody>{rows}</tbody></table>);}functionSearchBar(){return(<form><inputtype=\"text\"placeholder=\"Search...\"/><label><inputtype=\"checkbox\"/>{' '}Only show products in stock</label></form>);}functionFilterableProductTable({products}){return(<div><SearchBar/><ProductTableproducts={products}/></div>);}constPRODUCTS=[{category:\"Fruits\",price:\"$1\",stocked:true,name:\"Apple\"},{category:\"Fruits\",price:\"$1\",stocked:true,name:\"Dragonfruit\"},{category:\"Fruits\",price:\"$2\",stocked:false,name:\"Passionfruit\"},{category:\"Vegetables\",price:\"$2\",stocked:true,name:\"Spinach\"},{category:\"Vegetables\",price:\"$4\",stocked:false,name:\"Pumpkin\"},{category:\"Vegetables\",price:\"$1\",stocked:true,name:\"Peas\"}];exportdefaultfunctionApp(){return<FilterableProductTableproducts={PRODUCTS}/>;}\n```\n\n\n(If this code looks intimidating, go through the Quick Start first!)\n\nAfter building your components, you\u2019ll have a library of reusable components that render your data model. Because this is a static app, the components will only return JSX. The component at the top of the hierarchy ( FilterableProductTable ) will take your data model as a prop. This is called one-way data flow because the data flows down from the top-level component to the ones at the bottom of the tree.\n\n\n### Pitfall\n\n\nAt this point, you should not be using any state values. That\u2019s for the next step!", "source": "https://react.dev/learn/thinking-in-react", "category": "Thinking in React"}
{"instruction": "What are the best practices for Step 2: Build a static version in React in React?", "input": "", "output": "Now that you have your component hierarchy, it\u2019s time to implement your app. The most straightforward approach is to build a version that renders the UI from your data model without adding any interactivity\u2026 yet! It\u2019s often easier to build the static version first and add interactivity later. Building a static version requires a lot of typing and no thinking, but adding interactivity requires a lot of thinking and not a lot of typing.\n\nTo build a static version of your app that renders your data model, you\u2019ll want to build components that reuse other components and pass data using props. Props are a way of passing data from parent to child. (If you\u2019re familiar with the concept of state , don\u2019t use state at all to build this static version. State is reserved only for interactivity, that is, data that changes over time. Since this is a static version of the app, you don\u2019t need it.)\n\nYou can either build \u201ctop down\u201d by starting with building the components higher up in the hierarchy (like FilterableProductTable ) or \u201cbottom up\u201d by working from components lower down (like ProductRow ). In simpler examples, it\u2019s usually easier to go top-down, and on larger projects, it\u2019s easier to go bottom-up.\n\n\n```javascript\nfunctionProductCategoryRow({category}){return(<tr><thcolSpan=\"2\">{category}</th></tr>);}functionProductRow({product}){constname=product.stocked?product.name:<spanstyle={{color:'red'}}>{product.name}</span>;return(<tr><td>{name}</td><td>{product.price}</td></tr>);}functionProductTable({products}){constrows=[];letlastCategory=null;products.forEach((product)=>{if(product.category!==lastCategory){rows.push(<ProductCategoryRowcategory={product.category}key={product.category}/>);}rows.push(<ProductRowproduct={product}key={product.name}/>);lastCategory=product.category;});return(<table><thead><tr><th>Name</th><th>Price</th></tr></thead><tbody>{rows}</tbody></table>);}functionSearchBar(){return(<form><inputtype=\"text\"placeholder=\"Search...\"/><label><inputtype=\"checkbox\"/>{' '}Only show products in stock</label></form>);}functionFilterableProductTable({products}){return(<div><SearchBar/><ProductTableproducts={products}/></div>);}constPRODUCTS=[{category:\"Fruits\",price:\"$1\",stocked:true,name:\"Apple\"},{category:\"Fruits\",price:\"$1\",stocked:true,name:\"Dragonfruit\"},{category:\"Fruits\",price:\"$2\",stocked:false,name:\"Passionfruit\"},{category:\"Vegetables\",price:\"$2\",stocked:true,name:\"Spinach\"},{category:\"Vegetables\",price:\"$4\",stocked:false,name:\"Pumpkin\"},{category:\"Vegetables\",price:\"$1\",stocked:true,name:\"Peas\"}];exportdefaultfunctionApp(){return<FilterableProductTableproducts={PRODUCTS}/>;}\n```\n\n\n(If this code looks intimidating, go through the Quick Start first!)\n\nAfter building your components, you\u2019ll have a library of reusable components that render your data model. Because this is a static app, the components will only return JSX. The component at the top of the hierarchy ( FilterableProductTable ) will take your data model as a prop. This is called one-way data flow because the data flows down from the top-level component to the ones at the bottom of the tree.\n\n\n### Pitfall\n\n\nAt this point, you should not be using any state values. That\u2019s for the next step!", "source": "https://react.dev/learn/thinking-in-react", "category": "Thinking in React"}
{"instruction": "Explain the concept of Step 3: Find the minimal but complete representation of UI state in React.", "input": "", "output": "To make the UI interactive, you need to let users change your underlying data model. You will use state for this.\n\nThink of state as the minimal set of changing data that your app needs to remember. The most important principle for structuring state is to keep it DRY (Don\u2019t Repeat Yourself). Figure out the absolute minimal representation of the state your application needs and compute everything else on-demand. For example, if you\u2019re building a shopping list, you can store the items as an array in state. If you want to also display the number of items in the list, don\u2019t store the number of items as another state value\u2014instead, read the length of your array.\n\nNow think of all of the pieces of data in this example application:\n\n1. The original list of products\n2. The search text the user has entered\n3. The value of the checkbox\n4. The filtered list of products\n\nWhich of these are state? Identify the ones that are not:\n\n* Does it remain unchanged over time? If so, it isn\u2019t state.\n* Is it passed in from a parent via props? If so, it isn\u2019t state.\n* Can you compute it based on existing state or props in your component? If so, it definitely isn\u2019t state!\n\nWhat\u2019s left is probably state.\n\nLet\u2019s go through them one by one again:\n\n1. The original list of products is passed in as props, so it\u2019s not state.\n2. The search text seems to be state since it changes over time and can\u2019t be computed from anything.\n3. The value of the checkbox seems to be state since it changes over time and can\u2019t be computed from anything.\n4. The filtered list of products isn\u2019t state because it can be computed by taking the original list of products and filtering it according to the search text and value of the checkbox.\n\nThis means only the search text and the value of the checkbox are state! Nicely done!\n\nThere are two types of \u201cmodel\u201d data in React: props and state. The two are very different:\n\n* Props are like arguments you pass to a function. They let a parent component pass data to a child component and customize its appearance. For example, a Form can pass a color prop to a Button .\n* State is like a component\u2019s memory. It lets a component keep track of some information and change it in response to interactions. For example, a Button might keep track of isHovered state.\n\nProps and state are different, but they work together. A parent component will often keep some information in state (so that it can change it), and pass it down to child components as their props. It\u2019s okay if the difference still feels fuzzy on the first read. It takes a bit of practice for it to really stick!", "source": "https://react.dev/learn/thinking-in-react", "category": "Thinking in React"}
{"instruction": "What is Step 4: Identify where your state should live in React and how does it work?", "input": "", "output": "After identifying your app\u2019s minimal state data, you need to identify which component is responsible for changing this state, or owns the state. Remember: React uses one-way data flow, passing data down the component hierarchy from parent to child component. It may not be immediately clear which component should own what state. This can be challenging if you\u2019re new to this concept, but you can figure it out by following these steps!\n\nFor each piece of state in your application:\n\n1. Identify every component that renders something based on that state.\n2. Find their closest common parent component\u2014a component above them all in the hierarchy.\n3. Decide where the state should live: Often, you can put the state directly into their common parent. You can also put the state into some component above their common parent. If you can\u2019t find a component where it makes sense to own the state, create a new component solely for holding the state and add it somewhere in the hierarchy above the common parent component.\n\n1. Often, you can put the state directly into their common parent.\n2. You can also put the state into some component above their common parent.\n3. If you can\u2019t find a component where it makes sense to own the state, create a new component solely for holding the state and add it somewhere in the hierarchy above the common parent component.\n\nIn the previous step, you found two pieces of state in this application: the search input text, and the value of the checkbox. In this example, they always appear together, so it makes sense to put them into the same place.\n\nNow let\u2019s run through our strategy for them:\n\n1. Identify components that use state: ProductTable needs to filter the product list based on that state (search text and checkbox value). SearchBar needs to display that state (search text and checkbox value).\n2. Find their common parent: The first parent component both components share is FilterableProductTable .\n3. Decide where the state lives : We\u2019ll keep the filter text and checked state values in FilterableProductTable .\n\n* ProductTable needs to filter the product list based on that state (search text and checkbox value).\n* SearchBar needs to display that state (search text and checkbox value).\n\nSo the state values will live in FilterableProductTable .\n\nAdd state to the component with the useState() Hook. Hooks are special functions that let you \u201chook into\u201d React. Add two state variables at the top of FilterableProductTable and specify their initial state:\n\n\n```javascript\nfunctionFilterableProductTable({products}){const[filterText,setFilterText]=useState('');const[inStockOnly,setInStockOnly]=useState(false);\n```\n\n\nThen, pass filterText and inStockOnly to ProductTable and SearchBar as props:\n\n\n```javascript\n<div><SearchBarfilterText={filterText}inStockOnly={inStockOnly}/><ProductTableproducts={products}filterText={filterText}inStockOnly={inStockOnly}/></div>\n```\n\n\nYou can start seeing how your application will behave. Edit the filterText initial value from useState('') to useState('fruit') in the sandbox code below. You\u2019ll see both the search input text and the table update:\n\n\n```javascript\nimport{useState}from'react';functionFilterableProductTable({products}){const[filterText,setFilterText]=useState('');const[inStockOnly,setInStockOnly]=useState(false);return(<div><SearchBarfilterText={filterText}inStockOnly={inStockOnly}/><ProductTableproducts={products}filterText={filterText}inStockOnly={inStockOnly}/></div>);}functionProductCategoryRow({category}){return(<tr><thcolSpan=\"2\">{category}</th></tr>);}functionProductRow({product}){constname=product.stocked?product.name:<spanstyle={{color:'red'}}>{product.name}</span>;return(<tr><td>{name}</td><td>{product.price}</td></tr>);}functionProductTable({products,filterText,inStockOnly}){constrows=[];letlastCategory=null;products.forEach((product)=>{if(product.name.toLowerCase().indexOf(filterText.toLowerCase())=== -1){return;}if(inStockOnly&& !product.stocked){return;}if(product.category!==lastCategory){rows.push(<ProductCategoryRowcategory={product.category}key={product.category}/>);}rows.push(<ProductRowproduct={product}key={product.name}/>);lastCategory=product.category;});return(<table><thead><tr><th>Name</th><th>Price</th></tr></thead><tbody>{rows}</tbody></table>);}functionSearchBar({filterText,inStockOnly}){return(<form><inputtype=\"text\"value={filterText}placeholder=\"Search...\"/><label><inputtype=\"checkbox\"checked={inStockOnly}/>{' '}Only show products in stock</label></form>);}constPRODUCTS=[{category:\"Fruits\",price:\"$1\",stocked:true,name:\"Apple\"},{category:\"Fruits\",price:\"$1\",stocked:true,name:\"Dragonfruit\"},{category:\"Fruits\",price:\"$2\",stocked:false,name:\"Passionfruit\"},{category:\"Vegetables\",price:\"$2\",stocked:true,name:\"Spinach\"},{category:\"Vegetables\",price:\"$4\",stocked:false,name:\"Pumpkin\"},{category:\"Vegetables\",price:\"$1\",stocked:true,name:\"Peas\"}];exportdefaultfunctionApp(){return<FilterableProductTableproducts={PRODUCTS}/>;}\n```\n\n\nNotice that editing the form doesn\u2019t work yet. There is a console error in the sandbox above explaining why:\n\nIn the sandbox above, ProductTable and SearchBar read the filterText and inStockOnly props to render the table, the input, and the checkbox. For example, here is how SearchBar populates the input value:\n\n\n```javascript\nfunctionSearchBar({filterText,inStockOnly}){return(<form><inputtype=\"text\"value={filterText}placeholder=\"Search...\"/>\n```\n\n\nHowever, you haven\u2019t added any code to respond to the user actions like typing yet. This will be your final step.", "source": "https://react.dev/learn/thinking-in-react", "category": "Thinking in React"}
{"instruction": "Show me a code example of Step 4: Identify where your state should live in React.", "input": "", "output": "After identifying your app\u2019s minimal state data, you need to identify which component is responsible for changing this state, or owns the state. Remember: React uses one-way data flow, passing data down the component hierarchy from parent to child component. It may not be immediately clear which component should own what state. This can be challenging if you\u2019re new to this concept, but you can figure it out by following these steps!\n\nFor each piece of state in your application:\n\n1. Identify every component that renders something based on that state.\n2. Find their closest common parent component\u2014a component above them all in the hierarchy.\n3. Decide where the state should live: Often, you can put the state directly into their common parent. You can also put the state into some component above their common parent. If you can\u2019t find a component where it makes sense to own the state, create a new component solely for holding the state and add it somewhere in the hierarchy above the common parent component.\n\n1. Often, you can put the state directly into their common parent.\n2. You can also put the state into some component above their common parent.\n3. If you can\u2019t find a component where it makes sense to own the state, create a new component solely for holding the state and add it somewhere in the hierarchy above the common parent component.\n\nIn the previous step, you found two pieces of state in this application: the search input text, and the value of the checkbox. In this example, they always appear together, so it makes sense to put them into the same place.\n\nNow let\u2019s run through our strategy for them:\n\n1. Identify components that use state: ProductTable needs to filter the product list based on that state (search text and checkbox value). SearchBar needs to display that state (search text and checkbox value).\n2. Find their common parent: The first parent component both components share is FilterableProductTable .\n3. Decide where the state lives : We\u2019ll keep the filter text and checked state values in FilterableProductTable .\n\n* ProductTable needs to filter the product list based on that state (search text and checkbox value).\n* SearchBar needs to display that state (search text and checkbox value).\n\nSo the state values will live in FilterableProductTable .\n\nAdd state to the component with the useState() Hook. Hooks are special functions that let you \u201chook into\u201d React. Add two state variables at the top of FilterableProductTable and specify their initial state:\n\n\n```javascript\nfunctionFilterableProductTable({products}){const[filterText,setFilterText]=useState('');const[inStockOnly,setInStockOnly]=useState(false);\n```\n\n\nThen, pass filterText and inStockOnly to ProductTable and SearchBar as props:\n\n\n```javascript\n<div><SearchBarfilterText={filterText}inStockOnly={inStockOnly}/><ProductTableproducts={products}filterText={filterText}inStockOnly={inStockOnly}/></div>\n```\n\n\nYou can start seeing how your application will behave. Edit the filterText initial value from useState('') to useState('fruit') in the sandbox code below. You\u2019ll see both the search input text and the table update:\n\n\n```javascript\nimport{useState}from'react';functionFilterableProductTable({products}){const[filterText,setFilterText]=useState('');const[inStockOnly,setInStockOnly]=useState(false);return(<div><SearchBarfilterText={filterText}inStockOnly={inStockOnly}/><ProductTableproducts={products}filterText={filterText}inStockOnly={inStockOnly}/></div>);}functionProductCategoryRow({category}){return(<tr><thcolSpan=\"2\">{category}</th></tr>);}functionProductRow({product}){constname=product.stocked?product.name:<spanstyle={{color:'red'}}>{product.name}</span>;return(<tr><td>{name}</td><td>{product.price}</td></tr>);}functionProductTable({products,filterText,inStockOnly}){constrows=[];letlastCategory=null;products.forEach((product)=>{if(product.name.toLowerCase().indexOf(filterText.toLowerCase())=== -1){return;}if(inStockOnly&& !product.stocked){return;}if(product.category!==lastCategory){rows.push(<ProductCategoryRowcategory={product.category}key={product.category}/>);}rows.push(<ProductRowproduct={product}key={product.name}/>);lastCategory=product.category;});return(<table><thead><tr><th>Name</th><th>Price</th></tr></thead><tbody>{rows}</tbody></table>);}functionSearchBar({filterText,inStockOnly}){return(<form><inputtype=\"text\"value={filterText}placeholder=\"Search...\"/><label><inputtype=\"checkbox\"checked={inStockOnly}/>{' '}Only show products in stock</label></form>);}constPRODUCTS=[{category:\"Fruits\",price:\"$1\",stocked:true,name:\"Apple\"},{category:\"Fruits\",price:\"$1\",stocked:true,name:\"Dragonfruit\"},{category:\"Fruits\",price:\"$2\",stocked:false,name:\"Passionfruit\"},{category:\"Vegetables\",price:\"$2\",stocked:true,name:\"Spinach\"},{category:\"Vegetables\",price:\"$4\",stocked:false,name:\"Pumpkin\"},{category:\"Vegetables\",price:\"$1\",stocked:true,name:\"Peas\"}];exportdefaultfunctionApp(){return<FilterableProductTableproducts={PRODUCTS}/>;}\n```\n\n\nNotice that editing the form doesn\u2019t work yet. There is a console error in the sandbox above explaining why:\n\nIn the sandbox above, ProductTable and SearchBar read the filterText and inStockOnly props to render the table, the input, and the checkbox. For example, here is how SearchBar populates the input value:\n\n\n```javascript\nfunctionSearchBar({filterText,inStockOnly}){return(<form><inputtype=\"text\"value={filterText}placeholder=\"Search...\"/>\n```\n\n\nHowever, you haven\u2019t added any code to respond to the user actions like typing yet. This will be your final step.", "source": "https://react.dev/learn/thinking-in-react", "category": "Thinking in React"}
{"instruction": "Explain the concept of Step 5: Add inverse data flow in React.", "input": "", "output": "Currently your app renders correctly with props and state flowing down the hierarchy. But to change the state according to user input, you will need to support data flowing the other way: the form components deep in the hierarchy need to update the state in FilterableProductTable .\n\nReact makes this data flow explicit, but it requires a little more typing than two-way data binding. If you try to type or check the box in the example above, you\u2019ll see that React ignores your input. This is intentional. By writing <input value={filterText} /> , you\u2019ve set the value prop of the input to always be equal to the filterText state passed in from FilterableProductTable . Since filterText state is never set, the input never changes.\n\nYou want to make it so whenever the user changes the form inputs, the state updates to reflect those changes. The state is owned by FilterableProductTable , so only it can call setFilterText and setInStockOnly . To let SearchBar update the FilterableProductTable \u2019s state, you need to pass these functions down to SearchBar :\n\n\n```javascript\nfunctionFilterableProductTable({products}){const[filterText,setFilterText]=useState('');const[inStockOnly,setInStockOnly]=useState(false);return(<div><SearchBarfilterText={filterText}inStockOnly={inStockOnly}onFilterTextChange={setFilterText}onInStockOnlyChange={setInStockOnly}/>\n```\n\n\nInside the SearchBar , you will add the onChange event handlers and set the parent state from them:\n\n\n```javascript\nfunctionSearchBar({filterText,inStockOnly,onFilterTextChange,onInStockOnlyChange}){return(<form><inputtype=\"text\"value={filterText}placeholder=\"Search...\"onChange={(e)=>onFilterTextChange(e.target.value)}/><label><inputtype=\"checkbox\"checked={inStockOnly}onChange={(e)=>onInStockOnlyChange(e.target.checked)}\n```\n\n\nNow the application fully works!\n\n\n```javascript\nimport{useState}from'react';functionFilterableProductTable({products}){const[filterText,setFilterText]=useState('');const[inStockOnly,setInStockOnly]=useState(false);return(<div><SearchBarfilterText={filterText}inStockOnly={inStockOnly}onFilterTextChange={setFilterText}onInStockOnlyChange={setInStockOnly}/><ProductTableproducts={products}filterText={filterText}inStockOnly={inStockOnly}/></div>);}functionProductCategoryRow({category}){return(<tr><thcolSpan=\"2\">{category}</th></tr>);}functionProductRow({product}){constname=product.stocked?product.name:<spanstyle={{color:'red'}}>{product.name}</span>;return(<tr><td>{name}</td><td>{product.price}</td></tr>);}functionProductTable({products,filterText,inStockOnly}){constrows=[];letlastCategory=null;products.forEach((product)=>{if(product.name.toLowerCase().indexOf(filterText.toLowerCase())=== -1){return;}if(inStockOnly&& !product.stocked){return;}if(product.category!==lastCategory){rows.push(<ProductCategoryRowcategory={product.category}key={product.category}/>);}rows.push(<ProductRowproduct={product}key={product.name}/>);lastCategory=product.category;});return(<table><thead><tr><th>Name</th><th>Price</th></tr></thead><tbody>{rows}</tbody></table>);}functionSearchBar({filterText,inStockOnly,onFilterTextChange,onInStockOnlyChange}){return(<form><inputtype=\"text\"value={filterText}placeholder=\"Search...\"onChange={(e)=>onFilterTextChange(e.target.value)}/><label><inputtype=\"checkbox\"checked={inStockOnly}onChange={(e)=>onInStockOnlyChange(e.target.checked)}/>{' '}Only show products in stock</label></form>);}constPRODUCTS=[{category:\"Fruits\",price:\"$1\",stocked:true,name:\"Apple\"},{category:\"Fruits\",price:\"$1\",stocked:true,name:\"Dragonfruit\"},{category:\"Fruits\",price:\"$2\",stocked:false,name:\"Passionfruit\"},{category:\"Vegetables\",price:\"$2\",stocked:true,name:\"Spinach\"},{category:\"Vegetables\",price:\"$4\",stocked:false,name:\"Pumpkin\"},{category:\"Vegetables\",price:\"$1\",stocked:true,name:\"Peas\"}];exportdefaultfunctionApp(){return<FilterableProductTableproducts={PRODUCTS}/>;}\n```\n\n\nYou can learn all about handling events and updating state in the Adding Interactivity section.", "source": "https://react.dev/learn/thinking-in-react", "category": "Thinking in React"}
{"instruction": "Show me a code example of Step 5: Add inverse data flow in React.", "input": "", "output": "Currently your app renders correctly with props and state flowing down the hierarchy. But to change the state according to user input, you will need to support data flowing the other way: the form components deep in the hierarchy need to update the state in FilterableProductTable .\n\nReact makes this data flow explicit, but it requires a little more typing than two-way data binding. If you try to type or check the box in the example above, you\u2019ll see that React ignores your input. This is intentional. By writing <input value={filterText} /> , you\u2019ve set the value prop of the input to always be equal to the filterText state passed in from FilterableProductTable . Since filterText state is never set, the input never changes.\n\nYou want to make it so whenever the user changes the form inputs, the state updates to reflect those changes. The state is owned by FilterableProductTable , so only it can call setFilterText and setInStockOnly . To let SearchBar update the FilterableProductTable \u2019s state, you need to pass these functions down to SearchBar :\n\n\n```javascript\nfunctionFilterableProductTable({products}){const[filterText,setFilterText]=useState('');const[inStockOnly,setInStockOnly]=useState(false);return(<div><SearchBarfilterText={filterText}inStockOnly={inStockOnly}onFilterTextChange={setFilterText}onInStockOnlyChange={setInStockOnly}/>\n```\n\n\nInside the SearchBar , you will add the onChange event handlers and set the parent state from them:\n\n\n```javascript\nfunctionSearchBar({filterText,inStockOnly,onFilterTextChange,onInStockOnlyChange}){return(<form><inputtype=\"text\"value={filterText}placeholder=\"Search...\"onChange={(e)=>onFilterTextChange(e.target.value)}/><label><inputtype=\"checkbox\"checked={inStockOnly}onChange={(e)=>onInStockOnlyChange(e.target.checked)}\n```\n\n\nNow the application fully works!\n\n\n```javascript\nimport{useState}from'react';functionFilterableProductTable({products}){const[filterText,setFilterText]=useState('');const[inStockOnly,setInStockOnly]=useState(false);return(<div><SearchBarfilterText={filterText}inStockOnly={inStockOnly}onFilterTextChange={setFilterText}onInStockOnlyChange={setInStockOnly}/><ProductTableproducts={products}filterText={filterText}inStockOnly={inStockOnly}/></div>);}functionProductCategoryRow({category}){return(<tr><thcolSpan=\"2\">{category}</th></tr>);}functionProductRow({product}){constname=product.stocked?product.name:<spanstyle={{color:'red'}}>{product.name}</span>;return(<tr><td>{name}</td><td>{product.price}</td></tr>);}functionProductTable({products,filterText,inStockOnly}){constrows=[];letlastCategory=null;products.forEach((product)=>{if(product.name.toLowerCase().indexOf(filterText.toLowerCase())=== -1){return;}if(inStockOnly&& !product.stocked){return;}if(product.category!==lastCategory){rows.push(<ProductCategoryRowcategory={product.category}key={product.category}/>);}rows.push(<ProductRowproduct={product}key={product.name}/>);lastCategory=product.category;});return(<table><thead><tr><th>Name</th><th>Price</th></tr></thead><tbody>{rows}</tbody></table>);}functionSearchBar({filterText,inStockOnly,onFilterTextChange,onInStockOnlyChange}){return(<form><inputtype=\"text\"value={filterText}placeholder=\"Search...\"onChange={(e)=>onFilterTextChange(e.target.value)}/><label><inputtype=\"checkbox\"checked={inStockOnly}onChange={(e)=>onInStockOnlyChange(e.target.checked)}/>{' '}Only show products in stock</label></form>);}constPRODUCTS=[{category:\"Fruits\",price:\"$1\",stocked:true,name:\"Apple\"},{category:\"Fruits\",price:\"$1\",stocked:true,name:\"Dragonfruit\"},{category:\"Fruits\",price:\"$2\",stocked:false,name:\"Passionfruit\"},{category:\"Vegetables\",price:\"$2\",stocked:true,name:\"Spinach\"},{category:\"Vegetables\",price:\"$4\",stocked:false,name:\"Pumpkin\"},{category:\"Vegetables\",price:\"$1\",stocked:true,name:\"Peas\"}];exportdefaultfunctionApp(){return<FilterableProductTableproducts={PRODUCTS}/>;}\n```\n\n\nYou can learn all about handling events and updating state in the Adding Interactivity section.", "source": "https://react.dev/learn/thinking-in-react", "category": "Thinking in React"}
{"instruction": "How do I handle Where to go from here in React?", "input": "", "output": "This was a very brief introduction to how to think about building components and applications with React. You can start a React project right now or dive deeper on all the syntax used in this tutorial.", "source": "https://react.dev/learn/thinking-in-react", "category": "Thinking in React"}
{"instruction": "Tell me about Setup for the tutorial.", "input": "", "output": "In the live code editor below, click Fork in the top-right corner to open the editor in a new tab using the website CodeSandbox. CodeSandbox lets you write code in your browser and preview how your users will see the app you\u2019ve created. The new tab should display an empty square and the starter code for this tutorial.\n\n\n```javascript\nexportdefaultfunctionSquare(){return<buttonclassName=\"square\">X</button>;}\n```\n\n\n\n### Note\n\n\nYou can also follow this tutorial using your local development environment. To do this, you need to:\n\n1. Install Node.js\n2. In the CodeSandbox tab you opened earlier, press the top-left corner button to open the menu, and then choose Download Sandbox in that menu to download an archive of the files locally\n3. Unzip the archive, then open a terminal and cd to the directory you unzipped\n4. Install the dependencies with npm install\n5. Run npm start to start a local server and follow the prompts to view the code running in a browser\n\nIf you get stuck, don\u2019t let this stop you! Follow along online instead and try a local setup again later.", "source": "https://react.dev/learn/tutorial-tic-tac-toe", "category": "Tutorial: Tic-Tac-Toe"}
{"instruction": "Show me a code example of Setup for the tutorial in React.", "input": "", "output": "In the live code editor below, click Fork in the top-right corner to open the editor in a new tab using the website CodeSandbox. CodeSandbox lets you write code in your browser and preview how your users will see the app you\u2019ve created. The new tab should display an empty square and the starter code for this tutorial.\n\n\n```javascript\nexportdefaultfunctionSquare(){return<buttonclassName=\"square\">X</button>;}\n```\n\n\n\n### Note\n\n\nYou can also follow this tutorial using your local development environment. To do this, you need to:\n\n1. Install Node.js\n2. In the CodeSandbox tab you opened earlier, press the top-left corner button to open the menu, and then choose Download Sandbox in that menu to download an archive of the files locally\n3. Unzip the archive, then open a terminal and cd to the directory you unzipped\n4. Install the dependencies with npm install\n5. Run npm start to start a local server and follow the prompts to view the code running in a browser\n\nIf you get stuck, don\u2019t let this stop you! Follow along online instead and try a local setup again later.", "source": "https://react.dev/learn/tutorial-tic-tac-toe", "category": "Tutorial: Tic-Tac-Toe"}
{"instruction": "Explain the concept of Overview in React.", "input": "", "output": "Now that you\u2019re set up, let\u2019s get an overview of React!\n\n\n### Inspecting the starter code\n\n\nIn CodeSandbox you\u2019ll see three main sections:\n\n1. The Files section with a list of files like App.js , index.js , styles.css and a folder called public\n2. The code editor where you\u2019ll see the source code of your selected file\n3. The browser section where you\u2019ll see how the code you\u2019ve written will be displayed\n\nThe App.js file should be selected in the Files section. The contents of that file in the code editor should be:\n\n\n```javascript\nexportdefaultfunctionSquare(){return<buttonclassName=\"square\">X</button>;}\n```\n\n\nThe browser section should be displaying a square with an X in it like this:\n\nNow let\u2019s have a look at the files in the starter code.\n\nThe code in App.js creates a component . In React, a component is a piece of reusable code that represents a part of a user interface. Components are used to render, manage, and update the UI elements in your application. Let\u2019s look at the component line by line to see what\u2019s going on:\n\n\n```javascript\nexportdefaultfunctionSquare(){return<buttonclassName=\"square\">X</button>;}\n```\n\n\nThe first line defines a function called Square . The export JavaScript keyword makes this function accessible outside of this file. The default keyword tells other files using your code that it\u2019s the main function in your file.\n\n\n```javascript\nexportdefaultfunctionSquare(){return<buttonclassName=\"square\">X</button>;}\n```\n\n\nThe second line returns a button. The return JavaScript keyword means whatever comes after is returned as a value to the caller of the function. <button> is a JSX element . A JSX element is a combination of JavaScript code and HTML tags that describes what you\u2019d like to display. className=\"square\" is a button property or prop that tells CSS how to style the button. X is the text displayed inside of the button and </button> closes the JSX element to indicate that any following content shouldn\u2019t be placed inside the button.\n\nClick on the file labeled styles.css in the Files section of CodeSandbox. This file defines the styles for your React app. The first two CSS selectors ( * and body ) define the style of large parts of your app while the .square selector defines the style of any component where the className property is set to square . In your code, that would match the button from your Square component in the App.js file.\n\nClick on the file labeled index.js in the Files section of CodeSandbox. You won\u2019t be editing this file during the tutorial but it is the bridge between the component you created in the App.js file and the web browser.\n\n\n```javascript\nimport{StrictMode}from'react';import{createRoot}from'react-dom/client';import'./styles.css';importAppfrom'./App';\n```\n\n\nLines 1-5 bring all the necessary pieces together:\n\n* React\n* React\u2019s library to talk to web browsers (React DOM)\n* the styles for your components\n* the component you created in App.js .\n\nThe remainder of the file brings all the pieces together and injects the final product into index.html in the public folder.\n\n\n### Building the board\n\n\nLet\u2019s get back to App.js . This is where you\u2019ll spend the rest of the tutorial.\n\nCurrently the board is only a single square, but you need nine! If you just try and copy paste your square to make two squares like this:\n\n\n```javascript\nexportdefaultfunctionSquare(){return<buttonclassName=\"square\">X</button><buttonclassName=\"square\">X</button>;}\n```\n\n\nYou\u2019ll get this error:\n\nReact components need to return a single JSX element and not multiple adjacent JSX elements like two buttons. To fix this you can use Fragments ( <> and </> ) to wrap multiple adjacent JSX elements like this:\n\n\n```javascript\nexportdefaultfunctionSquare(){return(<><buttonclassName=\"square\">X</button><buttonclassName=\"square\">X</button></>);}\n```\n\n\nNow you should see:\n\nGreat! Now you just need to copy-paste a few times to add nine squares and\u2026\n\nOh no! The squares are all in a single line, not in a grid like you need for our board. To fix this you\u2019ll need to group your squares into rows with div s and add some CSS classes. While you\u2019re at it, you\u2019ll give each square a number to make sure you know where each square is displayed.\n\nIn the App.js file, update the Square component to look like this:\n\n\n```javascript\nexportdefaultfunctionSquare(){return(<><divclassName=\"board-row\"><buttonclassName=\"square\">1</button><buttonclassName=\"square\">2</button><buttonclassName=\"square\">3</button></div><divclassName=\"board-row\"><buttonclassName=\"square\">4</button><buttonclassName=\"square\">5</button><buttonclassName=\"square\">6</button></div><divclassName=\"board-row\"><buttonclassName=\"square\">7</button><buttonclassName=\"square\">8</button><buttonclassName=\"square\">9</button></div></>);}\n```\n\n\nThe CSS defined in styles.css styles the divs with the className of board-row . Now that you\u2019ve grouped your components into rows with the styled div s you have your tic-tac-toe board:\n\nBut you now have a problem. Your component named Square , really isn\u2019t a square anymore. Let\u2019s fix that by changing the name to Board :\n\n\n```javascript\nexportdefaultfunctionBoard(){//...}\n```\n\n\nAt this point your code should look something like this:\n\n\n```javascript\nexportdefaultfunctionBoard(){return(<><divclassName=\"board-row\"><buttonclassName=\"square\">1</button><buttonclassName=\"square\">2</button><buttonclassName=\"square\">3</button></div><divclassName=\"board-row\"><buttonclassName=\"square\">4</button><buttonclassName=\"square\">5</button><buttonclassName=\"square\">6</button></div><divclassName=\"board-row\"><buttonclassName=\"square\">7</button><buttonclassName=\"square\">8</button><buttonclassName=\"square\">9</button></div></>);}\n```\n\n\n\n### Note\n\n\nPsssst\u2026 That\u2019s a lot to type! It\u2019s okay to copy and paste code from this page. However, if you\u2019re up for a little challenge, we recommend only copying code that you\u2019ve manually typed at least once yourself.\n\n\n### Passing data through props\n\n\nNext, you\u2019ll want to change the value of a square from empty to \u201cX\u201d when the user clicks on the square. With how you\u2019ve built the board so far you would need to copy-paste the code that updates the square nine times (once for each square you have)! Instead of copy-pasting, React\u2019s component architecture allows you to create a reusable component to avoid messy, duplicated code.\n\nFirst, you are going to copy the line defining your first square ( <button className=\"square\">1</button> ) from your Board component into a new Square component:\n\n\n```javascript\nfunctionSquare(){return<buttonclassName=\"square\">1</button>;}exportdefaultfunctionBoard(){// ...}\n```\n\n\nThen you\u2019ll update the Board component to render that Square component using JSX syntax:\n\n\n```javascript\n// ...exportdefaultfunctionBoard(){return(<><divclassName=\"board-row\"><Square/><Square/><Square/></div><divclassName=\"board-row\"><Square/><Square/><Square/></div><divclassName=\"board-row\"><Square/><Square/><Square/></div></>);}\n```\n\n\nNote how unlike the browser div s, your own components Board and Square must start with a capital letter.\n\nLet\u2019s take a look:\n\nOh no! You lost the numbered squares you had before. Now each square says \u201c1\u201d. To fix this, you will use props to pass the value each square should have from the parent component ( Board ) to its child ( Square ).\n\nUpdate the Square component to read the value prop that you\u2019ll pass from the Board :\n\n\n```javascript\nfunctionSquare({value}){return<buttonclassName=\"square\">1</button>;}\n```\n\n\nfunction Square({ value }) indicates the Square component can be passed a prop called value .\n\nNow you want to display that value instead of 1 inside every square. Try doing it like this:\n\n\n```javascript\nfunctionSquare({value}){return<buttonclassName=\"square\">value</button>;}\n```\n\n\nOops, this is not what you wanted:\n\nYou wanted to render the JavaScript variable called value from your component, not the word \u201cvalue\u201d. To \u201cescape into JavaScript\u201d from JSX, you need curly braces. Add curly braces around value in JSX like so:\n\n\n```javascript\nfunctionSquare({value}){return<buttonclassName=\"square\">{value}</button>;}\n```\n\n\nFor now, you should see an empty board:\n\nThis is because the Board component hasn\u2019t passed the value prop to each Square component it renders yet. To fix it you\u2019ll add the value prop to each Square component rendered by the Board component:\n\n\n```javascript\nexportdefaultfunctionBoard(){return(<><divclassName=\"board-row\"><Squarevalue=\"1\"/><Squarevalue=\"2\"/><Squarevalue=\"3\"/></div><divclassName=\"board-row\"><Squarevalue=\"4\"/><Squarevalue=\"5\"/><Squarevalue=\"6\"/></div><divclassName=\"board-row\"><Squarevalue=\"7\"/><Squarevalue=\"8\"/><Squarevalue=\"9\"/></div></>);}\n```\n\n\nNow you should see a grid of numbers again:\n\nYour updated code should look like this:\n\n\n```javascript\nfunctionSquare({value}){return<buttonclassName=\"square\">{value}</button>;}exportdefaultfunctionBoard(){return(<><divclassName=\"board-row\"><Squarevalue=\"1\"/><Squarevalue=\"2\"/><Squarevalue=\"3\"/></div><divclassName=\"board-row\"><Squarevalue=\"4\"/><Squarevalue=\"5\"/><Squarevalue=\"6\"/></div><divclassName=\"board-row\"><Squarevalue=\"7\"/><Squarevalue=\"8\"/><Squarevalue=\"9\"/></div></>);}\n```\n\n\n\n### Making an interactive component\n\n\nLet\u2019s fill the Square component with an X when you click it. Declare a function called handleClick inside of the Square . Then, add onClick to the props of the button JSX element returned from the Square :\n\n\n```javascript\nfunctionSquare({value}){functionhandleClick(){console.log('clicked!');}return(<buttonclassName=\"square\"onClick={handleClick}>{value}</button>);}\n```\n\n\nIf you click on a square now, you should see a log saying \"clicked!\" in the Console tab at the bottom of the Browser section in CodeSandbox. Clicking the square more than once will log \"clicked!\" again. Repeated console logs with the same message will not create more lines in the console. Instead, you will see an incrementing counter next to your first \"clicked!\" log.\n\n\n### Note\n\n\nIf you are following this tutorial using your local development environment, you need to open your browser\u2019s Console. For example, if you use the Chrome browser, you can view the Console with the keyboard shortcut Shift + Ctrl + J (on Windows/Linux) or Option + \u2318 + J (on macOS).\n\nAs a next step, you want the Square component to \u201cremember\u201d that it got clicked, and fill it with an \u201cX\u201d mark. To \u201cremember\u201d things, components use state .\n\nReact provides a special function called useState that you can call from your component to let it \u201cremember\u201d things. Let\u2019s store the current value of the Square in state, and change it when the Square is clicked.\n\nImport useState at the top of the file. Remove the value prop from the Square component. Instead, add a new line at the start of the Square that calls useState . Have it return a state variable called value :\n\n\n```javascript\nimport{useState}from'react';functionSquare(){const[value,setValue]=useState(null);functionhandleClick(){//...\n```\n\n\nvalue stores the value and setValue is a function that can be used to change the value. The null passed to useState is used as the initial value for this state variable, so value here starts off equal to null .\n\nSince the Square component no longer accepts props anymore, you\u2019ll remove the value prop from all nine of the Square components created by the Board component:\n\n\n```javascript\n// ...exportdefaultfunctionBoard(){return(<><divclassName=\"board-row\"><Square/><Square/><Square/></div><divclassName=\"board-row\"><Square/><Square/><Square/></div><divclassName=\"board-row\"><Square/><Square/><Square/></div></>);}\n```\n\n\nNow you\u2019ll change Square to display an \u201cX\u201d when clicked. Replace the console.log(\"clicked!\"); event handler with setValue('X'); . Now your Square component looks like this:\n\n\n```javascript\nfunctionSquare(){const[value,setValue]=useState(null);functionhandleClick(){setValue('X');}return(<buttonclassName=\"square\"onClick={handleClick}>{value}</button>);}\n```\n\n\nBy calling this set function from an onClick handler, you\u2019re telling React to re-render that Square whenever its <button> is clicked. After the update, the Square \u2019s value will be 'X' , so you\u2019ll see the \u201cX\u201d on the game board. Click on any Square, and \u201cX\u201d should show up:\n\nEach Square has its own state: the value stored in each Square is completely independent of the others. When you call a set function in a component, React automatically updates the child components inside too.\n\nAfter you\u2019ve made the above changes, your code will look like this:\n\n\n```javascript\nimport{useState}from'react';functionSquare(){const[value,setValue]=useState(null);functionhandleClick(){setValue('X');}return(<buttonclassName=\"square\"onClick={handleClick}>{value}</button>);}exportdefaultfunctionBoard(){return(<><divclassName=\"board-row\"><Square/><Square/><Square/></div><divclassName=\"board-row\"><Square/><Square/><Square/></div><divclassName=\"board-row\"><Square/><Square/><Square/></div></>);}\n```\n\n\n\n### React Developer Tools\n\n\nReact DevTools let you check the props and the state of your React components. You can find the React DevTools tab at the bottom of the browser section in CodeSandbox:\n\nTo inspect a particular component on the screen, use the button in the top left corner of React DevTools:\n\n\n### Note\n\n\nFor local development, React DevTools is available as a Chrome , Firefox , and Edge browser extension. Install it, and the Components tab will appear in your browser Developer Tools for sites using React.", "source": "https://react.dev/learn/tutorial-tic-tac-toe", "category": "Tutorial: Tic-Tac-Toe"}
{"instruction": "Show me a code example of Overview in React.", "input": "", "output": "Now that you\u2019re set up, let\u2019s get an overview of React!\n\n\n### Inspecting the starter code\n\n\nIn CodeSandbox you\u2019ll see three main sections:\n\n1. The Files section with a list of files like App.js , index.js , styles.css and a folder called public\n2. The code editor where you\u2019ll see the source code of your selected file\n3. The browser section where you\u2019ll see how the code you\u2019ve written will be displayed\n\nThe App.js file should be selected in the Files section. The contents of that file in the code editor should be:\n\n\n```javascript\nexportdefaultfunctionSquare(){return<buttonclassName=\"square\">X</button>;}\n```\n\n\nThe browser section should be displaying a square with an X in it like this:\n\nNow let\u2019s have a look at the files in the starter code.\n\nThe code in App.js creates a component . In React, a component is a piece of reusable code that represents a part of a user interface. Components are used to render, manage, and update the UI elements in your application. Let\u2019s look at the component line by line to see what\u2019s going on:\n\n\n```javascript\nexportdefaultfunctionSquare(){return<buttonclassName=\"square\">X</button>;}\n```\n\n\nThe first line defines a function called Square . The export JavaScript keyword makes this function accessible outside of this file. The default keyword tells other files using your code that it\u2019s the main function in your file.\n\n\n```javascript\nexportdefaultfunctionSquare(){return<buttonclassName=\"square\">X</button>;}\n```\n\n\nThe second line returns a button. The return JavaScript keyword means whatever comes after is returned as a value to the caller of the function. <button> is a JSX element . A JSX element is a combination of JavaScript code and HTML tags that describes what you\u2019d like to display. className=\"square\" is a button property or prop that tells CSS how to style the button. X is the text displayed inside of the button and </button> closes the JSX element to indicate that any following content shouldn\u2019t be placed inside the button.\n\nClick on the file labeled styles.css in the Files section of CodeSandbox. This file defines the styles for your React app. The first two CSS selectors ( * and body ) define the style of large parts of your app while the .square selector defines the style of any component where the className property is set to square . In your code, that would match the button from your Square component in the App.js file.\n\nClick on the file labeled index.js in the Files section of CodeSandbox. You won\u2019t be editing this file during the tutorial but it is the bridge between the component you created in the App.js file and the web browser.\n\n\n```javascript\nimport{StrictMode}from'react';import{createRoot}from'react-dom/client';import'./styles.css';importAppfrom'./App';\n```\n\n\nLines 1-5 bring all the necessary pieces together:\n\n* React\n* React\u2019s library to talk to web browsers (React DOM)\n* the styles for your components\n* the component you created in App.js .\n\nThe remainder of the file brings all the pieces together and injects the final product into index.html in the public folder.\n\n\n### Building the board\n\n\nLet\u2019s get back to App.js . This is where you\u2019ll spend the rest of the tutorial.\n\nCurrently the board is only a single square, but you need nine! If you just try and copy paste your square to make two squares like this:\n\n\n```javascript\nexportdefaultfunctionSquare(){return<buttonclassName=\"square\">X</button><buttonclassName=\"square\">X</button>;}\n```\n\n\nYou\u2019ll get this error:\n\nReact components need to return a single JSX element and not multiple adjacent JSX elements like two buttons. To fix this you can use Fragments ( <> and </> ) to wrap multiple adjacent JSX elements like this:\n\n\n```javascript\nexportdefaultfunctionSquare(){return(<><buttonclassName=\"square\">X</button><buttonclassName=\"square\">X</button></>);}\n```\n\n\nNow you should see:\n\nGreat! Now you just need to copy-paste a few times to add nine squares and\u2026\n\nOh no! The squares are all in a single line, not in a grid like you need for our board. To fix this you\u2019ll need to group your squares into rows with div s and add some CSS classes. While you\u2019re at it, you\u2019ll give each square a number to make sure you know where each square is displayed.\n\nIn the App.js file, update the Square component to look like this:\n\n\n```javascript\nexportdefaultfunctionSquare(){return(<><divclassName=\"board-row\"><buttonclassName=\"square\">1</button><buttonclassName=\"square\">2</button><buttonclassName=\"square\">3</button></div><divclassName=\"board-row\"><buttonclassName=\"square\">4</button><buttonclassName=\"square\">5</button><buttonclassName=\"square\">6</button></div><divclassName=\"board-row\"><buttonclassName=\"square\">7</button><buttonclassName=\"square\">8</button><buttonclassName=\"square\">9</button></div></>);}\n```\n\n\nThe CSS defined in styles.css styles the divs with the className of board-row . Now that you\u2019ve grouped your components into rows with the styled div s you have your tic-tac-toe board:\n\nBut you now have a problem. Your component named Square , really isn\u2019t a square anymore. Let\u2019s fix that by changing the name to Board :\n\n\n```javascript\nexportdefaultfunctionBoard(){//...}\n```\n\n\nAt this point your code should look something like this:\n\n\n```javascript\nexportdefaultfunctionBoard(){return(<><divclassName=\"board-row\"><buttonclassName=\"square\">1</button><buttonclassName=\"square\">2</button><buttonclassName=\"square\">3</button></div><divclassName=\"board-row\"><buttonclassName=\"square\">4</button><buttonclassName=\"square\">5</button><buttonclassName=\"square\">6</button></div><divclassName=\"board-row\"><buttonclassName=\"square\">7</button><buttonclassName=\"square\">8</button><buttonclassName=\"square\">9</button></div></>);}\n```\n\n\n\n### Note\n\n\nPsssst\u2026 That\u2019s a lot to type! It\u2019s okay to copy and paste code from this page. However, if you\u2019re up for a little challenge, we recommend only copying code that you\u2019ve manually typed at least once yourself.\n\n\n### Passing data through props\n\n\nNext, you\u2019ll want to change the value of a square from empty to \u201cX\u201d when the user clicks on the square. With how you\u2019ve built the board so far you would need to copy-paste the code that updates the square nine times (once for each square you have)! Instead of copy-pasting, React\u2019s component architecture allows you to create a reusable component to avoid messy, duplicated code.\n\nFirst, you are going to copy the line defining your first square ( <button className=\"square\">1</button> ) from your Board component into a new Square component:\n\n\n```javascript\nfunctionSquare(){return<buttonclassName=\"square\">1</button>;}exportdefaultfunctionBoard(){// ...}\n```\n\n\nThen you\u2019ll update the Board component to render that Square component using JSX syntax:\n\n\n```javascript\n// ...exportdefaultfunctionBoard(){return(<><divclassName=\"board-row\"><Square/><Square/><Square/></div><divclassName=\"board-row\"><Square/><Square/><Square/></div><divclassName=\"board-row\"><Square/><Square/><Square/></div></>);}\n```\n\n\nNote how unlike the browser div s, your own components Board and Square must start with a capital letter.\n\nLet\u2019s take a look:\n\nOh no! You lost the numbered squares you had before. Now each square says \u201c1\u201d. To fix this, you will use props to pass the value each square should have from the parent component ( Board ) to its child ( Square ).\n\nUpdate the Square component to read the value prop that you\u2019ll pass from the Board :\n\n\n```javascript\nfunctionSquare({value}){return<buttonclassName=\"square\">1</button>;}\n```\n\n\nfunction Square({ value }) indicates the Square component can be passed a prop called value .\n\nNow you want to display that value instead of 1 inside every square. Try doing it like this:\n\n\n```javascript\nfunctionSquare({value}){return<buttonclassName=\"square\">value</button>;}\n```\n\n\nOops, this is not what you wanted:\n\nYou wanted to render the JavaScript variable called value from your component, not the word \u201cvalue\u201d. To \u201cescape into JavaScript\u201d from JSX, you need curly braces. Add curly braces around value in JSX like so:\n\n\n```javascript\nfunctionSquare({value}){return<buttonclassName=\"square\">{value}</button>;}\n```\n\n\nFor now, you should see an empty board:\n\nThis is because the Board component hasn\u2019t passed the value prop to each Square component it renders yet. To fix it you\u2019ll add the value prop to each Square component rendered by the Board component:\n\n\n```javascript\nexportdefaultfunctionBoard(){return(<><divclassName=\"board-row\"><Squarevalue=\"1\"/><Squarevalue=\"2\"/><Squarevalue=\"3\"/></div><divclassName=\"board-row\"><Squarevalue=\"4\"/><Squarevalue=\"5\"/><Squarevalue=\"6\"/></div><divclassName=\"board-row\"><Squarevalue=\"7\"/><Squarevalue=\"8\"/><Squarevalue=\"9\"/></div></>);}\n```\n\n\nNow you should see a grid of numbers again:\n\nYour updated code should look like this:\n\n\n```javascript\nfunctionSquare({value}){return<buttonclassName=\"square\">{value}</button>;}exportdefaultfunctionBoard(){return(<><divclassName=\"board-row\"><Squarevalue=\"1\"/><Squarevalue=\"2\"/><Squarevalue=\"3\"/></div><divclassName=\"board-row\"><Squarevalue=\"4\"/><Squarevalue=\"5\"/><Squarevalue=\"6\"/></div><divclassName=\"board-row\"><Squarevalue=\"7\"/><Squarevalue=\"8\"/><Squarevalue=\"9\"/></div></>);}\n```\n\n\n\n### Making an interactive component\n\n\nLet\u2019s fill the Square component with an X when you click it. Declare a function called handleClick inside of the Square . Then, add onClick to the props of the button JSX element returned from the Square :\n\n\n```javascript\nfunctionSquare({value}){functionhandleClick(){console.log('clicked!');}return(<buttonclassName=\"square\"onClick={handleClick}>{value}</button>);}\n```\n\n\nIf you click on a square now, you should see a log saying \"clicked!\" in the Console tab at the bottom of the Browser section in CodeSandbox. Clicking the square more than once will log \"clicked!\" again. Repeated console logs with the same message will not create more lines in the console. Instead, you will see an incrementing counter next to your first \"clicked!\" log.\n\n\n### Note\n\n\nIf you are following this tutorial using your local development environment, you need to open your browser\u2019s Console. For example, if you use the Chrome browser, you can view the Console with the keyboard shortcut Shift + Ctrl + J (on Windows/Linux) or Option + \u2318 + J (on macOS).\n\nAs a next step, you want the Square component to \u201cremember\u201d that it got clicked, and fill it with an \u201cX\u201d mark. To \u201cremember\u201d things, components use state .\n\nReact provides a special function called useState that you can call from your component to let it \u201cremember\u201d things. Let\u2019s store the current value of the Square in state, and change it when the Square is clicked.\n\nImport useState at the top of the file. Remove the value prop from the Square component. Instead, add a new line at the start of the Square that calls useState . Have it return a state variable called value :\n\n\n```javascript\nimport{useState}from'react';functionSquare(){const[value,setValue]=useState(null);functionhandleClick(){//...\n```\n\n\nvalue stores the value and setValue is a function that can be used to change the value. The null passed to useState is used as the initial value for this state variable, so value here starts off equal to null .\n\nSince the Square component no longer accepts props anymore, you\u2019ll remove the value prop from all nine of the Square components created by the Board component:\n\n\n```javascript\n// ...exportdefaultfunctionBoard(){return(<><divclassName=\"board-row\"><Square/><Square/><Square/></div><divclassName=\"board-row\"><Square/><Square/><Square/></div><divclassName=\"board-row\"><Square/><Square/><Square/></div></>);}\n```\n\n\nNow you\u2019ll change Square to display an \u201cX\u201d when clicked. Replace the console.log(\"clicked!\"); event handler with setValue('X'); . Now your Square component looks like this:\n\n\n```javascript\nfunctionSquare(){const[value,setValue]=useState(null);functionhandleClick(){setValue('X');}return(<buttonclassName=\"square\"onClick={handleClick}>{value}</button>);}\n```\n\n\nBy calling this set function from an onClick handler, you\u2019re telling React to re-render that Square whenever its <button> is clicked. After the update, the Square \u2019s value will be 'X' , so you\u2019ll see the \u201cX\u201d on the game board. Click on any Square, and \u201cX\u201d should show up:\n\nEach Square has its own state: the value stored in each Square is completely independent of the others. When you call a set function in a component, React automatically updates the child components inside too.\n\nAfter you\u2019ve made the above changes, your code will look like this:\n\n\n```javascript\nimport{useState}from'react';functionSquare(){const[value,setValue]=useState(null);functionhandleClick(){setValue('X');}return(<buttonclassName=\"square\"onClick={handleClick}>{value}</button>);}exportdefaultfunctionBoard(){return(<><divclassName=\"board-row\"><Square/><Square/><Square/></div><divclassName=\"board-row\"><Square/><Square/><Square/></div><divclassName=\"board-row\"><Square/><Square/><Square/></div></>);}\n```\n\n\n\n### React Developer Tools\n\n\nReact DevTools let you check the props and the state of your React components. You can find the React DevTools tab at the bottom of the browser section in CodeSandbox:\n\nTo inspect a particular component on the screen, use the button in the top left corner of React DevTools:\n\n\n### Note\n\n\nFor local development, React DevTools is available as a Chrome , Firefox , and Edge browser extension. Install it, and the Components tab will appear in your browser Developer Tools for sites using React.", "source": "https://react.dev/learn/tutorial-tic-tac-toe", "category": "Tutorial: Tic-Tac-Toe"}
{"instruction": "Tell me about Completing the game.", "input": "", "output": "By this point, you have all the basic building blocks for your tic-tac-toe game. To have a complete game, you now need to alternate placing \u201cX\u201ds and \u201cO\u201ds on the board, and you need a way to determine a winner.\n\n\n### Lifting state up\n\n\nCurrently, each Square component maintains a part of the game\u2019s state. To check for a winner in a tic-tac-toe game, the Board would need to somehow know the state of each of the 9 Square components.\n\nHow would you approach that? At first, you might guess that the Board needs to \u201cask\u201d each Square for that Square \u2019s state. Although this approach is technically possible in React, we discourage it because the code becomes difficult to understand, susceptible to bugs, and hard to refactor. Instead, the best approach is to store the game\u2019s state in the parent Board component instead of in each Square . The Board component can tell each Square what to display by passing a prop, like you did when you passed a number to each Square.\n\nTo collect data from multiple children, or to have two child components communicate with each other, declare the shared state in their parent component instead. The parent component can pass that state back down to the children via props. This keeps the child components in sync with each other and with their parent.\n\nLifting state into a parent component is common when React components are refactored.\n\nLet\u2019s take this opportunity to try it out. Edit the Board component so that it declares a state variable named squares that defaults to an array of 9 nulls corresponding to the 9 squares:\n\n\n```javascript\n// ...exportdefaultfunctionBoard(){const[squares,setSquares]=useState(Array(9).fill(null));return(// ...);}\n```\n\n\nArray(9).fill(null) creates an array with nine elements and sets each of them to null . The useState() call around it declares a squares state variable that\u2019s initially set to that array. Each entry in the array corresponds to the value of a square. When you fill the board in later, the squares array will look like this:\n\n\n```javascript\n['O',null,'X','X','X','O','O',null,null]\n```\n\n\nNow your Board component needs to pass the value prop down to each Square that it renders:\n\n\n```javascript\nexportdefaultfunctionBoard(){const[squares,setSquares]=useState(Array(9).fill(null));return(<><divclassName=\"board-row\"><Squarevalue={squares[0]}/><Squarevalue={squares[1]}/><Squarevalue={squares[2]}/></div><divclassName=\"board-row\"><Squarevalue={squares[3]}/><Squarevalue={squares[4]}/><Squarevalue={squares[5]}/></div><divclassName=\"board-row\"><Squarevalue={squares[6]}/><Squarevalue={squares[7]}/><Squarevalue={squares[8]}/></div></>);}\n```\n\n\nNext, you\u2019ll edit the Square component to receive the value prop from the Board component. This will require removing the Square component\u2019s own stateful tracking of value and the button\u2019s onClick prop:\n\n\n```javascript\nfunctionSquare({value}){return<buttonclassName=\"square\">{value}</button>;}\n```\n\n\nAt this point you should see an empty tic-tac-toe board:\n\nAnd your code should look like this:\n\n\n```javascript\nimport{useState}from'react';functionSquare({value}){return<buttonclassName=\"square\">{value}</button>;}exportdefaultfunctionBoard(){const[squares,setSquares]=useState(Array(9).fill(null));return(<><divclassName=\"board-row\"><Squarevalue={squares[0]}/><Squarevalue={squares[1]}/><Squarevalue={squares[2]}/></div><divclassName=\"board-row\"><Squarevalue={squares[3]}/><Squarevalue={squares[4]}/><Squarevalue={squares[5]}/></div><divclassName=\"board-row\"><Squarevalue={squares[6]}/><Squarevalue={squares[7]}/><Squarevalue={squares[8]}/></div></>);}\n```\n\n\nEach Square will now receive a value prop that will either be 'X' , 'O' , or null for empty squares.\n\nNext, you need to change what happens when a Square is clicked. The Board component now maintains which squares are filled. You\u2019ll need to create a way for the Square to update the Board \u2019s state. Since state is private to a component that defines it, you cannot update the Board \u2019s state directly from Square .\n\nInstead, you\u2019ll pass down a function from the Board component to the Square component, and you\u2019ll have Square call that function when a square is clicked. You\u2019ll start with the function that the Square component will call when it is clicked. You\u2019ll call that function onSquareClick :\n\n\n```javascript\nfunctionSquare({value}){return(<buttonclassName=\"square\"onClick={onSquareClick}>{value}</button>);}\n```\n\n\nNext, you\u2019ll add the onSquareClick function to the Square component\u2019s props:\n\n\n```javascript\nfunctionSquare({value,onSquareClick}){return(<buttonclassName=\"square\"onClick={onSquareClick}>{value}</button>);}\n```\n\n\nNow you\u2019ll connect the onSquareClick prop to a function in the Board component that you\u2019ll name handleClick . To connect onSquareClick to handleClick you\u2019ll pass a function to the onSquareClick prop of the first Square component:\n\n\n```javascript\nexportdefaultfunctionBoard(){const[squares,setSquares]=useState(Array(9).fill(null));return(<><divclassName=\"board-row\"><Squarevalue={squares[0]}onSquareClick={handleClick}/>//...);}\n```\n\n\nLastly, you will define the handleClick function inside the Board component to update the squares array holding your board\u2019s state:\n\n\n```javascript\nexportdefaultfunctionBoard(){const[squares,setSquares]=useState(Array(9).fill(null));functionhandleClick(){constnextSquares=squares.slice();nextSquares[0]=\"X\";setSquares(nextSquares);}return(// ...)}\n```\n\n\nThe handleClick function creates a copy of the squares array ( nextSquares ) with the JavaScript slice() Array method. Then, handleClick updates the nextSquares array to add X to the first ( [0] index) square.\n\nCalling the setSquares function lets React know the state of the component has changed. This will trigger a re-render of the components that use the squares state ( Board ) as well as its child components (the Square components that make up the board).\n\n\n### Note\n\n\nJavaScript supports closures which means an inner function (e.g. handleClick ) has access to variables and functions defined in an outer function (e.g. Board ). The handleClick function can read the squares state and call the setSquares method because they are both defined inside of the Board function.\n\nNow you can add X\u2019s to the board\u2026  but only to the upper left square. Your handleClick function is hardcoded to update the index for the upper left square ( 0 ). Let\u2019s update handleClick to be able to update any square. Add an argument i to the handleClick function that takes the index of the square to update:\n\n\n```javascript\nexportdefaultfunctionBoard(){const[squares,setSquares]=useState(Array(9).fill(null));functionhandleClick(i){constnextSquares=squares.slice();nextSquares[i]=\"X\";setSquares(nextSquares);}return(// ...)}\n```\n\n\nNext, you will need to pass that i to handleClick . You could try to set the onSquareClick prop of square to be handleClick(0) directly in the JSX like this, but it won\u2019t work:\n\n\n```javascript\n<Squarevalue={squares[0]}onSquareClick={handleClick(0)}/>\n```\n\n\nHere is why this doesn\u2019t work. The handleClick(0) call will be a part of rendering the board component. Because handleClick(0) alters the state of the board component by calling setSquares , your entire board component will be re-rendered again. But this runs handleClick(0) again, leading to an infinite loop:\n\nWhy didn\u2019t this problem happen earlier?\n\nWhen you were passing onSquareClick={handleClick} , you were passing the handleClick function down as a prop. You were not calling it! But now you are calling that function right away\u2014notice the parentheses in handleClick(0) \u2014and that\u2019s why it runs too early. You don\u2019t want to call handleClick until the user clicks!\n\nYou could fix this by creating a function like handleFirstSquareClick that calls handleClick(0) , a function like handleSecondSquareClick that calls handleClick(1) , and so on. You would pass (rather than call) these functions down as props like onSquareClick={handleFirstSquareClick} . This would solve the infinite loop.\n\nHowever, defining nine different functions and giving each of them a name is too verbose. Instead, let\u2019s do this:\n\n\n```javascript\nexportdefaultfunctionBoard(){// ...return(<><divclassName=\"board-row\"><Squarevalue={squares[0]}onSquareClick={()=>handleClick(0)}/>// ...);}\n```\n\n\nNotice the new () => syntax. Here, () => handleClick(0) is an arrow function, which is a shorter way to define functions. When the square is clicked, the code after the => \u201carrow\u201d will run, calling handleClick(0) .\n\nNow you need to update the other eight squares to call handleClick from the arrow functions you pass. Make sure that the argument for each call of the handleClick corresponds to the index of the correct square:\n\n\n```javascript\nexportdefaultfunctionBoard(){// ...return(<><divclassName=\"board-row\"><Squarevalue={squares[0]}onSquareClick={()=>handleClick(0)}/><Squarevalue={squares[1]}onSquareClick={()=>handleClick(1)}/><Squarevalue={squares[2]}onSquareClick={()=>handleClick(2)}/></div><divclassName=\"board-row\"><Squarevalue={squares[3]}onSquareClick={()=>handleClick(3)}/><Squarevalue={squares[4]}onSquareClick={()=>handleClick(4)}/><Squarevalue={squares[5]}onSquareClick={()=>handleClick(5)}/></div><divclassName=\"board-row\"><Squarevalue={squares[6]}onSquareClick={()=>handleClick(6)}/><Squarevalue={squares[7]}onSquareClick={()=>handleClick(7)}/><Squarevalue={squares[8]}onSquareClick={()=>handleClick(8)}/></div></>);};\n```\n\n\nNow you can again add X\u2019s to any square on the board by clicking on them:\n\nBut this time all the state management is handled by the Board component!\n\nThis is what your code should look like:\n\n\n```javascript\nimport{useState}from'react';functionSquare({value,onSquareClick}){return(<buttonclassName=\"square\"onClick={onSquareClick}>{value}</button>);}exportdefaultfunctionBoard(){const[squares,setSquares]=useState(Array(9).fill(null));functionhandleClick(i){constnextSquares=squares.slice();nextSquares[i]='X';setSquares(nextSquares);}return(<><divclassName=\"board-row\"><Squarevalue={squares[0]}onSquareClick={()=>handleClick(0)}/><Squarevalue={squares[1]}onSquareClick={()=>handleClick(1)}/><Squarevalue={squares[2]}onSquareClick={()=>handleClick(2)}/></div><divclassName=\"board-row\"><Squarevalue={squares[3]}onSquareClick={()=>handleClick(3)}/><Squarevalue={squares[4]}onSquareClick={()=>handleClick(4)}/><Squarevalue={squares[5]}onSquareClick={()=>handleClick(5)}/></div><divclassName=\"board-row\"><Squarevalue={squares[6]}onSquareClick={()=>handleClick(6)}/><Squarevalue={squares[7]}onSquareClick={()=>handleClick(7)}/><Squarevalue={squares[8]}onSquareClick={()=>handleClick(8)}/></div></>);}\n```\n\n\nNow that your state handling is in the Board component, the parent Board component passes props to the child Square components so that they can be displayed correctly. When clicking on a Square , the child Square component now asks the parent Board component to update the state of the board. When the Board \u2019s state changes, both the Board component and every child Square re-renders automatically. Keeping the state of all squares in the Board component will allow it to determine the winner in the future.\n\nLet\u2019s recap what happens when a user clicks the top left square on your board to add an X to it:\n\n1. Clicking on the upper left square runs the function that the button received as its onClick prop from the Square . The Square component received that function as its onSquareClick prop from the Board . The Board component defined that function directly in the JSX. It calls handleClick with an argument of 0 .\n2. handleClick uses the argument ( 0 ) to update the first element of the squares array from null to X .\n3. The squares state of the Board component was updated, so the Board and all of its children re-render. This causes the value prop of the Square component with index 0 to change from null to X .\n\nIn the end the user sees that the upper left square has changed from empty to having an X after clicking it.\n\n\n### Note\n\n\nThe DOM <button> element\u2019s onClick attribute has a special meaning to React because it is a built-in component. For custom components like Square, the naming is up to you. You could give any name to the Square \u2019s onSquareClick prop or Board \u2019s handleClick function, and the code would work the same. In React, it\u2019s conventional to use onSomething names for props which represent events and handleSomething for the function definitions which handle those events.\n\n\n### Why immutability is important\n\n\nNote how in handleClick , you call .slice() to create a copy of the squares array instead of modifying the existing array. To explain why, we need to discuss immutability and why immutability is important to learn.\n\nThere are generally two approaches to changing data. The first approach is to mutate the data by directly changing the data\u2019s values. The second approach is to replace the data with a new copy which has the desired changes. Here is what it would look like if you mutated the squares array:\n\n\n```javascript\nconstsquares=[null,null,null,null,null,null,null,null,null];squares[0]='X';// Now `squares` is [\"X\", null, null, null, null, null, null, null, null];\n```\n\n\nAnd here is what it would look like if you changed data without mutating the squares array:\n\n\n```javascript\nconstsquares=[null,null,null,null,null,null,null,null,null];constnextSquares=['X',null,null,null,null,null,null,null,null];// Now `squares` is unchanged, but `nextSquares` first element is 'X' rather than `null`\n```\n\n\nThe result is the same but by not mutating (changing the underlying data) directly, you gain several benefits.\n\nImmutability makes complex features much easier to implement. Later in this tutorial, you will implement a \u201ctime travel\u201d feature that lets you review the game\u2019s history and \u201cjump back\u201d to past moves. This functionality isn\u2019t specific to games\u2014an ability to undo and redo certain actions is a common requirement for apps. Avoiding direct data mutation lets you keep previous versions of the data intact, and reuse them later.\n\nThere is also another benefit of immutability. By default, all child components re-render automatically when the state of a parent component changes. This includes even the child components that weren\u2019t affected by the change. Although re-rendering is not by itself noticeable to the user (you shouldn\u2019t actively try to avoid it!), you might want to skip re-rendering a part of the tree that clearly wasn\u2019t affected by it for performance reasons. Immutability makes it very cheap for components to compare whether their data has changed or not. You can learn more about how React chooses when to re-render a component in the memo API reference .\n\n\n### Taking turns\n\n\nIt\u2019s now time to fix a major defect in this tic-tac-toe game: the \u201cO\u201ds cannot be marked on the board.\n\nYou\u2019ll set the first move to be \u201cX\u201d by default. Let\u2019s keep track of this by adding another piece of state to the Board component:\n\n\n```javascript\nfunctionBoard(){const[xIsNext,setXIsNext]=useState(true);const[squares,setSquares]=useState(Array(9).fill(null));// ...}\n```\n\n\nEach time a player moves, xIsNext (a boolean) will be flipped to determine which player goes next and the game\u2019s state will be saved. You\u2019ll update the Board \u2019s handleClick function to flip the value of xIsNext :\n\n\n```javascript\nexportdefaultfunctionBoard(){const[xIsNext,setXIsNext]=useState(true);const[squares,setSquares]=useState(Array(9).fill(null));functionhandleClick(i){constnextSquares=squares.slice();if(xIsNext){nextSquares[i]=\"X\";}else{nextSquares[i]=\"O\";}setSquares(nextSquares);setXIsNext(!xIsNext);}return(//...);}\n```\n\n\nNow, as you click on different squares, they will alternate between X and O , as they should!\n\nBut wait, there\u2019s a problem. Try clicking on the same square multiple times:\n\nThe X is overwritten by an O ! While this would add a very interesting twist to the game, we\u2019re going to stick to the original rules for now.\n\nWhen you mark a square with an X or an O you aren\u2019t first checking to see if the square already has an X or O value. You can fix this by returning early . You\u2019ll check to see if the square already has an X or an O . If the square is already filled, you will return in the handleClick function early\u2014before it tries to update the board state.\n\n\n```javascript\nfunctionhandleClick(i){if(squares[i]){return;}constnextSquares=squares.slice();//...}\n```\n\n\nNow you can only add X \u2019s or O \u2019s to empty squares! Here is what your code should look like at this point:\n\n\n```javascript\nimport{useState}from'react';functionSquare({value,onSquareClick}){return(<buttonclassName=\"square\"onClick={onSquareClick}>{value}</button>);}exportdefaultfunctionBoard(){const[xIsNext,setXIsNext]=useState(true);const[squares,setSquares]=useState(Array(9).fill(null));functionhandleClick(i){if(squares[i]){return;}constnextSquares=squares.slice();if(xIsNext){nextSquares[i]='X';}else{nextSquares[i]='O';}setSquares(nextSquares);setXIsNext(!xIsNext);}return(<><divclassName=\"board-row\"><Squarevalue={squares[0]}onSquareClick={()=>handleClick(0)}/><Squarevalue={squares[1]}onSquareClick={()=>handleClick(1)}/><Squarevalue={squares[2]}onSquareClick={()=>handleClick(2)}/></div><divclassName=\"board-row\"><Squarevalue={squares[3]}onSquareClick={()=>handleClick(3)}/><Squarevalue={squares[4]}onSquareClick={()=>handleClick(4)}/><Squarevalue={squares[5]}onSquareClick={()=>handleClick(5)}/></div><divclassName=\"board-row\"><Squarevalue={squares[6]}onSquareClick={()=>handleClick(6)}/><Squarevalue={squares[7]}onSquareClick={()=>handleClick(7)}/><Squarevalue={squares[8]}onSquareClick={()=>handleClick(8)}/></div></>);}\n```\n\n\n\n### Declaring a winner\n\n\nNow that the players can take turns, you\u2019ll want to show when the game is won and there are no more turns to make. To do this you\u2019ll add a helper function called calculateWinner that takes an array of 9 squares, checks for a winner and returns 'X' , 'O' , or null as appropriate. Don\u2019t worry too much about the calculateWinner function; it\u2019s not specific to React:\n\n\n```javascript\nexportdefaultfunctionBoard(){//...}functioncalculateWinner(squares){constlines=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];for(leti=0;i<lines.length;i++){const[a,b,c]=lines[i];if(squares[a]&&squares[a]===squares[b]&&squares[a]===squares[c]){returnsquares[a];}}returnnull;}\n```\n\n\n\n### Note\n\n\nIt does not matter whether you define calculateWinner before or after the Board . Let\u2019s put it at the end so that you don\u2019t have to scroll past it every time you edit your components.\n\nYou will call calculateWinner(squares) in the Board component\u2019s handleClick function to check if a player has won. You can perform this check at the same time you check if a user has clicked a square that already has an X or an O . We\u2019d like to return early in both cases:\n\n\n```javascript\nfunctionhandleClick(i){if(squares[i]||calculateWinner(squares)){return;}constnextSquares=squares.slice();//...}\n```\n\n\nTo let the players know when the game is over, you can display text such as \u201cWinner: X\u201d or \u201cWinner: O\u201d. To do that you\u2019ll add a status section to the Board component. The status will display the winner if the game is over and if the game is ongoing you\u2019ll display which player\u2019s turn is next:\n\n\n```javascript\nexportdefaultfunctionBoard(){// ...constwinner=calculateWinner(squares);letstatus;if(winner){status=\"Winner: \"+winner;}else{status=\"Next player: \"+(xIsNext?\"X\":\"O\");}return(<><divclassName=\"status\">{status}</div><divclassName=\"board-row\">// ...)}\n```\n\n\nCongratulations! You now have a working tic-tac-toe game. And you\u2019ve just learned the basics of React too. So you are the real winner here. Here is what the code should look like:\n\n\n```javascript\nimport{useState}from'react';functionSquare({value,onSquareClick}){return(<buttonclassName=\"square\"onClick={onSquareClick}>{value}</button>);}exportdefaultfunctionBoard(){const[xIsNext,setXIsNext]=useState(true);const[squares,setSquares]=useState(Array(9).fill(null));functionhandleClick(i){if(calculateWinner(squares)||squares[i]){return;}constnextSquares=squares.slice();if(xIsNext){nextSquares[i]='X';}else{nextSquares[i]='O';}setSquares(nextSquares);setXIsNext(!xIsNext);}constwinner=calculateWinner(squares);letstatus;if(winner){status='Winner: '+winner;}else{status='Next player: '+(xIsNext?'X':'O');}return(<><divclassName=\"status\">{status}</div><divclassName=\"board-row\"><Squarevalue={squares[0]}onSquareClick={()=>handleClick(0)}/><Squarevalue={squares[1]}onSquareClick={()=>handleClick(1)}/><Squarevalue={squares[2]}onSquareClick={()=>handleClick(2)}/></div><divclassName=\"board-row\"><Squarevalue={squares[3]}onSquareClick={()=>handleClick(3)}/><Squarevalue={squares[4]}onSquareClick={()=>handleClick(4)}/><Squarevalue={squares[5]}onSquareClick={()=>handleClick(5)}/></div><divclassName=\"board-row\"><Squarevalue={squares[6]}onSquareClick={()=>handleClick(6)}/><Squarevalue={squares[7]}onSquareClick={()=>handleClick(7)}/><Squarevalue={squares[8]}onSquareClick={()=>handleClick(8)}/></div></>);}functioncalculateWinner(squares){constlines=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6],];for(leti=0;i<lines.length;i++){const[a,b,c]=lines[i];if(squares[a]&&squares[a]===squares[b]&&squares[a]===squares[c]){returnsquares[a];}}returnnull;}\n```\n", "source": "https://react.dev/learn/tutorial-tic-tac-toe", "category": "Tutorial: Tic-Tac-Toe"}
{"instruction": "Show me a code example of Completing the game in React.", "input": "", "output": "By this point, you have all the basic building blocks for your tic-tac-toe game. To have a complete game, you now need to alternate placing \u201cX\u201ds and \u201cO\u201ds on the board, and you need a way to determine a winner.\n\n\n### Lifting state up\n\n\nCurrently, each Square component maintains a part of the game\u2019s state. To check for a winner in a tic-tac-toe game, the Board would need to somehow know the state of each of the 9 Square components.\n\nHow would you approach that? At first, you might guess that the Board needs to \u201cask\u201d each Square for that Square \u2019s state. Although this approach is technically possible in React, we discourage it because the code becomes difficult to understand, susceptible to bugs, and hard to refactor. Instead, the best approach is to store the game\u2019s state in the parent Board component instead of in each Square . The Board component can tell each Square what to display by passing a prop, like you did when you passed a number to each Square.\n\nTo collect data from multiple children, or to have two child components communicate with each other, declare the shared state in their parent component instead. The parent component can pass that state back down to the children via props. This keeps the child components in sync with each other and with their parent.\n\nLifting state into a parent component is common when React components are refactored.\n\nLet\u2019s take this opportunity to try it out. Edit the Board component so that it declares a state variable named squares that defaults to an array of 9 nulls corresponding to the 9 squares:\n\n\n```javascript\n// ...exportdefaultfunctionBoard(){const[squares,setSquares]=useState(Array(9).fill(null));return(// ...);}\n```\n\n\nArray(9).fill(null) creates an array with nine elements and sets each of them to null . The useState() call around it declares a squares state variable that\u2019s initially set to that array. Each entry in the array corresponds to the value of a square. When you fill the board in later, the squares array will look like this:\n\n\n```javascript\n['O',null,'X','X','X','O','O',null,null]\n```\n\n\nNow your Board component needs to pass the value prop down to each Square that it renders:\n\n\n```javascript\nexportdefaultfunctionBoard(){const[squares,setSquares]=useState(Array(9).fill(null));return(<><divclassName=\"board-row\"><Squarevalue={squares[0]}/><Squarevalue={squares[1]}/><Squarevalue={squares[2]}/></div><divclassName=\"board-row\"><Squarevalue={squares[3]}/><Squarevalue={squares[4]}/><Squarevalue={squares[5]}/></div><divclassName=\"board-row\"><Squarevalue={squares[6]}/><Squarevalue={squares[7]}/><Squarevalue={squares[8]}/></div></>);}\n```\n\n\nNext, you\u2019ll edit the Square component to receive the value prop from the Board component. This will require removing the Square component\u2019s own stateful tracking of value and the button\u2019s onClick prop:\n\n\n```javascript\nfunctionSquare({value}){return<buttonclassName=\"square\">{value}</button>;}\n```\n\n\nAt this point you should see an empty tic-tac-toe board:\n\nAnd your code should look like this:\n\n\n```javascript\nimport{useState}from'react';functionSquare({value}){return<buttonclassName=\"square\">{value}</button>;}exportdefaultfunctionBoard(){const[squares,setSquares]=useState(Array(9).fill(null));return(<><divclassName=\"board-row\"><Squarevalue={squares[0]}/><Squarevalue={squares[1]}/><Squarevalue={squares[2]}/></div><divclassName=\"board-row\"><Squarevalue={squares[3]}/><Squarevalue={squares[4]}/><Squarevalue={squares[5]}/></div><divclassName=\"board-row\"><Squarevalue={squares[6]}/><Squarevalue={squares[7]}/><Squarevalue={squares[8]}/></div></>);}\n```\n\n\nEach Square will now receive a value prop that will either be 'X' , 'O' , or null for empty squares.\n\nNext, you need to change what happens when a Square is clicked. The Board component now maintains which squares are filled. You\u2019ll need to create a way for the Square to update the Board \u2019s state. Since state is private to a component that defines it, you cannot update the Board \u2019s state directly from Square .\n\nInstead, you\u2019ll pass down a function from the Board component to the Square component, and you\u2019ll have Square call that function when a square is clicked. You\u2019ll start with the function that the Square component will call when it is clicked. You\u2019ll call that function onSquareClick :\n\n\n```javascript\nfunctionSquare({value}){return(<buttonclassName=\"square\"onClick={onSquareClick}>{value}</button>);}\n```\n\n\nNext, you\u2019ll add the onSquareClick function to the Square component\u2019s props:\n\n\n```javascript\nfunctionSquare({value,onSquareClick}){return(<buttonclassName=\"square\"onClick={onSquareClick}>{value}</button>);}\n```\n\n\nNow you\u2019ll connect the onSquareClick prop to a function in the Board component that you\u2019ll name handleClick . To connect onSquareClick to handleClick you\u2019ll pass a function to the onSquareClick prop of the first Square component:\n\n\n```javascript\nexportdefaultfunctionBoard(){const[squares,setSquares]=useState(Array(9).fill(null));return(<><divclassName=\"board-row\"><Squarevalue={squares[0]}onSquareClick={handleClick}/>//...);}\n```\n\n\nLastly, you will define the handleClick function inside the Board component to update the squares array holding your board\u2019s state:\n\n\n```javascript\nexportdefaultfunctionBoard(){const[squares,setSquares]=useState(Array(9).fill(null));functionhandleClick(){constnextSquares=squares.slice();nextSquares[0]=\"X\";setSquares(nextSquares);}return(// ...)}\n```\n\n\nThe handleClick function creates a copy of the squares array ( nextSquares ) with the JavaScript slice() Array method. Then, handleClick updates the nextSquares array to add X to the first ( [0] index) square.\n\nCalling the setSquares function lets React know the state of the component has changed. This will trigger a re-render of the components that use the squares state ( Board ) as well as its child components (the Square components that make up the board).\n\n\n### Note\n\n\nJavaScript supports closures which means an inner function (e.g. handleClick ) has access to variables and functions defined in an outer function (e.g. Board ). The handleClick function can read the squares state and call the setSquares method because they are both defined inside of the Board function.\n\nNow you can add X\u2019s to the board\u2026  but only to the upper left square. Your handleClick function is hardcoded to update the index for the upper left square ( 0 ). Let\u2019s update handleClick to be able to update any square. Add an argument i to the handleClick function that takes the index of the square to update:\n\n\n```javascript\nexportdefaultfunctionBoard(){const[squares,setSquares]=useState(Array(9).fill(null));functionhandleClick(i){constnextSquares=squares.slice();nextSquares[i]=\"X\";setSquares(nextSquares);}return(// ...)}\n```\n\n\nNext, you will need to pass that i to handleClick . You could try to set the onSquareClick prop of square to be handleClick(0) directly in the JSX like this, but it won\u2019t work:\n\n\n```javascript\n<Squarevalue={squares[0]}onSquareClick={handleClick(0)}/>\n```\n\n\nHere is why this doesn\u2019t work. The handleClick(0) call will be a part of rendering the board component. Because handleClick(0) alters the state of the board component by calling setSquares , your entire board component will be re-rendered again. But this runs handleClick(0) again, leading to an infinite loop:\n\nWhy didn\u2019t this problem happen earlier?\n\nWhen you were passing onSquareClick={handleClick} , you were passing the handleClick function down as a prop. You were not calling it! But now you are calling that function right away\u2014notice the parentheses in handleClick(0) \u2014and that\u2019s why it runs too early. You don\u2019t want to call handleClick until the user clicks!\n\nYou could fix this by creating a function like handleFirstSquareClick that calls handleClick(0) , a function like handleSecondSquareClick that calls handleClick(1) , and so on. You would pass (rather than call) these functions down as props like onSquareClick={handleFirstSquareClick} . This would solve the infinite loop.\n\nHowever, defining nine different functions and giving each of them a name is too verbose. Instead, let\u2019s do this:\n\n\n```javascript\nexportdefaultfunctionBoard(){// ...return(<><divclassName=\"board-row\"><Squarevalue={squares[0]}onSquareClick={()=>handleClick(0)}/>// ...);}\n```\n\n\nNotice the new () => syntax. Here, () => handleClick(0) is an arrow function, which is a shorter way to define functions. When the square is clicked, the code after the => \u201carrow\u201d will run, calling handleClick(0) .\n\nNow you need to update the other eight squares to call handleClick from the arrow functions you pass. Make sure that the argument for each call of the handleClick corresponds to the index of the correct square:\n\n\n```javascript\nexportdefaultfunctionBoard(){// ...return(<><divclassName=\"board-row\"><Squarevalue={squares[0]}onSquareClick={()=>handleClick(0)}/><Squarevalue={squares[1]}onSquareClick={()=>handleClick(1)}/><Squarevalue={squares[2]}onSquareClick={()=>handleClick(2)}/></div><divclassName=\"board-row\"><Squarevalue={squares[3]}onSquareClick={()=>handleClick(3)}/><Squarevalue={squares[4]}onSquareClick={()=>handleClick(4)}/><Squarevalue={squares[5]}onSquareClick={()=>handleClick(5)}/></div><divclassName=\"board-row\"><Squarevalue={squares[6]}onSquareClick={()=>handleClick(6)}/><Squarevalue={squares[7]}onSquareClick={()=>handleClick(7)}/><Squarevalue={squares[8]}onSquareClick={()=>handleClick(8)}/></div></>);};\n```\n\n\nNow you can again add X\u2019s to any square on the board by clicking on them:\n\nBut this time all the state management is handled by the Board component!\n\nThis is what your code should look like:\n\n\n```javascript\nimport{useState}from'react';functionSquare({value,onSquareClick}){return(<buttonclassName=\"square\"onClick={onSquareClick}>{value}</button>);}exportdefaultfunctionBoard(){const[squares,setSquares]=useState(Array(9).fill(null));functionhandleClick(i){constnextSquares=squares.slice();nextSquares[i]='X';setSquares(nextSquares);}return(<><divclassName=\"board-row\"><Squarevalue={squares[0]}onSquareClick={()=>handleClick(0)}/><Squarevalue={squares[1]}onSquareClick={()=>handleClick(1)}/><Squarevalue={squares[2]}onSquareClick={()=>handleClick(2)}/></div><divclassName=\"board-row\"><Squarevalue={squares[3]}onSquareClick={()=>handleClick(3)}/><Squarevalue={squares[4]}onSquareClick={()=>handleClick(4)}/><Squarevalue={squares[5]}onSquareClick={()=>handleClick(5)}/></div><divclassName=\"board-row\"><Squarevalue={squares[6]}onSquareClick={()=>handleClick(6)}/><Squarevalue={squares[7]}onSquareClick={()=>handleClick(7)}/><Squarevalue={squares[8]}onSquareClick={()=>handleClick(8)}/></div></>);}\n```\n\n\nNow that your state handling is in the Board component, the parent Board component passes props to the child Square components so that they can be displayed correctly. When clicking on a Square , the child Square component now asks the parent Board component to update the state of the board. When the Board \u2019s state changes, both the Board component and every child Square re-renders automatically. Keeping the state of all squares in the Board component will allow it to determine the winner in the future.\n\nLet\u2019s recap what happens when a user clicks the top left square on your board to add an X to it:\n\n1. Clicking on the upper left square runs the function that the button received as its onClick prop from the Square . The Square component received that function as its onSquareClick prop from the Board . The Board component defined that function directly in the JSX. It calls handleClick with an argument of 0 .\n2. handleClick uses the argument ( 0 ) to update the first element of the squares array from null to X .\n3. The squares state of the Board component was updated, so the Board and all of its children re-render. This causes the value prop of the Square component with index 0 to change from null to X .\n\nIn the end the user sees that the upper left square has changed from empty to having an X after clicking it.\n\n\n### Note\n\n\nThe DOM <button> element\u2019s onClick attribute has a special meaning to React because it is a built-in component. For custom components like Square, the naming is up to you. You could give any name to the Square \u2019s onSquareClick prop or Board \u2019s handleClick function, and the code would work the same. In React, it\u2019s conventional to use onSomething names for props which represent events and handleSomething for the function definitions which handle those events.\n\n\n### Why immutability is important\n\n\nNote how in handleClick , you call .slice() to create a copy of the squares array instead of modifying the existing array. To explain why, we need to discuss immutability and why immutability is important to learn.\n\nThere are generally two approaches to changing data. The first approach is to mutate the data by directly changing the data\u2019s values. The second approach is to replace the data with a new copy which has the desired changes. Here is what it would look like if you mutated the squares array:\n\n\n```javascript\nconstsquares=[null,null,null,null,null,null,null,null,null];squares[0]='X';// Now `squares` is [\"X\", null, null, null, null, null, null, null, null];\n```\n\n\nAnd here is what it would look like if you changed data without mutating the squares array:\n\n\n```javascript\nconstsquares=[null,null,null,null,null,null,null,null,null];constnextSquares=['X',null,null,null,null,null,null,null,null];// Now `squares` is unchanged, but `nextSquares` first element is 'X' rather than `null`\n```\n\n\nThe result is the same but by not mutating (changing the underlying data) directly, you gain several benefits.\n\nImmutability makes complex features much easier to implement. Later in this tutorial, you will implement a \u201ctime travel\u201d feature that lets you review the game\u2019s history and \u201cjump back\u201d to past moves. This functionality isn\u2019t specific to games\u2014an ability to undo and redo certain actions is a common requirement for apps. Avoiding direct data mutation lets you keep previous versions of the data intact, and reuse them later.\n\nThere is also another benefit of immutability. By default, all child components re-render automatically when the state of a parent component changes. This includes even the child components that weren\u2019t affected by the change. Although re-rendering is not by itself noticeable to the user (you shouldn\u2019t actively try to avoid it!), you might want to skip re-rendering a part of the tree that clearly wasn\u2019t affected by it for performance reasons. Immutability makes it very cheap for components to compare whether their data has changed or not. You can learn more about how React chooses when to re-render a component in the memo API reference .\n\n\n### Taking turns\n\n\nIt\u2019s now time to fix a major defect in this tic-tac-toe game: the \u201cO\u201ds cannot be marked on the board.\n\nYou\u2019ll set the first move to be \u201cX\u201d by default. Let\u2019s keep track of this by adding another piece of state to the Board component:\n\n\n```javascript\nfunctionBoard(){const[xIsNext,setXIsNext]=useState(true);const[squares,setSquares]=useState(Array(9).fill(null));// ...}\n```\n\n\nEach time a player moves, xIsNext (a boolean) will be flipped to determine which player goes next and the game\u2019s state will be saved. You\u2019ll update the Board \u2019s handleClick function to flip the value of xIsNext :\n\n\n```javascript\nexportdefaultfunctionBoard(){const[xIsNext,setXIsNext]=useState(true);const[squares,setSquares]=useState(Array(9).fill(null));functionhandleClick(i){constnextSquares=squares.slice();if(xIsNext){nextSquares[i]=\"X\";}else{nextSquares[i]=\"O\";}setSquares(nextSquares);setXIsNext(!xIsNext);}return(//...);}\n```\n\n\nNow, as you click on different squares, they will alternate between X and O , as they should!\n\nBut wait, there\u2019s a problem. Try clicking on the same square multiple times:\n\nThe X is overwritten by an O ! While this would add a very interesting twist to the game, we\u2019re going to stick to the original rules for now.\n\nWhen you mark a square with an X or an O you aren\u2019t first checking to see if the square already has an X or O value. You can fix this by returning early . You\u2019ll check to see if the square already has an X or an O . If the square is already filled, you will return in the handleClick function early\u2014before it tries to update the board state.\n\n\n```javascript\nfunctionhandleClick(i){if(squares[i]){return;}constnextSquares=squares.slice();//...}\n```\n\n\nNow you can only add X \u2019s or O \u2019s to empty squares! Here is what your code should look like at this point:\n\n\n```javascript\nimport{useState}from'react';functionSquare({value,onSquareClick}){return(<buttonclassName=\"square\"onClick={onSquareClick}>{value}</button>);}exportdefaultfunctionBoard(){const[xIsNext,setXIsNext]=useState(true);const[squares,setSquares]=useState(Array(9).fill(null));functionhandleClick(i){if(squares[i]){return;}constnextSquares=squares.slice();if(xIsNext){nextSquares[i]='X';}else{nextSquares[i]='O';}setSquares(nextSquares);setXIsNext(!xIsNext);}return(<><divclassName=\"board-row\"><Squarevalue={squares[0]}onSquareClick={()=>handleClick(0)}/><Squarevalue={squares[1]}onSquareClick={()=>handleClick(1)}/><Squarevalue={squares[2]}onSquareClick={()=>handleClick(2)}/></div><divclassName=\"board-row\"><Squarevalue={squares[3]}onSquareClick={()=>handleClick(3)}/><Squarevalue={squares[4]}onSquareClick={()=>handleClick(4)}/><Squarevalue={squares[5]}onSquareClick={()=>handleClick(5)}/></div><divclassName=\"board-row\"><Squarevalue={squares[6]}onSquareClick={()=>handleClick(6)}/><Squarevalue={squares[7]}onSquareClick={()=>handleClick(7)}/><Squarevalue={squares[8]}onSquareClick={()=>handleClick(8)}/></div></>);}\n```\n\n\n\n### Declaring a winner\n\n\nNow that the players can take turns, you\u2019ll want to show when the game is won and there are no more turns to make. To do this you\u2019ll add a helper function called calculateWinner that takes an array of 9 squares, checks for a winner and returns 'X' , 'O' , or null as appropriate. Don\u2019t worry too much about the calculateWinner function; it\u2019s not specific to React:\n\n\n```javascript\nexportdefaultfunctionBoard(){//...}functioncalculateWinner(squares){constlines=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];for(leti=0;i<lines.length;i++){const[a,b,c]=lines[i];if(squares[a]&&squares[a]===squares[b]&&squares[a]===squares[c]){returnsquares[a];}}returnnull;}\n```\n\n\n\n### Note\n\n\nIt does not matter whether you define calculateWinner before or after the Board . Let\u2019s put it at the end so that you don\u2019t have to scroll past it every time you edit your components.\n\nYou will call calculateWinner(squares) in the Board component\u2019s handleClick function to check if a player has won. You can perform this check at the same time you check if a user has clicked a square that already has an X or an O . We\u2019d like to return early in both cases:\n\n\n```javascript\nfunctionhandleClick(i){if(squares[i]||calculateWinner(squares)){return;}constnextSquares=squares.slice();//...}\n```\n\n\nTo let the players know when the game is over, you can display text such as \u201cWinner: X\u201d or \u201cWinner: O\u201d. To do that you\u2019ll add a status section to the Board component. The status will display the winner if the game is over and if the game is ongoing you\u2019ll display which player\u2019s turn is next:\n\n\n```javascript\nexportdefaultfunctionBoard(){// ...constwinner=calculateWinner(squares);letstatus;if(winner){status=\"Winner: \"+winner;}else{status=\"Next player: \"+(xIsNext?\"X\":\"O\");}return(<><divclassName=\"status\">{status}</div><divclassName=\"board-row\">// ...)}\n```\n\n\nCongratulations! You now have a working tic-tac-toe game. And you\u2019ve just learned the basics of React too. So you are the real winner here. Here is what the code should look like:\n\n\n```javascript\nimport{useState}from'react';functionSquare({value,onSquareClick}){return(<buttonclassName=\"square\"onClick={onSquareClick}>{value}</button>);}exportdefaultfunctionBoard(){const[xIsNext,setXIsNext]=useState(true);const[squares,setSquares]=useState(Array(9).fill(null));functionhandleClick(i){if(calculateWinner(squares)||squares[i]){return;}constnextSquares=squares.slice();if(xIsNext){nextSquares[i]='X';}else{nextSquares[i]='O';}setSquares(nextSquares);setXIsNext(!xIsNext);}constwinner=calculateWinner(squares);letstatus;if(winner){status='Winner: '+winner;}else{status='Next player: '+(xIsNext?'X':'O');}return(<><divclassName=\"status\">{status}</div><divclassName=\"board-row\"><Squarevalue={squares[0]}onSquareClick={()=>handleClick(0)}/><Squarevalue={squares[1]}onSquareClick={()=>handleClick(1)}/><Squarevalue={squares[2]}onSquareClick={()=>handleClick(2)}/></div><divclassName=\"board-row\"><Squarevalue={squares[3]}onSquareClick={()=>handleClick(3)}/><Squarevalue={squares[4]}onSquareClick={()=>handleClick(4)}/><Squarevalue={squares[5]}onSquareClick={()=>handleClick(5)}/></div><divclassName=\"board-row\"><Squarevalue={squares[6]}onSquareClick={()=>handleClick(6)}/><Squarevalue={squares[7]}onSquareClick={()=>handleClick(7)}/><Squarevalue={squares[8]}onSquareClick={()=>handleClick(8)}/></div></>);}functioncalculateWinner(squares){constlines=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6],];for(leti=0;i<lines.length;i++){const[a,b,c]=lines[i];if(squares[a]&&squares[a]===squares[b]&&squares[a]===squares[c]){returnsquares[a];}}returnnull;}\n```\n", "source": "https://react.dev/learn/tutorial-tic-tac-toe", "category": "Tutorial: Tic-Tac-Toe"}
{"instruction": "How do I handle Adding time travel in React?", "input": "", "output": "As a final exercise, let\u2019s make it possible to \u201cgo back in time\u201d to the previous moves in the game.\n\n\n### Storing a history of moves\n\n\nIf you mutated the squares array, implementing time travel would be very difficult.\n\nHowever, you used slice() to create a new copy of the squares array after every move, and treated it as immutable. This will allow you to store every past version of the squares array, and navigate between the turns that have already happened.\n\nYou\u2019ll store the past squares arrays in another array called history , which you\u2019ll store as a new state variable. The history array represents all board states, from the first to the last move, and has a shape like this:\n\n\n```javascript\n[// Before first move[null,null,null,null,null,null,null,null,null],// After first move[null,null,null,null,'X',null,null,null,null],// After second move[null,null,null,null,'X',null,null,null,'O'],// ...]\n```\n\n\n\n### Lifting state up, again\n\n\nYou will now write a new top-level component called Game to display a list of past moves. That\u2019s where you will place the history state that contains the entire game history.\n\nPlacing the history state into the Game component will let you remove the squares state from its child Board component. Just like you \u201clifted state up\u201d from the Square component into the Board component, you will now lift it up from the Board into the top-level Game component. This gives the Game component full control over the Board \u2019s data and lets it instruct the Board to render previous turns from the history .\n\nFirst, add a Game component with export default . Have it render the Board component and some markup:\n\n\n```javascript\nfunctionBoard(){// ...}exportdefaultfunctionGame(){return(<divclassName=\"game\"><divclassName=\"game-board\"><Board/></div><divclassName=\"game-info\"><ol>{/*TODO*/}</ol></div></div>);}\n```\n\n\nNote that you are removing the export default keywords before the function Board() { declaration and adding them before the function Game() { declaration. This tells your index.js file to use the Game component as the top-level component instead of your Board component. The additional div s returned by the Game component are making room for the game information you\u2019ll add to the board later.\n\nAdd some state to the Game component to track which player is next and the history of moves:\n\n\n```javascript\nexportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);// ...\n```\n\n\nNotice how [Array(9).fill(null)] is an array with a single item, which itself is an array of 9 null s.\n\nTo render the squares for the current move, you\u2019ll want to read the last squares array from the history . You don\u2019t need useState for this\u2014you already have enough information to calculate it during rendering:\n\n\n```javascript\nexportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);constcurrentSquares=history[history.length-1];// ...\n```\n\n\nNext, create a handlePlay function inside the Game component that will be called by the Board component to update the game. Pass xIsNext , currentSquares and handlePlay as props to the Board component:\n\n\n```javascript\nexportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);constcurrentSquares=history[history.length-1];functionhandlePlay(nextSquares){// TODO}return(<divclassName=\"game\"><divclassName=\"game-board\"><BoardxIsNext={xIsNext}squares={currentSquares}onPlay={handlePlay}/>//...)}\n```\n\n\nLet\u2019s make the Board component fully controlled by the props it receives. Change the Board component to take three props: xIsNext , squares , and a new onPlay function that Board can call with the updated squares array when a player makes a move. Next, remove the first two lines of the Board function that call useState :\n\n\n```javascript\nfunctionBoard({xIsNext,squares,onPlay}){functionhandleClick(i){//...}// ...}\n```\n\n\nNow replace the setSquares and setXIsNext calls in handleClick in the Board component with a single call to your new onPlay function so the Game component can update the Board when the user clicks a square:\n\n\n```javascript\nfunctionBoard({xIsNext,squares,onPlay}){functionhandleClick(i){if(calculateWinner(squares)||squares[i]){return;}constnextSquares=squares.slice();if(xIsNext){nextSquares[i]=\"X\";}else{nextSquares[i]=\"O\";}onPlay(nextSquares);}//...}\n```\n\n\nThe Board component is fully controlled by the props passed to it by the Game component. You need to implement the handlePlay function in the Game component to get the game working again.\n\nWhat should handlePlay do when called? Remember that Board used to call setSquares with an updated array; now it passes the updated squares array to onPlay .\n\nThe handlePlay function needs to update Game \u2019s state to trigger a re-render, but you don\u2019t have a setSquares function that you can call any more\u2014you\u2019re now using the history state variable to store this information. You\u2019ll want to update history by appending the updated squares array as a new history entry. You also want to toggle xIsNext , just as Board used to do:\n\n\n```javascript\nexportdefaultfunctionGame(){//...functionhandlePlay(nextSquares){setHistory([...history,nextSquares]);setXIsNext(!xIsNext);}//...}\n```\n\n\nHere, [...history, nextSquares] creates a new array that contains all the items in history , followed by nextSquares . (You can read the ...history spread syntax as \u201cenumerate all the items in history \u201d.)\n\nFor example, if history is [[null,null,null], [\"X\",null,null]] and nextSquares is [\"X\",null,\"O\"] , then the new [...history, nextSquares] array will be [[null,null,null], [\"X\",null,null], [\"X\",null,\"O\"]] .\n\nAt this point, you\u2019ve moved the state to live in the Game component, and the UI should be fully working, just as it was before the refactor. Here is what the code should look like at this point:\n\n\n```javascript\nimport{useState}from'react';functionSquare({value,onSquareClick}){return(<buttonclassName=\"square\"onClick={onSquareClick}>{value}</button>);}functionBoard({xIsNext,squares,onPlay}){functionhandleClick(i){if(calculateWinner(squares)||squares[i]){return;}constnextSquares=squares.slice();if(xIsNext){nextSquares[i]='X';}else{nextSquares[i]='O';}onPlay(nextSquares);}constwinner=calculateWinner(squares);letstatus;if(winner){status='Winner: '+winner;}else{status='Next player: '+(xIsNext?'X':'O');}return(<><divclassName=\"status\">{status}</div><divclassName=\"board-row\"><Squarevalue={squares[0]}onSquareClick={()=>handleClick(0)}/><Squarevalue={squares[1]}onSquareClick={()=>handleClick(1)}/><Squarevalue={squares[2]}onSquareClick={()=>handleClick(2)}/></div><divclassName=\"board-row\"><Squarevalue={squares[3]}onSquareClick={()=>handleClick(3)}/><Squarevalue={squares[4]}onSquareClick={()=>handleClick(4)}/><Squarevalue={squares[5]}onSquareClick={()=>handleClick(5)}/></div><divclassName=\"board-row\"><Squarevalue={squares[6]}onSquareClick={()=>handleClick(6)}/><Squarevalue={squares[7]}onSquareClick={()=>handleClick(7)}/><Squarevalue={squares[8]}onSquareClick={()=>handleClick(8)}/></div></>);}exportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);constcurrentSquares=history[history.length-1];functionhandlePlay(nextSquares){setHistory([...history,nextSquares]);setXIsNext(!xIsNext);}return(<divclassName=\"game\"><divclassName=\"game-board\"><BoardxIsNext={xIsNext}squares={currentSquares}onPlay={handlePlay}/></div><divclassName=\"game-info\"><ol>{/*TODO*/}</ol></div></div>);}functioncalculateWinner(squares){constlines=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6],];for(leti=0;i<lines.length;i++){const[a,b,c]=lines[i];if(squares[a]&&squares[a]===squares[b]&&squares[a]===squares[c]){returnsquares[a];}}returnnull;}\n```\n\n\n\n### Showing the past moves\n\n\nSince you are recording the tic-tac-toe game\u2019s history, you can now display a list of past moves to the player.\n\nReact elements like <button> are regular JavaScript objects; you can pass them around in your application. To render multiple items in React, you can use an array of React elements.\n\nYou already have an array of history moves in state, so now you need to transform it to an array of React elements. In JavaScript, to transform one array into another, you can use the array map method:\n\n\n```javascript\n[1,2,3].map((x)=>x*2)// [2, 4, 6]\n```\n\n\nYou\u2019ll use map to transform your history of moves into React elements representing buttons on the screen, and display a list of buttons to \u201cjump\u201d to past moves. Let\u2019s map over the history in the Game component:\n\n\n```javascript\nexportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);constcurrentSquares=history[history.length-1];functionhandlePlay(nextSquares){setHistory([...history,nextSquares]);setXIsNext(!xIsNext);}functionjumpTo(nextMove){// TODO}constmoves=history.map((squares,move)=>{letdescription;if(move>0){description='Go to move #'+move;}else{description='Go to game start';}return(<li><buttononClick={()=>jumpTo(move)}>{description}</button></li>);});return(<divclassName=\"game\"><divclassName=\"game-board\"><BoardxIsNext={xIsNext}squares={currentSquares}onPlay={handlePlay}/></div><divclassName=\"game-info\"><ol>{moves}</ol></div></div>);}\n```\n\n\nYou can see what your code should look like below. Note that you should see an error in the developer tools console that says:\n\nYou\u2019ll fix this error in the next section.\n\n\n```javascript\nimport{useState}from'react';functionSquare({value,onSquareClick}){return(<buttonclassName=\"square\"onClick={onSquareClick}>{value}</button>);}functionBoard({xIsNext,squares,onPlay}){functionhandleClick(i){if(calculateWinner(squares)||squares[i]){return;}constnextSquares=squares.slice();if(xIsNext){nextSquares[i]='X';}else{nextSquares[i]='O';}onPlay(nextSquares);}constwinner=calculateWinner(squares);letstatus;if(winner){status='Winner: '+winner;}else{status='Next player: '+(xIsNext?'X':'O');}return(<><divclassName=\"status\">{status}</div><divclassName=\"board-row\"><Squarevalue={squares[0]}onSquareClick={()=>handleClick(0)}/><Squarevalue={squares[1]}onSquareClick={()=>handleClick(1)}/><Squarevalue={squares[2]}onSquareClick={()=>handleClick(2)}/></div><divclassName=\"board-row\"><Squarevalue={squares[3]}onSquareClick={()=>handleClick(3)}/><Squarevalue={squares[4]}onSquareClick={()=>handleClick(4)}/><Squarevalue={squares[5]}onSquareClick={()=>handleClick(5)}/></div><divclassName=\"board-row\"><Squarevalue={squares[6]}onSquareClick={()=>handleClick(6)}/><Squarevalue={squares[7]}onSquareClick={()=>handleClick(7)}/><Squarevalue={squares[8]}onSquareClick={()=>handleClick(8)}/></div></>);}exportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);constcurrentSquares=history[history.length-1];functionhandlePlay(nextSquares){setHistory([...history,nextSquares]);setXIsNext(!xIsNext);}functionjumpTo(nextMove){// TODO}constmoves=history.map((squares,move)=>{letdescription;if(move>0){description='Go to move #'+move;}else{description='Go to game start';}return(<li><buttononClick={()=>jumpTo(move)}>{description}</button></li>);});return(<divclassName=\"game\"><divclassName=\"game-board\"><BoardxIsNext={xIsNext}squares={currentSquares}onPlay={handlePlay}/></div><divclassName=\"game-info\"><ol>{moves}</ol></div></div>);}functioncalculateWinner(squares){constlines=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6],];for(leti=0;i<lines.length;i++){const[a,b,c]=lines[i];if(squares[a]&&squares[a]===squares[b]&&squares[a]===squares[c]){returnsquares[a];}}returnnull;}\n```\n\n\nAs you iterate through the history array inside the function you passed to map , the squares argument goes through each element of history , and the move argument goes through each array index: 0 , 1 , 2 , \u2026. (In most cases, you\u2019d need the actual array elements, but to render a list of moves you will only need indexes.)\n\nFor each move in the tic-tac-toe game\u2019s history, you create a list item <li> which contains a button <button> . The button has an onClick handler which calls a function called jumpTo (that you haven\u2019t implemented yet).\n\nFor now, you should see a list of the moves that occurred in the game and an error in the developer tools console. Let\u2019s discuss what the \u201ckey\u201d error means.\n\n\n### Picking a key\n\n\nWhen you render a list, React stores some information about each rendered list item. When you update a list, React needs to determine what has changed. You could have added, removed, re-arranged, or updated the list\u2019s items.\n\nImagine transitioning from\n\n\n```javascript\n<li>Alexa: 7 tasks left</li><li>Ben: 5 tasks left</li>\n```\n\n\nto\n\n\n```javascript\n<li>Ben: 9 tasks left</li><li>Claudia: 8 tasks left</li><li>Alexa: 5 tasks left</li>\n```\n\n\nIn addition to the updated counts, a human reading this would probably say that you swapped Alexa and Ben\u2019s ordering and inserted Claudia between Alexa and Ben. However, React is a computer program and does not know what you intended, so you need to specify a key property for each list item to differentiate each list item from its siblings. If your data was from a database, Alexa, Ben, and Claudia\u2019s database IDs could be used as keys.\n\n\n```javascript\n<likey={user.id}>{user.name}:{user.taskCount}tasks left</li>\n```\n\n\nWhen a list is re-rendered, React takes each list item\u2019s key and searches the previous list\u2019s items for a matching key. If the current list has a key that didn\u2019t exist before, React creates a component. If the current list is missing a key that existed in the previous list, React destroys the previous component. If two keys match, the corresponding component is moved.\n\nKeys tell React about the identity of each component, which allows React to maintain state between re-renders. If a component\u2019s key changes, the component will be destroyed and re-created with a new state.\n\nkey is a special and reserved property in React. When an element is created, React extracts the key property and stores the key directly on the returned element. Even though key may look like it is passed as props, React automatically uses key to decide which components to update. There\u2019s no way for a component to ask what key its parent specified.\n\nIt\u2019s strongly recommended that you assign proper keys whenever you build dynamic lists. If you don\u2019t have an appropriate key, you may want to consider restructuring your data so that you do.\n\nIf no key is specified, React will report an error and use the array index as a key by default. Using the array index as a key is problematic when trying to re-order a list\u2019s items or inserting/removing list items. Explicitly passing key={i} silences the error but has the same problems as array indices and is not recommended in most cases.\n\nKeys do not need to be globally unique; they only need to be unique between components and their siblings.\n\n\n### Implementing time travel\n\n\nIn the tic-tac-toe game\u2019s history, each past move has a unique ID associated with it: it\u2019s the sequential number of the move. Moves will never be re-ordered, deleted, or inserted in the middle, so it\u2019s safe to use the move index as a key.\n\nIn the Game function, you can add the key as <li key={move}> , and if you reload the rendered game, React\u2019s \u201ckey\u201d error should disappear:\n\n\n```javascript\nconstmoves=history.map((squares,move)=>{//...return(<likey={move}><buttononClick={()=>jumpTo(move)}>{description}</button></li>);});\n```\n\n\n\n```javascript\nimport{useState}from'react';functionSquare({value,onSquareClick}){return(<buttonclassName=\"square\"onClick={onSquareClick}>{value}</button>);}functionBoard({xIsNext,squares,onPlay}){functionhandleClick(i){if(calculateWinner(squares)||squares[i]){return;}constnextSquares=squares.slice();if(xIsNext){nextSquares[i]='X';}else{nextSquares[i]='O';}onPlay(nextSquares);}constwinner=calculateWinner(squares);letstatus;if(winner){status='Winner: '+winner;}else{status='Next player: '+(xIsNext?'X':'O');}return(<><divclassName=\"status\">{status}</div><divclassName=\"board-row\"><Squarevalue={squares[0]}onSquareClick={()=>handleClick(0)}/><Squarevalue={squares[1]}onSquareClick={()=>handleClick(1)}/><Squarevalue={squares[2]}onSquareClick={()=>handleClick(2)}/></div><divclassName=\"board-row\"><Squarevalue={squares[3]}onSquareClick={()=>handleClick(3)}/><Squarevalue={squares[4]}onSquareClick={()=>handleClick(4)}/><Squarevalue={squares[5]}onSquareClick={()=>handleClick(5)}/></div><divclassName=\"board-row\"><Squarevalue={squares[6]}onSquareClick={()=>handleClick(6)}/><Squarevalue={squares[7]}onSquareClick={()=>handleClick(7)}/><Squarevalue={squares[8]}onSquareClick={()=>handleClick(8)}/></div></>);}exportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);constcurrentSquares=history[history.length-1];functionhandlePlay(nextSquares){setHistory([...history,nextSquares]);setXIsNext(!xIsNext);}functionjumpTo(nextMove){// TODO}constmoves=history.map((squares,move)=>{letdescription;if(move>0){description='Go to move #'+move;}else{description='Go to game start';}return(<likey={move}><buttononClick={()=>jumpTo(move)}>{description}</button></li>);});return(<divclassName=\"game\"><divclassName=\"game-board\"><BoardxIsNext={xIsNext}squares={currentSquares}onPlay={handlePlay}/></div><divclassName=\"game-info\"><ol>{moves}</ol></div></div>);}functioncalculateWinner(squares){constlines=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6],];for(leti=0;i<lines.length;i++){const[a,b,c]=lines[i];if(squares[a]&&squares[a]===squares[b]&&squares[a]===squares[c]){returnsquares[a];}}returnnull;}\n```\n\n\nBefore you can implement jumpTo , you need the Game component to keep track of which step the user is currently viewing. To do this, define a new state variable called currentMove , defaulting to 0 :\n\n\n```javascript\nexportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);const[currentMove,setCurrentMove]=useState(0);constcurrentSquares=history[history.length-1];//...}\n```\n\n\nNext, update the jumpTo function inside Game to update that currentMove . You\u2019ll also set xIsNext to true if the number that you\u2019re changing currentMove to is even.\n\n\n```javascript\nexportdefaultfunctionGame(){// ...functionjumpTo(nextMove){setCurrentMove(nextMove);setXIsNext(nextMove%2===0);}//...}\n```\n\n\nYou will now make two changes to the Game \u2019s handlePlay function which is called when you click on a square.\n\n* If you \u201cgo back in time\u201d and then make a new move from that point, you only want to keep the history up to that point. Instead of adding nextSquares after all items ( ... spread syntax) in history , you\u2019ll add it after all items in history.slice(0, currentMove + 1) so that you\u2019re only keeping that portion of the old history.\n* Each time a move is made, you need to update currentMove to point to the latest history entry.\n\n\n```javascript\nfunctionhandlePlay(nextSquares){constnextHistory=[...history.slice(0,currentMove+1),nextSquares];setHistory(nextHistory);setCurrentMove(nextHistory.length-1);setXIsNext(!xIsNext);}\n```\n\n\nFinally, you will modify the Game component to render the currently selected move, instead of always rendering the final move:\n\n\n```javascript\nexportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);const[currentMove,setCurrentMove]=useState(0);constcurrentSquares=history[currentMove];// ...}\n```\n\n\nIf you click on any step in the game\u2019s history, the tic-tac-toe board should immediately update to show what the board looked like after that step occurred.\n\n\n```javascript\nimport{useState}from'react';functionSquare({value,onSquareClick}){return(<buttonclassName=\"square\"onClick={onSquareClick}>{value}</button>);}functionBoard({xIsNext,squares,onPlay}){functionhandleClick(i){if(calculateWinner(squares)||squares[i]){return;}constnextSquares=squares.slice();if(xIsNext){nextSquares[i]='X';}else{nextSquares[i]='O';}onPlay(nextSquares);}constwinner=calculateWinner(squares);letstatus;if(winner){status='Winner: '+winner;}else{status='Next player: '+(xIsNext?'X':'O');}return(<><divclassName=\"status\">{status}</div><divclassName=\"board-row\"><Squarevalue={squares[0]}onSquareClick={()=>handleClick(0)}/><Squarevalue={squares[1]}onSquareClick={()=>handleClick(1)}/><Squarevalue={squares[2]}onSquareClick={()=>handleClick(2)}/></div><divclassName=\"board-row\"><Squarevalue={squares[3]}onSquareClick={()=>handleClick(3)}/><Squarevalue={squares[4]}onSquareClick={()=>handleClick(4)}/><Squarevalue={squares[5]}onSquareClick={()=>handleClick(5)}/></div><divclassName=\"board-row\"><Squarevalue={squares[6]}onSquareClick={()=>handleClick(6)}/><Squarevalue={squares[7]}onSquareClick={()=>handleClick(7)}/><Squarevalue={squares[8]}onSquareClick={()=>handleClick(8)}/></div></>);}exportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);const[currentMove,setCurrentMove]=useState(0);constcurrentSquares=history[currentMove];functionhandlePlay(nextSquares){constnextHistory=[...history.slice(0,currentMove+1),nextSquares];setHistory(nextHistory);setCurrentMove(nextHistory.length-1);setXIsNext(!xIsNext);}functionjumpTo(nextMove){setCurrentMove(nextMove);setXIsNext(nextMove%2===0);}constmoves=history.map((squares,move)=>{letdescription;if(move>0){description='Go to move #'+move;}else{description='Go to game start';}return(<likey={move}><buttononClick={()=>jumpTo(move)}>{description}</button></li>);});return(<divclassName=\"game\"><divclassName=\"game-board\"><BoardxIsNext={xIsNext}squares={currentSquares}onPlay={handlePlay}/></div><divclassName=\"game-info\"><ol>{moves}</ol></div></div>);}functioncalculateWinner(squares){constlines=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6],];for(leti=0;i<lines.length;i++){const[a,b,c]=lines[i];if(squares[a]&&squares[a]===squares[b]&&squares[a]===squares[c]){returnsquares[a];}}returnnull;}\n```\n\n\n\n### Final cleanup\n\n\nIf you look at the code very closely, you may notice that xIsNext === true when currentMove is even and xIsNext === false when currentMove is odd. In other words, if you know the value of currentMove , then you can always figure out what xIsNext should be.\n\nThere\u2019s no reason for you to store both of these in state. In fact, always try to avoid redundant state. Simplifying what you store in state reduces bugs and makes your code easier to understand. Change Game so that it doesn\u2019t store xIsNext as a separate state variable and instead figures it out based on the currentMove :\n\n\n```javascript\nexportdefaultfunctionGame(){const[history,setHistory]=useState([Array(9).fill(null)]);const[currentMove,setCurrentMove]=useState(0);constxIsNext=currentMove%2===0;constcurrentSquares=history[currentMove];functionhandlePlay(nextSquares){constnextHistory=[...history.slice(0,currentMove+1),nextSquares];setHistory(nextHistory);setCurrentMove(nextHistory.length-1);}functionjumpTo(nextMove){setCurrentMove(nextMove);}// ...}\n```\n\n\nYou no longer need the xIsNext state declaration or the calls to setXIsNext . Now, there\u2019s no chance for xIsNext to get out of sync with currentMove , even if you make a mistake while coding the components.\n\n\n### Wrapping up\n\n\nCongratulations! You\u2019ve created a tic-tac-toe game that:\n\n* Lets you play tic-tac-toe,\n* Indicates when a player has won the game,\n* Stores a game\u2019s history as a game progresses,\n* Allows players to review a game\u2019s history and see previous versions of a game\u2019s board.\n\nNice work! We hope you now feel like you have a decent grasp of how React works.\n\nCheck out the final result here:\n\n\n```javascript\nimport{useState}from'react';functionSquare({value,onSquareClick}){return(<buttonclassName=\"square\"onClick={onSquareClick}>{value}</button>);}functionBoard({xIsNext,squares,onPlay}){functionhandleClick(i){if(calculateWinner(squares)||squares[i]){return;}constnextSquares=squares.slice();if(xIsNext){nextSquares[i]='X';}else{nextSquares[i]='O';}onPlay(nextSquares);}constwinner=calculateWinner(squares);letstatus;if(winner){status='Winner: '+winner;}else{status='Next player: '+(xIsNext?'X':'O');}return(<><divclassName=\"status\">{status}</div><divclassName=\"board-row\"><Squarevalue={squares[0]}onSquareClick={()=>handleClick(0)}/><Squarevalue={squares[1]}onSquareClick={()=>handleClick(1)}/><Squarevalue={squares[2]}onSquareClick={()=>handleClick(2)}/></div><divclassName=\"board-row\"><Squarevalue={squares[3]}onSquareClick={()=>handleClick(3)}/><Squarevalue={squares[4]}onSquareClick={()=>handleClick(4)}/><Squarevalue={squares[5]}onSquareClick={()=>handleClick(5)}/></div><divclassName=\"board-row\"><Squarevalue={squares[6]}onSquareClick={()=>handleClick(6)}/><Squarevalue={squares[7]}onSquareClick={()=>handleClick(7)}/><Squarevalue={squares[8]}onSquareClick={()=>handleClick(8)}/></div></>);}exportdefaultfunctionGame(){const[history,setHistory]=useState([Array(9).fill(null)]);const[currentMove,setCurrentMove]=useState(0);constxIsNext=currentMove%2===0;constcurrentSquares=history[currentMove];functionhandlePlay(nextSquares){constnextHistory=[...history.slice(0,currentMove+1),nextSquares];setHistory(nextHistory);setCurrentMove(nextHistory.length-1);}functionjumpTo(nextMove){setCurrentMove(nextMove);}constmoves=history.map((squares,move)=>{letdescription;if(move>0){description='Go to move #'+move;}else{description='Go to game start';}return(<likey={move}><buttononClick={()=>jumpTo(move)}>{description}</button></li>);});return(<divclassName=\"game\"><divclassName=\"game-board\"><BoardxIsNext={xIsNext}squares={currentSquares}onPlay={handlePlay}/></div><divclassName=\"game-info\"><ol>{moves}</ol></div></div>);}functioncalculateWinner(squares){constlines=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6],];for(leti=0;i<lines.length;i++){const[a,b,c]=lines[i];if(squares[a]&&squares[a]===squares[b]&&squares[a]===squares[c]){returnsquares[a];}}returnnull;}\n```\n\n\nIf you have extra time or want to practice your new React skills, here are some ideas for improvements that you could make to the tic-tac-toe game, listed in order of increasing difficulty:\n\n1. For the current move only, show \u201cYou are at move #\u2026\u201d instead of a button.\n2. Rewrite Board to use two loops to make the squares instead of hardcoding them.\n3. Add a toggle button that lets you sort the moves in either ascending or descending order.\n4. When someone wins, highlight the three squares that caused the win (and when no one wins, display a message about the result being a draw).\n5. Display the location for each move in the format (row, col) in the move history list.\n\nThroughout this tutorial, you\u2019ve touched on React concepts including elements, components, props, and state. Now that you\u2019ve seen how these concepts work when building a game, check out Thinking in React to see how the same React concepts work when building an app\u2019s UI.", "source": "https://react.dev/learn/tutorial-tic-tac-toe", "category": "Tutorial: Tic-Tac-Toe"}
{"instruction": "Show me a code example of Adding time travel in React.", "input": "", "output": "As a final exercise, let\u2019s make it possible to \u201cgo back in time\u201d to the previous moves in the game.\n\n\n### Storing a history of moves\n\n\nIf you mutated the squares array, implementing time travel would be very difficult.\n\nHowever, you used slice() to create a new copy of the squares array after every move, and treated it as immutable. This will allow you to store every past version of the squares array, and navigate between the turns that have already happened.\n\nYou\u2019ll store the past squares arrays in another array called history , which you\u2019ll store as a new state variable. The history array represents all board states, from the first to the last move, and has a shape like this:\n\n\n```javascript\n[// Before first move[null,null,null,null,null,null,null,null,null],// After first move[null,null,null,null,'X',null,null,null,null],// After second move[null,null,null,null,'X',null,null,null,'O'],// ...]\n```\n\n\n\n### Lifting state up, again\n\n\nYou will now write a new top-level component called Game to display a list of past moves. That\u2019s where you will place the history state that contains the entire game history.\n\nPlacing the history state into the Game component will let you remove the squares state from its child Board component. Just like you \u201clifted state up\u201d from the Square component into the Board component, you will now lift it up from the Board into the top-level Game component. This gives the Game component full control over the Board \u2019s data and lets it instruct the Board to render previous turns from the history .\n\nFirst, add a Game component with export default . Have it render the Board component and some markup:\n\n\n```javascript\nfunctionBoard(){// ...}exportdefaultfunctionGame(){return(<divclassName=\"game\"><divclassName=\"game-board\"><Board/></div><divclassName=\"game-info\"><ol>{/*TODO*/}</ol></div></div>);}\n```\n\n\nNote that you are removing the export default keywords before the function Board() { declaration and adding them before the function Game() { declaration. This tells your index.js file to use the Game component as the top-level component instead of your Board component. The additional div s returned by the Game component are making room for the game information you\u2019ll add to the board later.\n\nAdd some state to the Game component to track which player is next and the history of moves:\n\n\n```javascript\nexportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);// ...\n```\n\n\nNotice how [Array(9).fill(null)] is an array with a single item, which itself is an array of 9 null s.\n\nTo render the squares for the current move, you\u2019ll want to read the last squares array from the history . You don\u2019t need useState for this\u2014you already have enough information to calculate it during rendering:\n\n\n```javascript\nexportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);constcurrentSquares=history[history.length-1];// ...\n```\n\n\nNext, create a handlePlay function inside the Game component that will be called by the Board component to update the game. Pass xIsNext , currentSquares and handlePlay as props to the Board component:\n\n\n```javascript\nexportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);constcurrentSquares=history[history.length-1];functionhandlePlay(nextSquares){// TODO}return(<divclassName=\"game\"><divclassName=\"game-board\"><BoardxIsNext={xIsNext}squares={currentSquares}onPlay={handlePlay}/>//...)}\n```\n\n\nLet\u2019s make the Board component fully controlled by the props it receives. Change the Board component to take three props: xIsNext , squares , and a new onPlay function that Board can call with the updated squares array when a player makes a move. Next, remove the first two lines of the Board function that call useState :\n\n\n```javascript\nfunctionBoard({xIsNext,squares,onPlay}){functionhandleClick(i){//...}// ...}\n```\n\n\nNow replace the setSquares and setXIsNext calls in handleClick in the Board component with a single call to your new onPlay function so the Game component can update the Board when the user clicks a square:\n\n\n```javascript\nfunctionBoard({xIsNext,squares,onPlay}){functionhandleClick(i){if(calculateWinner(squares)||squares[i]){return;}constnextSquares=squares.slice();if(xIsNext){nextSquares[i]=\"X\";}else{nextSquares[i]=\"O\";}onPlay(nextSquares);}//...}\n```\n\n\nThe Board component is fully controlled by the props passed to it by the Game component. You need to implement the handlePlay function in the Game component to get the game working again.\n\nWhat should handlePlay do when called? Remember that Board used to call setSquares with an updated array; now it passes the updated squares array to onPlay .\n\nThe handlePlay function needs to update Game \u2019s state to trigger a re-render, but you don\u2019t have a setSquares function that you can call any more\u2014you\u2019re now using the history state variable to store this information. You\u2019ll want to update history by appending the updated squares array as a new history entry. You also want to toggle xIsNext , just as Board used to do:\n\n\n```javascript\nexportdefaultfunctionGame(){//...functionhandlePlay(nextSquares){setHistory([...history,nextSquares]);setXIsNext(!xIsNext);}//...}\n```\n\n\nHere, [...history, nextSquares] creates a new array that contains all the items in history , followed by nextSquares . (You can read the ...history spread syntax as \u201cenumerate all the items in history \u201d.)\n\nFor example, if history is [[null,null,null], [\"X\",null,null]] and nextSquares is [\"X\",null,\"O\"] , then the new [...history, nextSquares] array will be [[null,null,null], [\"X\",null,null], [\"X\",null,\"O\"]] .\n\nAt this point, you\u2019ve moved the state to live in the Game component, and the UI should be fully working, just as it was before the refactor. Here is what the code should look like at this point:\n\n\n```javascript\nimport{useState}from'react';functionSquare({value,onSquareClick}){return(<buttonclassName=\"square\"onClick={onSquareClick}>{value}</button>);}functionBoard({xIsNext,squares,onPlay}){functionhandleClick(i){if(calculateWinner(squares)||squares[i]){return;}constnextSquares=squares.slice();if(xIsNext){nextSquares[i]='X';}else{nextSquares[i]='O';}onPlay(nextSquares);}constwinner=calculateWinner(squares);letstatus;if(winner){status='Winner: '+winner;}else{status='Next player: '+(xIsNext?'X':'O');}return(<><divclassName=\"status\">{status}</div><divclassName=\"board-row\"><Squarevalue={squares[0]}onSquareClick={()=>handleClick(0)}/><Squarevalue={squares[1]}onSquareClick={()=>handleClick(1)}/><Squarevalue={squares[2]}onSquareClick={()=>handleClick(2)}/></div><divclassName=\"board-row\"><Squarevalue={squares[3]}onSquareClick={()=>handleClick(3)}/><Squarevalue={squares[4]}onSquareClick={()=>handleClick(4)}/><Squarevalue={squares[5]}onSquareClick={()=>handleClick(5)}/></div><divclassName=\"board-row\"><Squarevalue={squares[6]}onSquareClick={()=>handleClick(6)}/><Squarevalue={squares[7]}onSquareClick={()=>handleClick(7)}/><Squarevalue={squares[8]}onSquareClick={()=>handleClick(8)}/></div></>);}exportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);constcurrentSquares=history[history.length-1];functionhandlePlay(nextSquares){setHistory([...history,nextSquares]);setXIsNext(!xIsNext);}return(<divclassName=\"game\"><divclassName=\"game-board\"><BoardxIsNext={xIsNext}squares={currentSquares}onPlay={handlePlay}/></div><divclassName=\"game-info\"><ol>{/*TODO*/}</ol></div></div>);}functioncalculateWinner(squares){constlines=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6],];for(leti=0;i<lines.length;i++){const[a,b,c]=lines[i];if(squares[a]&&squares[a]===squares[b]&&squares[a]===squares[c]){returnsquares[a];}}returnnull;}\n```\n\n\n\n### Showing the past moves\n\n\nSince you are recording the tic-tac-toe game\u2019s history, you can now display a list of past moves to the player.\n\nReact elements like <button> are regular JavaScript objects; you can pass them around in your application. To render multiple items in React, you can use an array of React elements.\n\nYou already have an array of history moves in state, so now you need to transform it to an array of React elements. In JavaScript, to transform one array into another, you can use the array map method:\n\n\n```javascript\n[1,2,3].map((x)=>x*2)// [2, 4, 6]\n```\n\n\nYou\u2019ll use map to transform your history of moves into React elements representing buttons on the screen, and display a list of buttons to \u201cjump\u201d to past moves. Let\u2019s map over the history in the Game component:\n\n\n```javascript\nexportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);constcurrentSquares=history[history.length-1];functionhandlePlay(nextSquares){setHistory([...history,nextSquares]);setXIsNext(!xIsNext);}functionjumpTo(nextMove){// TODO}constmoves=history.map((squares,move)=>{letdescription;if(move>0){description='Go to move #'+move;}else{description='Go to game start';}return(<li><buttononClick={()=>jumpTo(move)}>{description}</button></li>);});return(<divclassName=\"game\"><divclassName=\"game-board\"><BoardxIsNext={xIsNext}squares={currentSquares}onPlay={handlePlay}/></div><divclassName=\"game-info\"><ol>{moves}</ol></div></div>);}\n```\n\n\nYou can see what your code should look like below. Note that you should see an error in the developer tools console that says:\n\nYou\u2019ll fix this error in the next section.\n\n\n```javascript\nimport{useState}from'react';functionSquare({value,onSquareClick}){return(<buttonclassName=\"square\"onClick={onSquareClick}>{value}</button>);}functionBoard({xIsNext,squares,onPlay}){functionhandleClick(i){if(calculateWinner(squares)||squares[i]){return;}constnextSquares=squares.slice();if(xIsNext){nextSquares[i]='X';}else{nextSquares[i]='O';}onPlay(nextSquares);}constwinner=calculateWinner(squares);letstatus;if(winner){status='Winner: '+winner;}else{status='Next player: '+(xIsNext?'X':'O');}return(<><divclassName=\"status\">{status}</div><divclassName=\"board-row\"><Squarevalue={squares[0]}onSquareClick={()=>handleClick(0)}/><Squarevalue={squares[1]}onSquareClick={()=>handleClick(1)}/><Squarevalue={squares[2]}onSquareClick={()=>handleClick(2)}/></div><divclassName=\"board-row\"><Squarevalue={squares[3]}onSquareClick={()=>handleClick(3)}/><Squarevalue={squares[4]}onSquareClick={()=>handleClick(4)}/><Squarevalue={squares[5]}onSquareClick={()=>handleClick(5)}/></div><divclassName=\"board-row\"><Squarevalue={squares[6]}onSquareClick={()=>handleClick(6)}/><Squarevalue={squares[7]}onSquareClick={()=>handleClick(7)}/><Squarevalue={squares[8]}onSquareClick={()=>handleClick(8)}/></div></>);}exportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);constcurrentSquares=history[history.length-1];functionhandlePlay(nextSquares){setHistory([...history,nextSquares]);setXIsNext(!xIsNext);}functionjumpTo(nextMove){// TODO}constmoves=history.map((squares,move)=>{letdescription;if(move>0){description='Go to move #'+move;}else{description='Go to game start';}return(<li><buttononClick={()=>jumpTo(move)}>{description}</button></li>);});return(<divclassName=\"game\"><divclassName=\"game-board\"><BoardxIsNext={xIsNext}squares={currentSquares}onPlay={handlePlay}/></div><divclassName=\"game-info\"><ol>{moves}</ol></div></div>);}functioncalculateWinner(squares){constlines=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6],];for(leti=0;i<lines.length;i++){const[a,b,c]=lines[i];if(squares[a]&&squares[a]===squares[b]&&squares[a]===squares[c]){returnsquares[a];}}returnnull;}\n```\n\n\nAs you iterate through the history array inside the function you passed to map , the squares argument goes through each element of history , and the move argument goes through each array index: 0 , 1 , 2 , \u2026. (In most cases, you\u2019d need the actual array elements, but to render a list of moves you will only need indexes.)\n\nFor each move in the tic-tac-toe game\u2019s history, you create a list item <li> which contains a button <button> . The button has an onClick handler which calls a function called jumpTo (that you haven\u2019t implemented yet).\n\nFor now, you should see a list of the moves that occurred in the game and an error in the developer tools console. Let\u2019s discuss what the \u201ckey\u201d error means.\n\n\n### Picking a key\n\n\nWhen you render a list, React stores some information about each rendered list item. When you update a list, React needs to determine what has changed. You could have added, removed, re-arranged, or updated the list\u2019s items.\n\nImagine transitioning from\n\n\n```javascript\n<li>Alexa: 7 tasks left</li><li>Ben: 5 tasks left</li>\n```\n\n\nto\n\n\n```javascript\n<li>Ben: 9 tasks left</li><li>Claudia: 8 tasks left</li><li>Alexa: 5 tasks left</li>\n```\n\n\nIn addition to the updated counts, a human reading this would probably say that you swapped Alexa and Ben\u2019s ordering and inserted Claudia between Alexa and Ben. However, React is a computer program and does not know what you intended, so you need to specify a key property for each list item to differentiate each list item from its siblings. If your data was from a database, Alexa, Ben, and Claudia\u2019s database IDs could be used as keys.\n\n\n```javascript\n<likey={user.id}>{user.name}:{user.taskCount}tasks left</li>\n```\n\n\nWhen a list is re-rendered, React takes each list item\u2019s key and searches the previous list\u2019s items for a matching key. If the current list has a key that didn\u2019t exist before, React creates a component. If the current list is missing a key that existed in the previous list, React destroys the previous component. If two keys match, the corresponding component is moved.\n\nKeys tell React about the identity of each component, which allows React to maintain state between re-renders. If a component\u2019s key changes, the component will be destroyed and re-created with a new state.\n\nkey is a special and reserved property in React. When an element is created, React extracts the key property and stores the key directly on the returned element. Even though key may look like it is passed as props, React automatically uses key to decide which components to update. There\u2019s no way for a component to ask what key its parent specified.\n\nIt\u2019s strongly recommended that you assign proper keys whenever you build dynamic lists. If you don\u2019t have an appropriate key, you may want to consider restructuring your data so that you do.\n\nIf no key is specified, React will report an error and use the array index as a key by default. Using the array index as a key is problematic when trying to re-order a list\u2019s items or inserting/removing list items. Explicitly passing key={i} silences the error but has the same problems as array indices and is not recommended in most cases.\n\nKeys do not need to be globally unique; they only need to be unique between components and their siblings.\n\n\n### Implementing time travel\n\n\nIn the tic-tac-toe game\u2019s history, each past move has a unique ID associated with it: it\u2019s the sequential number of the move. Moves will never be re-ordered, deleted, or inserted in the middle, so it\u2019s safe to use the move index as a key.\n\nIn the Game function, you can add the key as <li key={move}> , and if you reload the rendered game, React\u2019s \u201ckey\u201d error should disappear:\n\n\n```javascript\nconstmoves=history.map((squares,move)=>{//...return(<likey={move}><buttononClick={()=>jumpTo(move)}>{description}</button></li>);});\n```\n\n\n\n```javascript\nimport{useState}from'react';functionSquare({value,onSquareClick}){return(<buttonclassName=\"square\"onClick={onSquareClick}>{value}</button>);}functionBoard({xIsNext,squares,onPlay}){functionhandleClick(i){if(calculateWinner(squares)||squares[i]){return;}constnextSquares=squares.slice();if(xIsNext){nextSquares[i]='X';}else{nextSquares[i]='O';}onPlay(nextSquares);}constwinner=calculateWinner(squares);letstatus;if(winner){status='Winner: '+winner;}else{status='Next player: '+(xIsNext?'X':'O');}return(<><divclassName=\"status\">{status}</div><divclassName=\"board-row\"><Squarevalue={squares[0]}onSquareClick={()=>handleClick(0)}/><Squarevalue={squares[1]}onSquareClick={()=>handleClick(1)}/><Squarevalue={squares[2]}onSquareClick={()=>handleClick(2)}/></div><divclassName=\"board-row\"><Squarevalue={squares[3]}onSquareClick={()=>handleClick(3)}/><Squarevalue={squares[4]}onSquareClick={()=>handleClick(4)}/><Squarevalue={squares[5]}onSquareClick={()=>handleClick(5)}/></div><divclassName=\"board-row\"><Squarevalue={squares[6]}onSquareClick={()=>handleClick(6)}/><Squarevalue={squares[7]}onSquareClick={()=>handleClick(7)}/><Squarevalue={squares[8]}onSquareClick={()=>handleClick(8)}/></div></>);}exportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);constcurrentSquares=history[history.length-1];functionhandlePlay(nextSquares){setHistory([...history,nextSquares]);setXIsNext(!xIsNext);}functionjumpTo(nextMove){// TODO}constmoves=history.map((squares,move)=>{letdescription;if(move>0){description='Go to move #'+move;}else{description='Go to game start';}return(<likey={move}><buttononClick={()=>jumpTo(move)}>{description}</button></li>);});return(<divclassName=\"game\"><divclassName=\"game-board\"><BoardxIsNext={xIsNext}squares={currentSquares}onPlay={handlePlay}/></div><divclassName=\"game-info\"><ol>{moves}</ol></div></div>);}functioncalculateWinner(squares){constlines=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6],];for(leti=0;i<lines.length;i++){const[a,b,c]=lines[i];if(squares[a]&&squares[a]===squares[b]&&squares[a]===squares[c]){returnsquares[a];}}returnnull;}\n```\n\n\nBefore you can implement jumpTo , you need the Game component to keep track of which step the user is currently viewing. To do this, define a new state variable called currentMove , defaulting to 0 :\n\n\n```javascript\nexportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);const[currentMove,setCurrentMove]=useState(0);constcurrentSquares=history[history.length-1];//...}\n```\n\n\nNext, update the jumpTo function inside Game to update that currentMove . You\u2019ll also set xIsNext to true if the number that you\u2019re changing currentMove to is even.\n\n\n```javascript\nexportdefaultfunctionGame(){// ...functionjumpTo(nextMove){setCurrentMove(nextMove);setXIsNext(nextMove%2===0);}//...}\n```\n\n\nYou will now make two changes to the Game \u2019s handlePlay function which is called when you click on a square.\n\n* If you \u201cgo back in time\u201d and then make a new move from that point, you only want to keep the history up to that point. Instead of adding nextSquares after all items ( ... spread syntax) in history , you\u2019ll add it after all items in history.slice(0, currentMove + 1) so that you\u2019re only keeping that portion of the old history.\n* Each time a move is made, you need to update currentMove to point to the latest history entry.\n\n\n```javascript\nfunctionhandlePlay(nextSquares){constnextHistory=[...history.slice(0,currentMove+1),nextSquares];setHistory(nextHistory);setCurrentMove(nextHistory.length-1);setXIsNext(!xIsNext);}\n```\n\n\nFinally, you will modify the Game component to render the currently selected move, instead of always rendering the final move:\n\n\n```javascript\nexportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);const[currentMove,setCurrentMove]=useState(0);constcurrentSquares=history[currentMove];// ...}\n```\n\n\nIf you click on any step in the game\u2019s history, the tic-tac-toe board should immediately update to show what the board looked like after that step occurred.\n\n\n```javascript\nimport{useState}from'react';functionSquare({value,onSquareClick}){return(<buttonclassName=\"square\"onClick={onSquareClick}>{value}</button>);}functionBoard({xIsNext,squares,onPlay}){functionhandleClick(i){if(calculateWinner(squares)||squares[i]){return;}constnextSquares=squares.slice();if(xIsNext){nextSquares[i]='X';}else{nextSquares[i]='O';}onPlay(nextSquares);}constwinner=calculateWinner(squares);letstatus;if(winner){status='Winner: '+winner;}else{status='Next player: '+(xIsNext?'X':'O');}return(<><divclassName=\"status\">{status}</div><divclassName=\"board-row\"><Squarevalue={squares[0]}onSquareClick={()=>handleClick(0)}/><Squarevalue={squares[1]}onSquareClick={()=>handleClick(1)}/><Squarevalue={squares[2]}onSquareClick={()=>handleClick(2)}/></div><divclassName=\"board-row\"><Squarevalue={squares[3]}onSquareClick={()=>handleClick(3)}/><Squarevalue={squares[4]}onSquareClick={()=>handleClick(4)}/><Squarevalue={squares[5]}onSquareClick={()=>handleClick(5)}/></div><divclassName=\"board-row\"><Squarevalue={squares[6]}onSquareClick={()=>handleClick(6)}/><Squarevalue={squares[7]}onSquareClick={()=>handleClick(7)}/><Squarevalue={squares[8]}onSquareClick={()=>handleClick(8)}/></div></>);}exportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);const[currentMove,setCurrentMove]=useState(0);constcurrentSquares=history[currentMove];functionhandlePlay(nextSquares){constnextHistory=[...history.slice(0,currentMove+1),nextSquares];setHistory(nextHistory);setCurrentMove(nextHistory.length-1);setXIsNext(!xIsNext);}functionjumpTo(nextMove){setCurrentMove(nextMove);setXIsNext(nextMove%2===0);}constmoves=history.map((squares,move)=>{letdescription;if(move>0){description='Go to move #'+move;}else{description='Go to game start';}return(<likey={move}><buttononClick={()=>jumpTo(move)}>{description}</button></li>);});return(<divclassName=\"game\"><divclassName=\"game-board\"><BoardxIsNext={xIsNext}squares={currentSquares}onPlay={handlePlay}/></div><divclassName=\"game-info\"><ol>{moves}</ol></div></div>);}functioncalculateWinner(squares){constlines=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6],];for(leti=0;i<lines.length;i++){const[a,b,c]=lines[i];if(squares[a]&&squares[a]===squares[b]&&squares[a]===squares[c]){returnsquares[a];}}returnnull;}\n```\n\n\n\n### Final cleanup\n\n\nIf you look at the code very closely, you may notice that xIsNext === true when currentMove is even and xIsNext === false when currentMove is odd. In other words, if you know the value of currentMove , then you can always figure out what xIsNext should be.\n\nThere\u2019s no reason for you to store both of these in state. In fact, always try to avoid redundant state. Simplifying what you store in state reduces bugs and makes your code easier to understand. Change Game so that it doesn\u2019t store xIsNext as a separate state variable and instead figures it out based on the currentMove :\n\n\n```javascript\nexportdefaultfunctionGame(){const[history,setHistory]=useState([Array(9).fill(null)]);const[currentMove,setCurrentMove]=useState(0);constxIsNext=currentMove%2===0;constcurrentSquares=history[currentMove];functionhandlePlay(nextSquares){constnextHistory=[...history.slice(0,currentMove+1),nextSquares];setHistory(nextHistory);setCurrentMove(nextHistory.length-1);}functionjumpTo(nextMove){setCurrentMove(nextMove);}// ...}\n```\n\n\nYou no longer need the xIsNext state declaration or the calls to setXIsNext . Now, there\u2019s no chance for xIsNext to get out of sync with currentMove , even if you make a mistake while coding the components.\n\n\n### Wrapping up\n\n\nCongratulations! You\u2019ve created a tic-tac-toe game that:\n\n* Lets you play tic-tac-toe,\n* Indicates when a player has won the game,\n* Stores a game\u2019s history as a game progresses,\n* Allows players to review a game\u2019s history and see previous versions of a game\u2019s board.\n\nNice work! We hope you now feel like you have a decent grasp of how React works.\n\nCheck out the final result here:\n\n\n```javascript\nimport{useState}from'react';functionSquare({value,onSquareClick}){return(<buttonclassName=\"square\"onClick={onSquareClick}>{value}</button>);}functionBoard({xIsNext,squares,onPlay}){functionhandleClick(i){if(calculateWinner(squares)||squares[i]){return;}constnextSquares=squares.slice();if(xIsNext){nextSquares[i]='X';}else{nextSquares[i]='O';}onPlay(nextSquares);}constwinner=calculateWinner(squares);letstatus;if(winner){status='Winner: '+winner;}else{status='Next player: '+(xIsNext?'X':'O');}return(<><divclassName=\"status\">{status}</div><divclassName=\"board-row\"><Squarevalue={squares[0]}onSquareClick={()=>handleClick(0)}/><Squarevalue={squares[1]}onSquareClick={()=>handleClick(1)}/><Squarevalue={squares[2]}onSquareClick={()=>handleClick(2)}/></div><divclassName=\"board-row\"><Squarevalue={squares[3]}onSquareClick={()=>handleClick(3)}/><Squarevalue={squares[4]}onSquareClick={()=>handleClick(4)}/><Squarevalue={squares[5]}onSquareClick={()=>handleClick(5)}/></div><divclassName=\"board-row\"><Squarevalue={squares[6]}onSquareClick={()=>handleClick(6)}/><Squarevalue={squares[7]}onSquareClick={()=>handleClick(7)}/><Squarevalue={squares[8]}onSquareClick={()=>handleClick(8)}/></div></>);}exportdefaultfunctionGame(){const[history,setHistory]=useState([Array(9).fill(null)]);const[currentMove,setCurrentMove]=useState(0);constxIsNext=currentMove%2===0;constcurrentSquares=history[currentMove];functionhandlePlay(nextSquares){constnextHistory=[...history.slice(0,currentMove+1),nextSquares];setHistory(nextHistory);setCurrentMove(nextHistory.length-1);}functionjumpTo(nextMove){setCurrentMove(nextMove);}constmoves=history.map((squares,move)=>{letdescription;if(move>0){description='Go to move #'+move;}else{description='Go to game start';}return(<likey={move}><buttononClick={()=>jumpTo(move)}>{description}</button></li>);});return(<divclassName=\"game\"><divclassName=\"game-board\"><BoardxIsNext={xIsNext}squares={currentSquares}onPlay={handlePlay}/></div><divclassName=\"game-info\"><ol>{moves}</ol></div></div>);}functioncalculateWinner(squares){constlines=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6],];for(leti=0;i<lines.length;i++){const[a,b,c]=lines[i];if(squares[a]&&squares[a]===squares[b]&&squares[a]===squares[c]){returnsquares[a];}}returnnull;}\n```\n\n\nIf you have extra time or want to practice your new React skills, here are some ideas for improvements that you could make to the tic-tac-toe game, listed in order of increasing difficulty:\n\n1. For the current move only, show \u201cYou are at move #\u2026\u201d instead of a button.\n2. Rewrite Board to use two loops to make the squares instead of hardcoding them.\n3. Add a toggle button that lets you sort the moves in either ascending or descending order.\n4. When someone wins, highlight the three squares that caused the win (and when no one wins, display a message about the result being a draw).\n5. Display the location for each move in the format (row, col) in the move history list.\n\nThroughout this tutorial, you\u2019ve touched on React concepts including elements, components, props, and state. Now that you\u2019ve seen how these concepts work when building a game, check out Thinking in React to see how the same React concepts work when building an app\u2019s UI.", "source": "https://react.dev/learn/tutorial-tic-tac-toe", "category": "Tutorial: Tic-Tac-Toe"}
{"instruction": "Tell me about Installation.", "input": "", "output": "All production-grade React frameworks offer support for using TypeScript. Follow the framework specific guide for installation:\n\n* Next.js\n* Remix\n* Gatsby\n* Expo\n\n\n### Adding TypeScript to an existing React project\n\n\nTo install the latest version of React\u2019s type definitions:\n\nThe following compiler options need to be set in your tsconfig.json :\n\n1. dom must be included in lib (Note: If no lib option is specified, dom is included by default).\n2. jsx must be set to one of the valid options. preserve should suffice for most applications.\nIf you\u2019re publishing a library, consult the jsx documentation on what value to choose.", "source": "https://react.dev/learn/typescript", "category": "Using TypeScript"}
{"instruction": "Tell me about TypeScript with React Components.", "input": "", "output": "\n### Note\n\n\nEvery file containing JSX must use the .tsx file extension. This is a TypeScript-specific extension that tells TypeScript that this file contains JSX.\n\nWriting TypeScript with React is very similar to writing JavaScript with React. The key difference when working with a component is that you can provide types for your component\u2019s props. These types can be used for correctness checking and providing inline documentation in editors.\n\nTaking the MyButton component from the Quick Start guide, we can add a type describing the title for the button:\n\n\n```javascript\nfunctionMyButton({title}:{title:string}){return(<button>{title}</button>);}exportdefaultfunctionMyApp(){return(<div><h1>Welcome to my app</h1><MyButtontitle=\"I'm a button\"/></div>);}\n```\n\n\n\n### Note\n\n\nThese sandboxes can handle TypeScript code, but they do not run the type-checker. This means you can amend the TypeScript sandboxes to learn, but you won\u2019t get any type errors or warnings. To get type-checking, you can use the TypeScript Playground or use a more fully-featured online sandbox.\n\nThis inline syntax is the simplest way to provide types for a component, though once you start to have a few fields to describe it can become unwieldy. Instead, you can use an interface or type to describe the component\u2019s props:\n\n\n```javascript\ninterfaceMyButtonProps{/** The text to display inside the button */title:string;/** Whether the button can be interacted with */disabled:boolean;}functionMyButton({title,disabled}:MyButtonProps){return(<buttondisabled={disabled}>{title}</button>);}exportdefaultfunctionMyApp(){return(<div><h1>Welcome to my app</h1><MyButtontitle=\"I'm a disabled button\"disabled={true}/></div>);}\n```\n\n\nThe type describing your component\u2019s props can be as simple or as complex as you need, though they should be an object type described with either a type or interface . You can learn about how TypeScript describes objects in Object Types but you may also be interested in using Union Types to describe a prop that can be one of a few different types and the Creating Types from Types guide for more advanced use cases.", "source": "https://react.dev/learn/typescript", "category": "Using TypeScript"}
{"instruction": "Show me a code example of TypeScript with React Components in React.", "input": "", "output": "\n### Note\n\n\nEvery file containing JSX must use the .tsx file extension. This is a TypeScript-specific extension that tells TypeScript that this file contains JSX.\n\nWriting TypeScript with React is very similar to writing JavaScript with React. The key difference when working with a component is that you can provide types for your component\u2019s props. These types can be used for correctness checking and providing inline documentation in editors.\n\nTaking the MyButton component from the Quick Start guide, we can add a type describing the title for the button:\n\n\n```javascript\nfunctionMyButton({title}:{title:string}){return(<button>{title}</button>);}exportdefaultfunctionMyApp(){return(<div><h1>Welcome to my app</h1><MyButtontitle=\"I'm a button\"/></div>);}\n```\n\n\n\n### Note\n\n\nThese sandboxes can handle TypeScript code, but they do not run the type-checker. This means you can amend the TypeScript sandboxes to learn, but you won\u2019t get any type errors or warnings. To get type-checking, you can use the TypeScript Playground or use a more fully-featured online sandbox.\n\nThis inline syntax is the simplest way to provide types for a component, though once you start to have a few fields to describe it can become unwieldy. Instead, you can use an interface or type to describe the component\u2019s props:\n\n\n```javascript\ninterfaceMyButtonProps{/** The text to display inside the button */title:string;/** Whether the button can be interacted with */disabled:boolean;}functionMyButton({title,disabled}:MyButtonProps){return(<buttondisabled={disabled}>{title}</button>);}exportdefaultfunctionMyApp(){return(<div><h1>Welcome to my app</h1><MyButtontitle=\"I'm a disabled button\"disabled={true}/></div>);}\n```\n\n\nThe type describing your component\u2019s props can be as simple or as complex as you need, though they should be an object type described with either a type or interface . You can learn about how TypeScript describes objects in Object Types but you may also be interested in using Union Types to describe a prop that can be one of a few different types and the Creating Types from Types guide for more advanced use cases.", "source": "https://react.dev/learn/typescript", "category": "Using TypeScript"}
{"instruction": "Can you describe Example Hooks in the context of React?", "input": "", "output": "The type definitions from @types/react include types for the built-in Hooks, so you can use them in your components without any additional setup. They are built to take into account the code you write in your component, so you will get inferred types a lot of the time and ideally do not need to handle the minutiae of providing the types.\n\nHowever, we can look at a few examples of how to provide types for Hooks.\n\n\n### useState\n\n\nThe useState Hook will re-use the value passed in as the initial state to determine what the type of the value should be. For example:\n\n\n```javascript\n// Infer the type as \"boolean\"const[enabled,setEnabled]=useState(false);\n```\n\n\nThis will assign the type of boolean to enabled , and setEnabled will be a function accepting either a boolean argument, or a function that returns a boolean . If you want to explicitly provide a type for the state, you can do so by providing a type argument to the useState call:\n\n\n```javascript\n// Explicitly set the type to \"boolean\"const[enabled,setEnabled]=useState<boolean>(false);\n```\n\n\nThis isn\u2019t very useful in this case, but a common case where you may want to provide a type is when you have a union type. For example, status here can be one of a few different strings:\n\n\n```javascript\ntypeStatus=\"idle\"|\"loading\"|\"success\"|\"error\";const[status,setStatus]=useState<Status>(\"idle\");\n```\n\n\nOr, as recommended in Principles for structuring state , you can group related state as an object and describe the different possibilities via object types:\n\n\n```javascript\ntypeRequestState=|{status:'idle'}|{status:'loading'}|{status:'success',data:any}|{status:'error',error:Error};const[requestState,setRequestState]=useState<RequestState>({status:'idle'});\n```\n\n\n\n### useReducer\n\n\nThe useReducer Hook is a more complex Hook that takes a reducer function and an initial state. The types for the reducer function are inferred from the initial state. You can optionally provide a type argument to the useReducer call to provide a type for the state, but it is often better to set the type on the initial state instead:\n\n\n```javascript\nimport{useReducer}from'react';interfaceState{count:number};typeCounterAction =\n  |{type:\"reset\"}|{type:\"setCount\";value:State[\"count\"]}constinitialState:State ={count:0};functionstateReducer(state:State,action:CounterAction):State{switch(action.type){case\"reset\":returninitialState;case\"setCount\":return{...state,count:action.value};default:thrownewError(\"Unknown action\");}}exportdefaultfunctionApp(){const[state,dispatch]=useReducer(stateReducer,initialState);constaddFive=()=>dispatch({type:\"setCount\",value:state.count+5});constreset=()=>dispatch({type:\"reset\"});return(<div><h1>Welcome to my counter</h1><p>Count:{state.count}</p><buttononClick={addFive}>Add 5</button><buttononClick={reset}>Reset</button></div>);}\n```\n\n\nWe are using TypeScript in a few key places:\n\n* interface State describes the shape of the reducer\u2019s state.\n* type CounterAction describes the different actions which can be dispatched to the reducer.\n* const initialState: State provides a type for the initial state, and also the type which is used by useReducer by default.\n* stateReducer(state: State, action: CounterAction): State sets the types for the reducer function\u2019s arguments and return value.\n\nA more explicit alternative to setting the type on initialState is to provide a type argument to useReducer :\n\n\n```javascript\nimport{stateReducer,State}from'./your-reducer-implementation';constinitialState={count:0};exportdefaultfunctionApp(){const[state,dispatch]=useReducer<State>(stateReducer,initialState);}\n```\n\n\n\n### useContext\n\n\nThe useContext Hook is a technique for passing data down the component tree without having to pass props through components. It is used by creating a provider component and often by creating a Hook to consume the value in a child component.\n\nThe type of the value provided by the context is inferred from the value passed to the createContext call:\n\n\n```javascript\nimport{createContext,useContext,useState}from'react';typeTheme =\"light\"|\"dark\"|\"system\";constThemeContext=createContext<Theme>(\"system\");constuseGetTheme=()=>useContext(ThemeContext);exportdefaultfunctionMyApp(){const[theme,setTheme]=useState<Theme>('light');return(<ThemeContextvalue={theme}><MyComponent/></ThemeContext>)}functionMyComponent(){consttheme=useGetTheme();return(<div><p>Current theme:{theme}</p></div>)}\n```\n\n\nThis technique works when you have a default value which makes sense - but there are occasionally cases when you do not, and in those cases null can feel reasonable as a default value. However, to allow the type-system to understand your code, you need to explicitly set ContextShape | null on the createContext .\n\nThis causes the issue that you need to eliminate the | null in the type for context consumers. Our recommendation is to have the Hook do a runtime check for it\u2019s existence and throw an error when not present:\n\n\n```javascript\nimport{createContext,useContext,useState,useMemo}from'react';// This is a simpler example, but you can imagine a more complex object heretypeComplexObject={kind:string};// The context is created with `| null` in the type, to accurately reflect the default value.constContext=createContext<ComplexObject|null>(null);// The `| null` will be removed via the check in the Hook.constuseGetComplexObject=()=>{constobject=useContext(Context);if(!object){thrownewError(\"useGetComplexObject must be used within a Provider\")}returnobject;}exportdefaultfunctionMyApp(){constobject=useMemo(()=>({kind:\"complex\"}),[]);return(<Contextvalue={object}><MyComponent/></Context>)}functionMyComponent(){constobject=useGetComplexObject();return(<div><p>Current object:{object.kind}</p></div>)}\n```\n\n\n\n### useMemo\n\n\n\n### Note\n\n\nReact Compiler automatically memoizes values and functions, reducing the need for manual useMemo calls. You can use the compiler to handle memoization automatically.\n\nThe useMemo Hooks will create/re-access a memorized value from a function call, re-running the function only when dependencies passed as the 2nd parameter are changed. The result of calling the Hook is inferred from the return value from the function in the first parameter. You can be more explicit by providing a type argument to the Hook.\n\n\n```javascript\n// The type of visibleTodos is inferred from the return value of filterTodosconstvisibleTodos=useMemo(()=>filterTodos(todos,tab),[todos,tab]);\n```\n\n\n\n### useCallback\n\n\n\n### Note\n\n\nReact Compiler automatically memoizes values and functions, reducing the need for manual useCallback calls. You can use the compiler to handle memoization automatically.\n\nThe useCallback provide a stable reference to a function as long as the dependencies passed into the second parameter are the same. Like useMemo , the function\u2019s type is inferred from the return value of the function in the first parameter, and you can be more explicit by providing a type argument to the Hook.\n\n\n```javascript\nconsthandleClick=useCallback(()=>{// ...},[todos]);\n```\n\n\nWhen working in TypeScript strict mode useCallback requires adding types for the parameters in your callback. This is because the type of the callback is inferred from the return value of the function, and without parameters the type cannot be fully understood.\n\nDepending on your code-style preferences, you could use the *EventHandler functions from the React types to provide the type for the event handler at the same time as defining the callback:\n\n\n```javascript\nimport{useState,useCallback}from'react';exportdefaultfunctionForm(){const[value,setValue]=useState(\"Change me\");consthandleChange=useCallback<React.ChangeEventHandler<HTMLInputElement>>((event)=>{setValue(event.currentTarget.value);},[setValue])return(<><inputvalue={value}onChange={handleChange}/><p>Value:{value}</p></>);}\n```\n", "source": "https://react.dev/learn/typescript", "category": "Using TypeScript"}
{"instruction": "Show me a code example of Example Hooks in React.", "input": "", "output": "The type definitions from @types/react include types for the built-in Hooks, so you can use them in your components without any additional setup. They are built to take into account the code you write in your component, so you will get inferred types a lot of the time and ideally do not need to handle the minutiae of providing the types.\n\nHowever, we can look at a few examples of how to provide types for Hooks.\n\n\n### useState\n\n\nThe useState Hook will re-use the value passed in as the initial state to determine what the type of the value should be. For example:\n\n\n```javascript\n// Infer the type as \"boolean\"const[enabled,setEnabled]=useState(false);\n```\n\n\nThis will assign the type of boolean to enabled , and setEnabled will be a function accepting either a boolean argument, or a function that returns a boolean . If you want to explicitly provide a type for the state, you can do so by providing a type argument to the useState call:\n\n\n```javascript\n// Explicitly set the type to \"boolean\"const[enabled,setEnabled]=useState<boolean>(false);\n```\n\n\nThis isn\u2019t very useful in this case, but a common case where you may want to provide a type is when you have a union type. For example, status here can be one of a few different strings:\n\n\n```javascript\ntypeStatus=\"idle\"|\"loading\"|\"success\"|\"error\";const[status,setStatus]=useState<Status>(\"idle\");\n```\n\n\nOr, as recommended in Principles for structuring state , you can group related state as an object and describe the different possibilities via object types:\n\n\n```javascript\ntypeRequestState=|{status:'idle'}|{status:'loading'}|{status:'success',data:any}|{status:'error',error:Error};const[requestState,setRequestState]=useState<RequestState>({status:'idle'});\n```\n\n\n\n### useReducer\n\n\nThe useReducer Hook is a more complex Hook that takes a reducer function and an initial state. The types for the reducer function are inferred from the initial state. You can optionally provide a type argument to the useReducer call to provide a type for the state, but it is often better to set the type on the initial state instead:\n\n\n```javascript\nimport{useReducer}from'react';interfaceState{count:number};typeCounterAction =\n  |{type:\"reset\"}|{type:\"setCount\";value:State[\"count\"]}constinitialState:State ={count:0};functionstateReducer(state:State,action:CounterAction):State{switch(action.type){case\"reset\":returninitialState;case\"setCount\":return{...state,count:action.value};default:thrownewError(\"Unknown action\");}}exportdefaultfunctionApp(){const[state,dispatch]=useReducer(stateReducer,initialState);constaddFive=()=>dispatch({type:\"setCount\",value:state.count+5});constreset=()=>dispatch({type:\"reset\"});return(<div><h1>Welcome to my counter</h1><p>Count:{state.count}</p><buttononClick={addFive}>Add 5</button><buttononClick={reset}>Reset</button></div>);}\n```\n\n\nWe are using TypeScript in a few key places:\n\n* interface State describes the shape of the reducer\u2019s state.\n* type CounterAction describes the different actions which can be dispatched to the reducer.\n* const initialState: State provides a type for the initial state, and also the type which is used by useReducer by default.\n* stateReducer(state: State, action: CounterAction): State sets the types for the reducer function\u2019s arguments and return value.\n\nA more explicit alternative to setting the type on initialState is to provide a type argument to useReducer :\n\n\n```javascript\nimport{stateReducer,State}from'./your-reducer-implementation';constinitialState={count:0};exportdefaultfunctionApp(){const[state,dispatch]=useReducer<State>(stateReducer,initialState);}\n```\n\n\n\n### useContext\n\n\nThe useContext Hook is a technique for passing data down the component tree without having to pass props through components. It is used by creating a provider component and often by creating a Hook to consume the value in a child component.\n\nThe type of the value provided by the context is inferred from the value passed to the createContext call:\n\n\n```javascript\nimport{createContext,useContext,useState}from'react';typeTheme =\"light\"|\"dark\"|\"system\";constThemeContext=createContext<Theme>(\"system\");constuseGetTheme=()=>useContext(ThemeContext);exportdefaultfunctionMyApp(){const[theme,setTheme]=useState<Theme>('light');return(<ThemeContextvalue={theme}><MyComponent/></ThemeContext>)}functionMyComponent(){consttheme=useGetTheme();return(<div><p>Current theme:{theme}</p></div>)}\n```\n\n\nThis technique works when you have a default value which makes sense - but there are occasionally cases when you do not, and in those cases null can feel reasonable as a default value. However, to allow the type-system to understand your code, you need to explicitly set ContextShape | null on the createContext .\n\nThis causes the issue that you need to eliminate the | null in the type for context consumers. Our recommendation is to have the Hook do a runtime check for it\u2019s existence and throw an error when not present:\n\n\n```javascript\nimport{createContext,useContext,useState,useMemo}from'react';// This is a simpler example, but you can imagine a more complex object heretypeComplexObject={kind:string};// The context is created with `| null` in the type, to accurately reflect the default value.constContext=createContext<ComplexObject|null>(null);// The `| null` will be removed via the check in the Hook.constuseGetComplexObject=()=>{constobject=useContext(Context);if(!object){thrownewError(\"useGetComplexObject must be used within a Provider\")}returnobject;}exportdefaultfunctionMyApp(){constobject=useMemo(()=>({kind:\"complex\"}),[]);return(<Contextvalue={object}><MyComponent/></Context>)}functionMyComponent(){constobject=useGetComplexObject();return(<div><p>Current object:{object.kind}</p></div>)}\n```\n\n\n\n### useMemo\n\n\n\n### Note\n\n\nReact Compiler automatically memoizes values and functions, reducing the need for manual useMemo calls. You can use the compiler to handle memoization automatically.\n\nThe useMemo Hooks will create/re-access a memorized value from a function call, re-running the function only when dependencies passed as the 2nd parameter are changed. The result of calling the Hook is inferred from the return value from the function in the first parameter. You can be more explicit by providing a type argument to the Hook.\n\n\n```javascript\n// The type of visibleTodos is inferred from the return value of filterTodosconstvisibleTodos=useMemo(()=>filterTodos(todos,tab),[todos,tab]);\n```\n\n\n\n### useCallback\n\n\n\n### Note\n\n\nReact Compiler automatically memoizes values and functions, reducing the need for manual useCallback calls. You can use the compiler to handle memoization automatically.\n\nThe useCallback provide a stable reference to a function as long as the dependencies passed into the second parameter are the same. Like useMemo , the function\u2019s type is inferred from the return value of the function in the first parameter, and you can be more explicit by providing a type argument to the Hook.\n\n\n```javascript\nconsthandleClick=useCallback(()=>{// ...},[todos]);\n```\n\n\nWhen working in TypeScript strict mode useCallback requires adding types for the parameters in your callback. This is because the type of the callback is inferred from the return value of the function, and without parameters the type cannot be fully understood.\n\nDepending on your code-style preferences, you could use the *EventHandler functions from the React types to provide the type for the event handler at the same time as defining the callback:\n\n\n```javascript\nimport{useState,useCallback}from'react';exportdefaultfunctionForm(){const[value,setValue]=useState(\"Change me\");consthandleChange=useCallback<React.ChangeEventHandler<HTMLInputElement>>((event)=>{setValue(event.currentTarget.value);},[setValue])return(<><inputvalue={value}onChange={handleChange}/><p>Value:{value}</p></>);}\n```\n", "source": "https://react.dev/learn/typescript", "category": "Using TypeScript"}
{"instruction": "Can you describe Useful Types in the context of React?", "input": "", "output": "There is quite an expansive set of types which come from the @types/react package, it is worth a read when you feel comfortable with how React and TypeScript interact. You can find them in React\u2019s folder in DefinitelyTyped . We will cover a few of the more common types here.\n\n\n### DOM Events\n\n\nWhen working with DOM events in React, the type of the event can often be inferred from the event handler. However, when you want to extract a function to be passed to an event handler, you will need to explicitly set the type of the event.\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[value,setValue]=useState(\"Change me\");functionhandleChange(event:React.ChangeEvent<HTMLInputElement>){setValue(event.currentTarget.value);}return(<><inputvalue={value}onChange={handleChange}/><p>Value:{value}</p></>);}\n```\n\n\nThere are many types of events provided in the React types - the full list can be found here which is based on the most popular events from the DOM .\n\nWhen determining the type you are looking for you can first look at the hover information for the event handler you are using, which will show the type of the event.\n\nIf you need to use an event that is not included in this list, you can use the React.SyntheticEvent type, which is the base type for all events.\n\n\n### Children\n\n\nThere are two common paths to describing the children of a component. The first is to use the React.ReactNode type, which is a union of all the possible types that can be passed as children in JSX:\n\n\n```javascript\ninterfaceModalRendererProps{title:string;children:React.ReactNode;}\n```\n\n\nThis is a very broad definition of children. The second is to use the React.ReactElement type, which is only JSX elements and not JavaScript primitives like strings or numbers:\n\n\n```javascript\ninterfaceModalRendererProps{title:string;children:React.ReactElement;}\n```\n\n\nNote, that you cannot use TypeScript to describe that the children are a certain type of JSX elements, so you cannot use the type-system to describe a component which only accepts <li> children.\n\nYou can see an example of both React.ReactNode and React.ReactElement with the type-checker in this TypeScript playground .\n\n\n### Style Props\n\n\nWhen using inline styles in React, you can use React.CSSProperties to describe the object passed to the style prop. This type is a union of all the possible CSS properties, and is a good way to ensure you are passing valid CSS properties to the style prop, and to get auto-complete in your editor.\n\n\n```javascript\ninterfaceMyComponentProps{style:React.CSSProperties;}\n```\n", "source": "https://react.dev/learn/typescript", "category": "Using TypeScript"}
{"instruction": "Show me a code example of Useful Types in React.", "input": "", "output": "There is quite an expansive set of types which come from the @types/react package, it is worth a read when you feel comfortable with how React and TypeScript interact. You can find them in React\u2019s folder in DefinitelyTyped . We will cover a few of the more common types here.\n\n\n### DOM Events\n\n\nWhen working with DOM events in React, the type of the event can often be inferred from the event handler. However, when you want to extract a function to be passed to an event handler, you will need to explicitly set the type of the event.\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[value,setValue]=useState(\"Change me\");functionhandleChange(event:React.ChangeEvent<HTMLInputElement>){setValue(event.currentTarget.value);}return(<><inputvalue={value}onChange={handleChange}/><p>Value:{value}</p></>);}\n```\n\n\nThere are many types of events provided in the React types - the full list can be found here which is based on the most popular events from the DOM .\n\nWhen determining the type you are looking for you can first look at the hover information for the event handler you are using, which will show the type of the event.\n\nIf you need to use an event that is not included in this list, you can use the React.SyntheticEvent type, which is the base type for all events.\n\n\n### Children\n\n\nThere are two common paths to describing the children of a component. The first is to use the React.ReactNode type, which is a union of all the possible types that can be passed as children in JSX:\n\n\n```javascript\ninterfaceModalRendererProps{title:string;children:React.ReactNode;}\n```\n\n\nThis is a very broad definition of children. The second is to use the React.ReactElement type, which is only JSX elements and not JavaScript primitives like strings or numbers:\n\n\n```javascript\ninterfaceModalRendererProps{title:string;children:React.ReactElement;}\n```\n\n\nNote, that you cannot use TypeScript to describe that the children are a certain type of JSX elements, so you cannot use the type-system to describe a component which only accepts <li> children.\n\nYou can see an example of both React.ReactNode and React.ReactElement with the type-checker in this TypeScript playground .\n\n\n### Style Props\n\n\nWhen using inline styles in React, you can use React.CSSProperties to describe the object passed to the style prop. This type is a union of all the possible CSS properties, and is a good way to ensure you are passing valid CSS properties to the style prop, and to get auto-complete in your editor.\n\n\n```javascript\ninterfaceMyComponentProps{style:React.CSSProperties;}\n```\n", "source": "https://react.dev/learn/typescript", "category": "Using TypeScript"}
{"instruction": "What is Further learning in React and how does it work?", "input": "", "output": "This guide has covered the basics of using TypeScript with React, but there is a lot more to learn.\nIndividual API pages on the docs may contain more in-depth documentation on how to use them with TypeScript.\n\nWe recommend the following resources:\n\n* The TypeScript handbook is the official documentation for TypeScript, and covers most key language features.\n* The TypeScript release notes cover new features in depth.\n* React TypeScript Cheatsheet is a community-maintained cheatsheet for using TypeScript with React, covering a lot of useful edge cases and providing more breadth than this document.\n* TypeScript Community Discord is a great place to ask questions and get help with TypeScript and React issues.\n\nThe TypeScript handbook is the official documentation for TypeScript, and covers most key language features.\n\nThe TypeScript release notes cover new features in depth.\n\nReact TypeScript Cheatsheet is a community-maintained cheatsheet for using TypeScript with React, covering a lot of useful edge cases and providing more breadth than this document.\n\nTypeScript Community Discord is a great place to ask questions and get help with TypeScript and React issues.", "source": "https://react.dev/learn/typescript", "category": "Using TypeScript"}
{"instruction": "Tell me about Your UI as a tree.", "input": "", "output": "Trees are a relationship model between items and UI is often represented using tree structures. For example, browsers use tree structures to model HTML ( DOM ) and CSS ( CSSOM ). Mobile platforms also use trees to represent their view hierarchy.\n\nReact creates a UI tree from your components. In this example, the UI tree is then used to render to the DOM.\n\nLike browsers and mobile platforms, React also uses tree structures to manage and model the relationship between components in a React app. These trees are useful tools to understand how data flows through a React app and how to optimize rendering and app size.", "source": "https://react.dev/learn/understanding-your-ui-as-a-tree", "category": "Understanding Your UI as a Tree"}
{"instruction": "What is The Render Tree in React and how does it work?", "input": "", "output": "A major feature of components is the ability to compose components of other components. As we nest components , we have the concept of parent and child components, where each parent component may itself be a child of another component.\n\nWhen we render a React app, we can model this relationship in a tree, known as the render tree.\n\nHere is a React app that renders inspirational quotes.\n\n\n```javascript\nimportFancyTextfrom'./FancyText';importInspirationGeneratorfrom'./InspirationGenerator';importCopyrightfrom'./Copyright';exportdefaultfunctionApp(){return(<><FancyTexttitletext=\"Get Inspired App\"/><InspirationGenerator><Copyrightyear={2004}/></InspirationGenerator></>);}\n```\n\n\nReact creates a render tree , a UI tree, composed of the rendered components.\n\nFrom the example app, we can construct the above render tree.\n\nThe tree is composed of nodes, each of which represents a component. App , FancyText , Copyright , to name a few, are all nodes in our tree.\n\nThe root node in a React render tree is the root component of the app. In this case, the root component is App and it is the first component React renders. Each arrow in the tree points from a parent component to a child component.\n\nYou\u2019ll notice in the above render tree, there is no mention of the HTML tags that each component renders. This is because the render tree is only composed of React components .\n\nReact, as a UI framework, is platform agnostic. On react.dev, we showcase examples that render to the web, which uses HTML markup as its UI primitives. But a React app could just as likely render to a mobile or desktop platform, which may use different UI primitives like UIView or FrameworkElement .\n\nThese platform UI primitives are not a part of React. React render trees can provide insight to our React app regardless of what platform your app renders to.\n\nA render tree represents a single render pass of a React application. With conditional rendering , a parent component may render different children depending on the data passed.\n\nWe can update the app to conditionally render either an inspirational quote or color.\n\n\n```javascript\nimportFancyTextfrom'./FancyText';importInspirationGeneratorfrom'./InspirationGenerator';importCopyrightfrom'./Copyright';exportdefaultfunctionApp(){return(<><FancyTexttitletext=\"Get Inspired App\"/><InspirationGenerator><Copyrightyear={2004}/></InspirationGenerator></>);}\n```\n\n\nWith conditional rendering, across different renders, the render tree may render different components.\n\nIn this example, depending on what inspiration.type is, we may render <FancyText> or <Color> . The render tree may be different for each render pass.\n\nAlthough render trees may differ across render passes, these trees are generally helpful for identifying what the top-level and leaf components are in a React app. Top-level components are the components nearest to the root component and affect the rendering performance of all the components beneath them and often contain the most complexity. Leaf components are near the bottom of the tree and have no child components and are often frequently re-rendered.\n\nIdentifying these categories of components are useful for understanding data flow and performance of your app.", "source": "https://react.dev/learn/understanding-your-ui-as-a-tree", "category": "Understanding Your UI as a Tree"}
{"instruction": "Show me a code example of The Render Tree in React.", "input": "", "output": "A major feature of components is the ability to compose components of other components. As we nest components , we have the concept of parent and child components, where each parent component may itself be a child of another component.\n\nWhen we render a React app, we can model this relationship in a tree, known as the render tree.\n\nHere is a React app that renders inspirational quotes.\n\n\n```javascript\nimportFancyTextfrom'./FancyText';importInspirationGeneratorfrom'./InspirationGenerator';importCopyrightfrom'./Copyright';exportdefaultfunctionApp(){return(<><FancyTexttitletext=\"Get Inspired App\"/><InspirationGenerator><Copyrightyear={2004}/></InspirationGenerator></>);}\n```\n\n\nReact creates a render tree , a UI tree, composed of the rendered components.\n\nFrom the example app, we can construct the above render tree.\n\nThe tree is composed of nodes, each of which represents a component. App , FancyText , Copyright , to name a few, are all nodes in our tree.\n\nThe root node in a React render tree is the root component of the app. In this case, the root component is App and it is the first component React renders. Each arrow in the tree points from a parent component to a child component.\n\nYou\u2019ll notice in the above render tree, there is no mention of the HTML tags that each component renders. This is because the render tree is only composed of React components .\n\nReact, as a UI framework, is platform agnostic. On react.dev, we showcase examples that render to the web, which uses HTML markup as its UI primitives. But a React app could just as likely render to a mobile or desktop platform, which may use different UI primitives like UIView or FrameworkElement .\n\nThese platform UI primitives are not a part of React. React render trees can provide insight to our React app regardless of what platform your app renders to.\n\nA render tree represents a single render pass of a React application. With conditional rendering , a parent component may render different children depending on the data passed.\n\nWe can update the app to conditionally render either an inspirational quote or color.\n\n\n```javascript\nimportFancyTextfrom'./FancyText';importInspirationGeneratorfrom'./InspirationGenerator';importCopyrightfrom'./Copyright';exportdefaultfunctionApp(){return(<><FancyTexttitletext=\"Get Inspired App\"/><InspirationGenerator><Copyrightyear={2004}/></InspirationGenerator></>);}\n```\n\n\nWith conditional rendering, across different renders, the render tree may render different components.\n\nIn this example, depending on what inspiration.type is, we may render <FancyText> or <Color> . The render tree may be different for each render pass.\n\nAlthough render trees may differ across render passes, these trees are generally helpful for identifying what the top-level and leaf components are in a React app. Top-level components are the components nearest to the root component and affect the rendering performance of all the components beneath them and often contain the most complexity. Leaf components are near the bottom of the tree and have no child components and are often frequently re-rendered.\n\nIdentifying these categories of components are useful for understanding data flow and performance of your app.", "source": "https://react.dev/learn/understanding-your-ui-as-a-tree", "category": "Understanding Your UI as a Tree"}
{"instruction": "Tell me about The Module Dependency Tree.", "input": "", "output": "Another relationship in a React app that can be modeled with a tree are an app\u2019s module dependencies. As we break up our components and logic into separate files, we create JS modules where we may export components, functions, or constants.\n\nEach node in a module dependency tree is a module and each branch represents an import statement in that module.\n\nIf we take the previous Inspirations app, we can build a module dependency tree, or dependency tree for short.\n\nThe module dependency tree for the Inspirations app.\n\nThe root node of the tree is the root module, also known as the entrypoint file. It often is the module that contains the root component.\n\nComparing to the render tree of the same app, there are similar structures but some notable differences:\n\n* The nodes that make-up the tree represent modules, not components.\n* Non-component modules, like inspirations.js , are also represented in this tree. The render tree only encapsulates components.\n* Copyright.js appears under App.js but in the render tree, Copyright , the component, appears as a child of InspirationGenerator . This is because InspirationGenerator accepts JSX as children props , so it renders Copyright as a child component but does not import the module.\n\nDependency trees are useful to determine what modules are necessary to run your React app. When building a React app for production, there is typically a build step that will bundle all the necessary JavaScript to ship to the client. The tool responsible for this is called a bundler , and bundlers will use the dependency tree to determine what modules should be included.\n\nAs your app grows, often the bundle size does too. Large bundle sizes are expensive for a client to download and run. Large bundle sizes can delay the time for your UI to get drawn. Getting a sense of your app\u2019s dependency tree may help with debugging these issues.", "source": "https://react.dev/learn/understanding-your-ui-as-a-tree", "category": "Understanding Your UI as a Tree"}
{"instruction": "What is the process for Updating arrays without mutation in a React component?", "input": "", "output": "In JavaScript, arrays are just another kind of object. Like with objects , you should treat arrays in React state as read-only. This means that you shouldn\u2019t reassign items inside an array like arr[0] = 'bird' , and you also shouldn\u2019t use methods that mutate the array, such as push() and pop() .\n\nInstead, every time you want to update an array, you\u2019ll want to pass a new array to your state setting function. To do that, you can create a new array from the original array in your state by calling its non-mutating methods like filter() and map() . Then you can set your state to the resulting new array.\n\nHere is a reference table of common array operations. When dealing with arrays inside React state, you will need to avoid the methods in the left column, and instead prefer the methods in the right column:\n\nAlternatively, you can use Immer which lets you use methods from both columns.\n\n\n### Pitfall\n\n\nUnfortunately, slice and splice are named similarly but are very different:\n\n* slice lets you copy an array or a part of it.\n* splice mutates the array (to insert or delete items).\n\nIn React, you will be using slice (no p !) a lot more often because you don\u2019t want to mutate objects or arrays in state. Updating Objects explains what mutation is and why it\u2019s not recommended for state.\n\n\n### Adding to an array\n\n\npush() will mutate an array, which you don\u2019t want:\n\n\n```javascript\nimport{useState}from'react';letnextId=0;exportdefaultfunctionList(){const[name,setName]=useState('');const[artists,setArtists]=useState([]);return(<><h1>Inspiring sculptors:</h1><inputvalue={name}onChange={e=>setName(e.target.value)}/><buttononClick={()=>{artists.push({id:nextId++,name:name,});}}>Add</button><ul>{artists.map(artist=>(<likey={artist.id}>{artist.name}</li>))}</ul></>);}\n```\n\n\nInstead, create a new array which contains the existing items and a new item at the end. There are multiple ways to do this, but the easiest one is to use the ... array spread syntax:\n\n\n```javascript\nsetArtists(// Replace the state[// with a new array...artists,// that contains all the old items{id:nextId++,name:name}// and one new item at the end]);\n```\n\n\nNow it works correctly:\n\n\n```javascript\nimport{useState}from'react';letnextId=0;exportdefaultfunctionList(){const[name,setName]=useState('');const[artists,setArtists]=useState([]);return(<><h1>Inspiring sculptors:</h1><inputvalue={name}onChange={e=>setName(e.target.value)}/><buttononClick={()=>{setArtists([...artists,{id:nextId++,name:name}]);}}>Add</button><ul>{artists.map(artist=>(<likey={artist.id}>{artist.name}</li>))}</ul></>);}\n```\n\n\nThe array spread syntax also lets you prepend an item by placing it before the original ...artists :\n\n\n```javascript\nsetArtists([{id:nextId++,name:name},...artists// Put old items at the end]);\n```\n\n\nIn this way, spread can do the job of both push() by adding to the end of an array and unshift() by adding to the beginning of an array. Try it in the sandbox above!\n\n\n### Removing from an array\n\n\nThe easiest way to remove an item from an array is to filter it out . In other words, you will produce a new array that will not contain that item. To do this, use the filter method, for example:\n\n\n```javascript\nimport{useState}from'react';letinitialArtists=[{id:0,name:'Marta Colvin Andrade'},{id:1,name:'Lamidi Olonade Fakeye'},{id:2,name:'Louise Nevelson'},];exportdefaultfunctionList(){const[artists,setArtists]=useState(initialArtists);return(<><h1>Inspiring sculptors:</h1><ul>{artists.map(artist=>(<likey={artist.id}>{artist.name}{' '}<buttononClick={()=>{setArtists(artists.filter(a=>a.id!==artist.id));}}>Delete</button></li>))}</ul></>);}\n```\n\n\nClick the \u201cDelete\u201d button a few times, and look at its click handler.\n\n\n```javascript\nsetArtists(artists.filter(a=>a.id!==artist.id));\n```\n\n\nHere, artists.filter(a => a.id !== artist.id) means \u201ccreate an array that consists of those artists whose IDs are different from artist.id \u201d. In other words, each artist\u2019s \u201cDelete\u201d button will filter that artist out of the array, and then request a re-render with the resulting array. Note that filter does not modify the original array.\n\n\n### Transforming an array\n\n\nIf you want to change some or all items of the array, you can use map() to create a new array. The function you will pass to map can decide what to do with each item, based on its data or its index (or both).\n\nIn this example, an array holds coordinates of two circles and a square. When you press the button, it moves only the circles down by 50 pixels. It does this by producing a new array of data using map() :\n\n\n```javascript\nimport{useState}from'react';letinitialShapes=[{id:0,type:'circle',x:50,y:100},{id:1,type:'square',x:150,y:100},{id:2,type:'circle',x:250,y:100},];exportdefaultfunctionShapeEditor(){const[shapes,setShapes]=useState(initialShapes);functionhandleClick(){constnextShapes=shapes.map(shape=>{if(shape.type==='square'){// No changereturnshape;}else{// Return a new circle 50px belowreturn{...shape,y:shape.y+50,};}});// Re-render with the new arraysetShapes(nextShapes);}return(<><buttononClick={handleClick}>Move circles down!</button>{shapes.map(shape=>(<divkey={shape.id}style={{background:'purple',position:'absolute',left:shape.x,top:shape.y,borderRadius:shape.type==='circle'?'50%':'',width:20,height:20,}}/>))}</>);}\n```\n\n\n\n### Replacing items in an array\n\n\nIt is particularly common to want to replace one or more items in an array. Assignments like arr[0] = 'bird' are mutating the original array, so instead you\u2019ll want to use map for this as well.\n\nTo replace an item, create a new array with map . Inside your map call, you will receive the item index as the second argument. Use it to decide whether to return the original item (the first argument) or something else:\n\n\n```javascript\nimport{useState}from'react';letinitialCounters=[0,0,0];exportdefaultfunctionCounterList(){const[counters,setCounters]=useState(initialCounters);functionhandleIncrementClick(index){constnextCounters=counters.map((c,i)=>{if(i===index){// Increment the clicked counterreturnc+1;}else{// The rest haven't changedreturnc;}});setCounters(nextCounters);}return(<ul>{counters.map((counter,i)=>(<likey={i}>{counter}<buttononClick={()=>{handleIncrementClick(i);}}>+1</button></li>))}</ul>);}\n```\n\n\n\n### Inserting into an array\n\n\nSometimes, you may want to insert an item at a particular position that\u2019s neither at the beginning nor at the end. To do this, you can use the ... array spread syntax together with the slice() method. The slice() method lets you cut a \u201cslice\u201d of the array. To insert an item, you will create an array that spreads the slice before the insertion point, then the new item, and then the rest of the original array.\n\nIn this example, the Insert button always inserts at the index 1 :\n\n\n```javascript\nimport{useState}from'react';letnextId=3;constinitialArtists=[{id:0,name:'Marta Colvin Andrade'},{id:1,name:'Lamidi Olonade Fakeye'},{id:2,name:'Louise Nevelson'},];exportdefaultfunctionList(){const[name,setName]=useState('');const[artists,setArtists]=useState(initialArtists);functionhandleClick(){constinsertAt=1;// Could be any indexconstnextArtists=[// Items before the insertion point:...artists.slice(0,insertAt),// New item:{id:nextId++,name:name},// Items after the insertion point:...artists.slice(insertAt)];setArtists(nextArtists);setName('');}return(<><h1>Inspiring sculptors:</h1><inputvalue={name}onChange={e=>setName(e.target.value)}/><buttononClick={handleClick}>Insert</button><ul>{artists.map(artist=>(<likey={artist.id}>{artist.name}</li>))}</ul></>);}\n```\n\n\n\n### Making other changes to an array\n\n\nThere are some things you can\u2019t do with the spread syntax and non-mutating methods like map() and filter() alone. For example, you may want to reverse or sort an array. The JavaScript reverse() and sort() methods are mutating the original array, so you can\u2019t use them directly.\n\nHowever, you can copy the array first, and then make changes to it.\n\nFor example:\n\n\n```javascript\nimport{useState}from'react';constinitialList=[{id:0,title:'Big Bellies'},{id:1,title:'Lunar Landscape'},{id:2,title:'Terracotta Army'},];exportdefaultfunctionList(){const[list,setList]=useState(initialList);functionhandleClick(){constnextList=[...list];nextList.reverse();setList(nextList);}return(<><buttononClick={handleClick}>Reverse</button><ul>{list.map(artwork=>(<likey={artwork.id}>{artwork.title}</li>))}</ul></>);}\n```\n\n\nHere, you use the [...list] spread syntax to create a copy of the original array first. Now that you have a copy, you can use mutating methods like nextList.reverse() or nextList.sort() , or even assign individual items with nextList[0] = \"something\" .\n\nHowever, even if you copy an array, you can\u2019t mutate existing items inside of it directly. This is because copying is shallow\u2014the new array will contain the same items as the original one. So if you modify an object inside the copied array, you are mutating the existing state. For example, code like this is a problem.\n\n\n```javascript\nconstnextList=[...list];nextList[0].seen=true;// Problem: mutates list[0]setList(nextList);\n```\n\n\nAlthough nextList and list are two different arrays, nextList[0] and list[0] point to the same object. So by changing nextList[0].seen , you are also changing list[0].seen . This is a state mutation, which you should avoid! You can solve this issue in a similar way to updating nested JavaScript objects \u2014by copying individual items you want to change instead of mutating them. Here\u2019s how.", "source": "https://react.dev/learn/updating-arrays-in-state", "category": "Updating Arrays in State"}
{"instruction": "Show me a code example of Updating arrays without mutation in React.", "input": "", "output": "In JavaScript, arrays are just another kind of object. Like with objects , you should treat arrays in React state as read-only. This means that you shouldn\u2019t reassign items inside an array like arr[0] = 'bird' , and you also shouldn\u2019t use methods that mutate the array, such as push() and pop() .\n\nInstead, every time you want to update an array, you\u2019ll want to pass a new array to your state setting function. To do that, you can create a new array from the original array in your state by calling its non-mutating methods like filter() and map() . Then you can set your state to the resulting new array.\n\nHere is a reference table of common array operations. When dealing with arrays inside React state, you will need to avoid the methods in the left column, and instead prefer the methods in the right column:\n\nAlternatively, you can use Immer which lets you use methods from both columns.\n\n\n### Pitfall\n\n\nUnfortunately, slice and splice are named similarly but are very different:\n\n* slice lets you copy an array or a part of it.\n* splice mutates the array (to insert or delete items).\n\nIn React, you will be using slice (no p !) a lot more often because you don\u2019t want to mutate objects or arrays in state. Updating Objects explains what mutation is and why it\u2019s not recommended for state.\n\n\n### Adding to an array\n\n\npush() will mutate an array, which you don\u2019t want:\n\n\n```javascript\nimport{useState}from'react';letnextId=0;exportdefaultfunctionList(){const[name,setName]=useState('');const[artists,setArtists]=useState([]);return(<><h1>Inspiring sculptors:</h1><inputvalue={name}onChange={e=>setName(e.target.value)}/><buttononClick={()=>{artists.push({id:nextId++,name:name,});}}>Add</button><ul>{artists.map(artist=>(<likey={artist.id}>{artist.name}</li>))}</ul></>);}\n```\n\n\nInstead, create a new array which contains the existing items and a new item at the end. There are multiple ways to do this, but the easiest one is to use the ... array spread syntax:\n\n\n```javascript\nsetArtists(// Replace the state[// with a new array...artists,// that contains all the old items{id:nextId++,name:name}// and one new item at the end]);\n```\n\n\nNow it works correctly:\n\n\n```javascript\nimport{useState}from'react';letnextId=0;exportdefaultfunctionList(){const[name,setName]=useState('');const[artists,setArtists]=useState([]);return(<><h1>Inspiring sculptors:</h1><inputvalue={name}onChange={e=>setName(e.target.value)}/><buttononClick={()=>{setArtists([...artists,{id:nextId++,name:name}]);}}>Add</button><ul>{artists.map(artist=>(<likey={artist.id}>{artist.name}</li>))}</ul></>);}\n```\n\n\nThe array spread syntax also lets you prepend an item by placing it before the original ...artists :\n\n\n```javascript\nsetArtists([{id:nextId++,name:name},...artists// Put old items at the end]);\n```\n\n\nIn this way, spread can do the job of both push() by adding to the end of an array and unshift() by adding to the beginning of an array. Try it in the sandbox above!\n\n\n### Removing from an array\n\n\nThe easiest way to remove an item from an array is to filter it out . In other words, you will produce a new array that will not contain that item. To do this, use the filter method, for example:\n\n\n```javascript\nimport{useState}from'react';letinitialArtists=[{id:0,name:'Marta Colvin Andrade'},{id:1,name:'Lamidi Olonade Fakeye'},{id:2,name:'Louise Nevelson'},];exportdefaultfunctionList(){const[artists,setArtists]=useState(initialArtists);return(<><h1>Inspiring sculptors:</h1><ul>{artists.map(artist=>(<likey={artist.id}>{artist.name}{' '}<buttononClick={()=>{setArtists(artists.filter(a=>a.id!==artist.id));}}>Delete</button></li>))}</ul></>);}\n```\n\n\nClick the \u201cDelete\u201d button a few times, and look at its click handler.\n\n\n```javascript\nsetArtists(artists.filter(a=>a.id!==artist.id));\n```\n\n\nHere, artists.filter(a => a.id !== artist.id) means \u201ccreate an array that consists of those artists whose IDs are different from artist.id \u201d. In other words, each artist\u2019s \u201cDelete\u201d button will filter that artist out of the array, and then request a re-render with the resulting array. Note that filter does not modify the original array.\n\n\n### Transforming an array\n\n\nIf you want to change some or all items of the array, you can use map() to create a new array. The function you will pass to map can decide what to do with each item, based on its data or its index (or both).\n\nIn this example, an array holds coordinates of two circles and a square. When you press the button, it moves only the circles down by 50 pixels. It does this by producing a new array of data using map() :\n\n\n```javascript\nimport{useState}from'react';letinitialShapes=[{id:0,type:'circle',x:50,y:100},{id:1,type:'square',x:150,y:100},{id:2,type:'circle',x:250,y:100},];exportdefaultfunctionShapeEditor(){const[shapes,setShapes]=useState(initialShapes);functionhandleClick(){constnextShapes=shapes.map(shape=>{if(shape.type==='square'){// No changereturnshape;}else{// Return a new circle 50px belowreturn{...shape,y:shape.y+50,};}});// Re-render with the new arraysetShapes(nextShapes);}return(<><buttononClick={handleClick}>Move circles down!</button>{shapes.map(shape=>(<divkey={shape.id}style={{background:'purple',position:'absolute',left:shape.x,top:shape.y,borderRadius:shape.type==='circle'?'50%':'',width:20,height:20,}}/>))}</>);}\n```\n\n\n\n### Replacing items in an array\n\n\nIt is particularly common to want to replace one or more items in an array. Assignments like arr[0] = 'bird' are mutating the original array, so instead you\u2019ll want to use map for this as well.\n\nTo replace an item, create a new array with map . Inside your map call, you will receive the item index as the second argument. Use it to decide whether to return the original item (the first argument) or something else:\n\n\n```javascript\nimport{useState}from'react';letinitialCounters=[0,0,0];exportdefaultfunctionCounterList(){const[counters,setCounters]=useState(initialCounters);functionhandleIncrementClick(index){constnextCounters=counters.map((c,i)=>{if(i===index){// Increment the clicked counterreturnc+1;}else{// The rest haven't changedreturnc;}});setCounters(nextCounters);}return(<ul>{counters.map((counter,i)=>(<likey={i}>{counter}<buttononClick={()=>{handleIncrementClick(i);}}>+1</button></li>))}</ul>);}\n```\n\n\n\n### Inserting into an array\n\n\nSometimes, you may want to insert an item at a particular position that\u2019s neither at the beginning nor at the end. To do this, you can use the ... array spread syntax together with the slice() method. The slice() method lets you cut a \u201cslice\u201d of the array. To insert an item, you will create an array that spreads the slice before the insertion point, then the new item, and then the rest of the original array.\n\nIn this example, the Insert button always inserts at the index 1 :\n\n\n```javascript\nimport{useState}from'react';letnextId=3;constinitialArtists=[{id:0,name:'Marta Colvin Andrade'},{id:1,name:'Lamidi Olonade Fakeye'},{id:2,name:'Louise Nevelson'},];exportdefaultfunctionList(){const[name,setName]=useState('');const[artists,setArtists]=useState(initialArtists);functionhandleClick(){constinsertAt=1;// Could be any indexconstnextArtists=[// Items before the insertion point:...artists.slice(0,insertAt),// New item:{id:nextId++,name:name},// Items after the insertion point:...artists.slice(insertAt)];setArtists(nextArtists);setName('');}return(<><h1>Inspiring sculptors:</h1><inputvalue={name}onChange={e=>setName(e.target.value)}/><buttononClick={handleClick}>Insert</button><ul>{artists.map(artist=>(<likey={artist.id}>{artist.name}</li>))}</ul></>);}\n```\n\n\n\n### Making other changes to an array\n\n\nThere are some things you can\u2019t do with the spread syntax and non-mutating methods like map() and filter() alone. For example, you may want to reverse or sort an array. The JavaScript reverse() and sort() methods are mutating the original array, so you can\u2019t use them directly.\n\nHowever, you can copy the array first, and then make changes to it.\n\nFor example:\n\n\n```javascript\nimport{useState}from'react';constinitialList=[{id:0,title:'Big Bellies'},{id:1,title:'Lunar Landscape'},{id:2,title:'Terracotta Army'},];exportdefaultfunctionList(){const[list,setList]=useState(initialList);functionhandleClick(){constnextList=[...list];nextList.reverse();setList(nextList);}return(<><buttononClick={handleClick}>Reverse</button><ul>{list.map(artwork=>(<likey={artwork.id}>{artwork.title}</li>))}</ul></>);}\n```\n\n\nHere, you use the [...list] spread syntax to create a copy of the original array first. Now that you have a copy, you can use mutating methods like nextList.reverse() or nextList.sort() , or even assign individual items with nextList[0] = \"something\" .\n\nHowever, even if you copy an array, you can\u2019t mutate existing items inside of it directly. This is because copying is shallow\u2014the new array will contain the same items as the original one. So if you modify an object inside the copied array, you are mutating the existing state. For example, code like this is a problem.\n\n\n```javascript\nconstnextList=[...list];nextList[0].seen=true;// Problem: mutates list[0]setList(nextList);\n```\n\n\nAlthough nextList and list are two different arrays, nextList[0] and list[0] point to the same object. So by changing nextList[0].seen , you are also changing list[0].seen . This is a state mutation, which you should avoid! You can solve this issue in a similar way to updating nested JavaScript objects \u2014by copying individual items you want to change instead of mutating them. Here\u2019s how.", "source": "https://react.dev/learn/updating-arrays-in-state", "category": "Updating Arrays in State"}
{"instruction": "What is the process for Updating objects inside arrays in a React component?", "input": "", "output": "Objects are not really located \u201cinside\u201d arrays. They might appear to be \u201cinside\u201d in code, but each object in an array is a separate value, to which the array \u201cpoints\u201d. This is why you need to be careful when changing nested fields like list[0] . Another person\u2019s artwork list may point to the same element of the array!\n\nWhen updating nested state, you need to create copies from the point where you want to update, and all the way up to the top level. Let\u2019s see how this works.\n\nIn this example, two separate artwork lists have the same initial state. They are supposed to be isolated, but because of a mutation, their state is accidentally shared, and checking a box in one list affects the other list:\n\n\n```javascript\nimport{useState}from'react';letnextId=3;constinitialList=[{id:0,title:'Big Bellies',seen:false},{id:1,title:'Lunar Landscape',seen:false},{id:2,title:'Terracotta Army',seen:true},];exportdefaultfunctionBucketList(){const[myList,setMyList]=useState(initialList);const[yourList,setYourList]=useState(initialList);functionhandleToggleMyList(artworkId,nextSeen){constmyNextList=[...myList];constartwork=myNextList.find(a=>a.id===artworkId);artwork.seen=nextSeen;setMyList(myNextList);}functionhandleToggleYourList(artworkId,nextSeen){constyourNextList=[...yourList];constartwork=yourNextList.find(a=>a.id===artworkId);artwork.seen=nextSeen;setYourList(yourNextList);}return(<><h1>Art Bucket List</h1><h2>My list of art to see:</h2><ItemListartworks={myList}onToggle={handleToggleMyList}/><h2>Your list of art to see:</h2><ItemListartworks={yourList}onToggle={handleToggleYourList}/></>);}functionItemList({artworks,onToggle}){return(<ul>{artworks.map(artwork=>(<likey={artwork.id}><label><inputtype=\"checkbox\"checked={artwork.seen}onChange={e=>{onToggle(artwork.id,e.target.checked);}}/>{artwork.title}</label></li>))}</ul>);}\n```\n\n\nThe problem is in code like this:\n\n\n```javascript\nconstmyNextList=[...myList];constartwork=myNextList.find(a=>a.id===artworkId);artwork.seen=nextSeen;// Problem: mutates an existing itemsetMyList(myNextList);\n```\n\n\nAlthough the myNextList array itself is new, the items themselves are the same as in the original myList array. So changing artwork.seen changes the original artwork item. That artwork item is also in yourList , which causes the bug. Bugs like this can be difficult to think about, but thankfully they disappear if you avoid mutating state.\n\nYou can use map to substitute an old item with its updated version without mutation.\n\n\n```javascript\nsetMyList(myList.map(artwork=>{if(artwork.id===artworkId){// Create a *new* object with changesreturn{...artwork,seen:nextSeen};}else{// No changesreturnartwork;}}));\n```\n\n\nHere, ... is the object spread syntax used to create a copy of an object.\n\nWith this approach, none of the existing state items are being mutated, and the bug is fixed:\n\n\n```javascript\nimport{useState}from'react';letnextId=3;constinitialList=[{id:0,title:'Big Bellies',seen:false},{id:1,title:'Lunar Landscape',seen:false},{id:2,title:'Terracotta Army',seen:true},];exportdefaultfunctionBucketList(){const[myList,setMyList]=useState(initialList);const[yourList,setYourList]=useState(initialList);functionhandleToggleMyList(artworkId,nextSeen){setMyList(myList.map(artwork=>{if(artwork.id===artworkId){// Create a *new* object with changesreturn{...artwork,seen:nextSeen};}else{// No changesreturnartwork;}}));}functionhandleToggleYourList(artworkId,nextSeen){setYourList(yourList.map(artwork=>{if(artwork.id===artworkId){// Create a *new* object with changesreturn{...artwork,seen:nextSeen};}else{// No changesreturnartwork;}}));}return(<><h1>Art Bucket List</h1><h2>My list of art to see:</h2><ItemListartworks={myList}onToggle={handleToggleMyList}/><h2>Your list of art to see:</h2><ItemListartworks={yourList}onToggle={handleToggleYourList}/></>);}functionItemList({artworks,onToggle}){return(<ul>{artworks.map(artwork=>(<likey={artwork.id}><label><inputtype=\"checkbox\"checked={artwork.seen}onChange={e=>{onToggle(artwork.id,e.target.checked);}}/>{artwork.title}</label></li>))}</ul>);}\n```\n\n\nIn general, you should only mutate objects that you have just created. If you were inserting a new artwork, you could mutate it, but if you\u2019re dealing with something that\u2019s already in state, you need to make a copy.\n\n\n### Write concise update logic with Immer\n\n\nUpdating nested arrays without mutation can get a little bit repetitive. Just as with objects :\n\n* Generally, you shouldn\u2019t need to update state more than a couple of levels deep. If your state objects are very deep, you might want to restructure them differently so that they are flat.\n* If you don\u2019t want to change your state structure, you might prefer to use Immer , which lets you write using the convenient but mutating syntax and takes care of producing the copies for you.\n\nHere is the Art Bucket List example rewritten with Immer:\n\n\n```javascript\n{\"dependencies\":{\"immer\":\"1.7.3\",\"react\":\"latest\",\"react-dom\":\"latest\",\"react-scripts\":\"latest\",\"use-immer\":\"0.5.1\"},\"scripts\":{\"start\":\"react-scripts start\",\"build\":\"react-scripts build\",\"test\":\"react-scripts test --env=jsdom\",\"eject\":\"react-scripts eject\"},\"devDependencies\":{}}\n```\n\n\nNote how with Immer, mutation like artwork.seen = nextSeen is now okay:\n\n\n```javascript\nupdateMyTodos(draft=>{constartwork=draft.find(a=>a.id===artworkId);artwork.seen=nextSeen;});\n```\n\n\nThis is because you\u2019re not mutating the original state, but you\u2019re mutating a special draft object provided by Immer. Similarly, you can apply mutating methods like push() and pop() to the content of the draft .\n\nBehind the scenes, Immer always constructs the next state from scratch according to the changes that you\u2019ve done to the draft . This keeps your event handlers very concise without ever mutating state.", "source": "https://react.dev/learn/updating-arrays-in-state", "category": "Updating Arrays in State"}
{"instruction": "Show me a code example of Updating objects inside arrays in React.", "input": "", "output": "Objects are not really located \u201cinside\u201d arrays. They might appear to be \u201cinside\u201d in code, but each object in an array is a separate value, to which the array \u201cpoints\u201d. This is why you need to be careful when changing nested fields like list[0] . Another person\u2019s artwork list may point to the same element of the array!\n\nWhen updating nested state, you need to create copies from the point where you want to update, and all the way up to the top level. Let\u2019s see how this works.\n\nIn this example, two separate artwork lists have the same initial state. They are supposed to be isolated, but because of a mutation, their state is accidentally shared, and checking a box in one list affects the other list:\n\n\n```javascript\nimport{useState}from'react';letnextId=3;constinitialList=[{id:0,title:'Big Bellies',seen:false},{id:1,title:'Lunar Landscape',seen:false},{id:2,title:'Terracotta Army',seen:true},];exportdefaultfunctionBucketList(){const[myList,setMyList]=useState(initialList);const[yourList,setYourList]=useState(initialList);functionhandleToggleMyList(artworkId,nextSeen){constmyNextList=[...myList];constartwork=myNextList.find(a=>a.id===artworkId);artwork.seen=nextSeen;setMyList(myNextList);}functionhandleToggleYourList(artworkId,nextSeen){constyourNextList=[...yourList];constartwork=yourNextList.find(a=>a.id===artworkId);artwork.seen=nextSeen;setYourList(yourNextList);}return(<><h1>Art Bucket List</h1><h2>My list of art to see:</h2><ItemListartworks={myList}onToggle={handleToggleMyList}/><h2>Your list of art to see:</h2><ItemListartworks={yourList}onToggle={handleToggleYourList}/></>);}functionItemList({artworks,onToggle}){return(<ul>{artworks.map(artwork=>(<likey={artwork.id}><label><inputtype=\"checkbox\"checked={artwork.seen}onChange={e=>{onToggle(artwork.id,e.target.checked);}}/>{artwork.title}</label></li>))}</ul>);}\n```\n\n\nThe problem is in code like this:\n\n\n```javascript\nconstmyNextList=[...myList];constartwork=myNextList.find(a=>a.id===artworkId);artwork.seen=nextSeen;// Problem: mutates an existing itemsetMyList(myNextList);\n```\n\n\nAlthough the myNextList array itself is new, the items themselves are the same as in the original myList array. So changing artwork.seen changes the original artwork item. That artwork item is also in yourList , which causes the bug. Bugs like this can be difficult to think about, but thankfully they disappear if you avoid mutating state.\n\nYou can use map to substitute an old item with its updated version without mutation.\n\n\n```javascript\nsetMyList(myList.map(artwork=>{if(artwork.id===artworkId){// Create a *new* object with changesreturn{...artwork,seen:nextSeen};}else{// No changesreturnartwork;}}));\n```\n\n\nHere, ... is the object spread syntax used to create a copy of an object.\n\nWith this approach, none of the existing state items are being mutated, and the bug is fixed:\n\n\n```javascript\nimport{useState}from'react';letnextId=3;constinitialList=[{id:0,title:'Big Bellies',seen:false},{id:1,title:'Lunar Landscape',seen:false},{id:2,title:'Terracotta Army',seen:true},];exportdefaultfunctionBucketList(){const[myList,setMyList]=useState(initialList);const[yourList,setYourList]=useState(initialList);functionhandleToggleMyList(artworkId,nextSeen){setMyList(myList.map(artwork=>{if(artwork.id===artworkId){// Create a *new* object with changesreturn{...artwork,seen:nextSeen};}else{// No changesreturnartwork;}}));}functionhandleToggleYourList(artworkId,nextSeen){setYourList(yourList.map(artwork=>{if(artwork.id===artworkId){// Create a *new* object with changesreturn{...artwork,seen:nextSeen};}else{// No changesreturnartwork;}}));}return(<><h1>Art Bucket List</h1><h2>My list of art to see:</h2><ItemListartworks={myList}onToggle={handleToggleMyList}/><h2>Your list of art to see:</h2><ItemListartworks={yourList}onToggle={handleToggleYourList}/></>);}functionItemList({artworks,onToggle}){return(<ul>{artworks.map(artwork=>(<likey={artwork.id}><label><inputtype=\"checkbox\"checked={artwork.seen}onChange={e=>{onToggle(artwork.id,e.target.checked);}}/>{artwork.title}</label></li>))}</ul>);}\n```\n\n\nIn general, you should only mutate objects that you have just created. If you were inserting a new artwork, you could mutate it, but if you\u2019re dealing with something that\u2019s already in state, you need to make a copy.\n\n\n### Write concise update logic with Immer\n\n\nUpdating nested arrays without mutation can get a little bit repetitive. Just as with objects :\n\n* Generally, you shouldn\u2019t need to update state more than a couple of levels deep. If your state objects are very deep, you might want to restructure them differently so that they are flat.\n* If you don\u2019t want to change your state structure, you might prefer to use Immer , which lets you write using the convenient but mutating syntax and takes care of producing the copies for you.\n\nHere is the Art Bucket List example rewritten with Immer:\n\n\n```javascript\n{\"dependencies\":{\"immer\":\"1.7.3\",\"react\":\"latest\",\"react-dom\":\"latest\",\"react-scripts\":\"latest\",\"use-immer\":\"0.5.1\"},\"scripts\":{\"start\":\"react-scripts start\",\"build\":\"react-scripts build\",\"test\":\"react-scripts test --env=jsdom\",\"eject\":\"react-scripts eject\"},\"devDependencies\":{}}\n```\n\n\nNote how with Immer, mutation like artwork.seen = nextSeen is now okay:\n\n\n```javascript\nupdateMyTodos(draft=>{constartwork=draft.find(a=>a.id===artworkId);artwork.seen=nextSeen;});\n```\n\n\nThis is because you\u2019re not mutating the original state, but you\u2019re mutating a special draft object provided by Immer. Similarly, you can apply mutating methods like push() and pop() to the content of the draft .\n\nBehind the scenes, Immer always constructs the next state from scratch according to the changes that you\u2019ve done to the draft . This keeps your event handlers very concise without ever mutating state.", "source": "https://react.dev/learn/updating-arrays-in-state", "category": "Updating Arrays in State"}
{"instruction": "Can you describe What\u2019s a mutation? in the context of React?", "input": "", "output": "You can store any kind of JavaScript value in state.\n\n\n```javascript\nconst[x,setX]=useState(0);\n```\n\n\nSo far you\u2019ve been working with numbers, strings, and booleans. These kinds of JavaScript values are \u201cimmutable\u201d, meaning unchangeable or \u201cread-only\u201d. You can trigger a re-render to replace a value:\n\n\n```javascript\nsetX(5);\n```\n\n\nThe x state changed from 0 to 5 , but the number 0 itself did not change. It\u2019s not possible to make any changes to the built-in primitive values like numbers, strings, and booleans in JavaScript.\n\nNow consider an object in state:\n\n\n```javascript\nconst[position,setPosition]=useState({x:0,y:0});\n```\n\n\nTechnically, it is possible to change the contents of the object itself . This is called a mutation:\n\n\n```javascript\nposition.x=5;\n```\n\n\nHowever, although objects in React state are technically mutable, you should treat them as if they were immutable\u2014like numbers, booleans, and strings. Instead of mutating them, you should always replace them.", "source": "https://react.dev/learn/updating-objects-in-state", "category": "Updating Objects in State"}
{"instruction": "Show me a code example of What\u2019s a mutation? in React.", "input": "", "output": "You can store any kind of JavaScript value in state.\n\n\n```javascript\nconst[x,setX]=useState(0);\n```\n\n\nSo far you\u2019ve been working with numbers, strings, and booleans. These kinds of JavaScript values are \u201cimmutable\u201d, meaning unchangeable or \u201cread-only\u201d. You can trigger a re-render to replace a value:\n\n\n```javascript\nsetX(5);\n```\n\n\nThe x state changed from 0 to 5 , but the number 0 itself did not change. It\u2019s not possible to make any changes to the built-in primitive values like numbers, strings, and booleans in JavaScript.\n\nNow consider an object in state:\n\n\n```javascript\nconst[position,setPosition]=useState({x:0,y:0});\n```\n\n\nTechnically, it is possible to change the contents of the object itself . This is called a mutation:\n\n\n```javascript\nposition.x=5;\n```\n\n\nHowever, although objects in React state are technically mutable, you should treat them as if they were immutable\u2014like numbers, booleans, and strings. Instead of mutating them, you should always replace them.", "source": "https://react.dev/learn/updating-objects-in-state", "category": "Updating Objects in State"}
{"instruction": "Tell me about Treat state as read-only.", "input": "", "output": "In other words, you should treat any JavaScript object that you put into state as read-only.\n\nThis example holds an object in state to represent the current pointer position. The red dot is supposed to move when you touch or move the cursor over the preview area. But the dot stays in the initial position:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionMovingDot(){const[position,setPosition]=useState({x:0,y:0});return(<divonPointerMove={e=>{position.x=e.clientX;position.y=e.clientY;}}style={{position:'relative',width:'100vw',height:'100vh',}}><divstyle={{position:'absolute',backgroundColor:'red',borderRadius:'50%',transform:`translate(${position.x}px,${position.y}px)`,left:-10,top:-10,width:20,height:20,}}/></div>);}\n```\n\n\nThe problem is with this bit of code.\n\n\n```javascript\nonPointerMove={e=>{position.x=e.clientX;position.y=e.clientY;}}\n```\n\n\nThis code modifies the object assigned to position from the previous render. But without using the state setting function, React has no idea that object has changed. So React does not do anything in response. It\u2019s like trying to change the order after you\u2019ve already eaten the meal. While mutating state can work in some cases, we don\u2019t recommend it. You should treat the state value you have access to in a render as read-only.\n\nTo actually trigger a re-render in this case, create a new object and pass it to the state setting function:\n\n\n```javascript\nonPointerMove={e=>{setPosition({x:e.clientX,y:e.clientY});}}\n```\n\n\nWith setPosition , you\u2019re telling React:\n\n* Replace position with this new object\n* And render this component again\n\nNotice how the red dot now follows your pointer when you touch or hover over the preview area:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionMovingDot(){const[position,setPosition]=useState({x:0,y:0});return(<divonPointerMove={e=>{setPosition({x:e.clientX,y:e.clientY});}}style={{position:'relative',width:'100vw',height:'100vh',}}><divstyle={{position:'absolute',backgroundColor:'red',borderRadius:'50%',transform:`translate(${position.x}px,${position.y}px)`,left:-10,top:-10,width:20,height:20,}}/></div>);}\n```\n\n\nCode like this is a problem because it modifies an existing object in state:\n\n\n```javascript\nposition.x=e.clientX;position.y=e.clientY;\n```\n\n\nBut code like this is absolutely fine because you\u2019re mutating a fresh object you have just created :\n\n\n```javascript\nconstnextPosition={};nextPosition.x=e.clientX;nextPosition.y=e.clientY;setPosition(nextPosition);\n```\n\n\nIn fact, it is completely equivalent to writing this:\n\n\n```javascript\nsetPosition({x:e.clientX,y:e.clientY});\n```\n\n\nMutation is only a problem when you change existing objects that are already in state. Mutating an object you\u2019ve just created is okay because no other code references it yet. Changing it isn\u2019t going to accidentally impact something that depends on it. This is called a \u201clocal mutation\u201d. You can even do local mutation while rendering. Very convenient and completely okay!", "source": "https://react.dev/learn/updating-objects-in-state", "category": "Updating Objects in State"}
{"instruction": "Show me a code example of Treat state as read-only in React.", "input": "", "output": "In other words, you should treat any JavaScript object that you put into state as read-only.\n\nThis example holds an object in state to represent the current pointer position. The red dot is supposed to move when you touch or move the cursor over the preview area. But the dot stays in the initial position:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionMovingDot(){const[position,setPosition]=useState({x:0,y:0});return(<divonPointerMove={e=>{position.x=e.clientX;position.y=e.clientY;}}style={{position:'relative',width:'100vw',height:'100vh',}}><divstyle={{position:'absolute',backgroundColor:'red',borderRadius:'50%',transform:`translate(${position.x}px,${position.y}px)`,left:-10,top:-10,width:20,height:20,}}/></div>);}\n```\n\n\nThe problem is with this bit of code.\n\n\n```javascript\nonPointerMove={e=>{position.x=e.clientX;position.y=e.clientY;}}\n```\n\n\nThis code modifies the object assigned to position from the previous render. But without using the state setting function, React has no idea that object has changed. So React does not do anything in response. It\u2019s like trying to change the order after you\u2019ve already eaten the meal. While mutating state can work in some cases, we don\u2019t recommend it. You should treat the state value you have access to in a render as read-only.\n\nTo actually trigger a re-render in this case, create a new object and pass it to the state setting function:\n\n\n```javascript\nonPointerMove={e=>{setPosition({x:e.clientX,y:e.clientY});}}\n```\n\n\nWith setPosition , you\u2019re telling React:\n\n* Replace position with this new object\n* And render this component again\n\nNotice how the red dot now follows your pointer when you touch or hover over the preview area:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionMovingDot(){const[position,setPosition]=useState({x:0,y:0});return(<divonPointerMove={e=>{setPosition({x:e.clientX,y:e.clientY});}}style={{position:'relative',width:'100vw',height:'100vh',}}><divstyle={{position:'absolute',backgroundColor:'red',borderRadius:'50%',transform:`translate(${position.x}px,${position.y}px)`,left:-10,top:-10,width:20,height:20,}}/></div>);}\n```\n\n\nCode like this is a problem because it modifies an existing object in state:\n\n\n```javascript\nposition.x=e.clientX;position.y=e.clientY;\n```\n\n\nBut code like this is absolutely fine because you\u2019re mutating a fresh object you have just created :\n\n\n```javascript\nconstnextPosition={};nextPosition.x=e.clientX;nextPosition.y=e.clientY;setPosition(nextPosition);\n```\n\n\nIn fact, it is completely equivalent to writing this:\n\n\n```javascript\nsetPosition({x:e.clientX,y:e.clientY});\n```\n\n\nMutation is only a problem when you change existing objects that are already in state. Mutating an object you\u2019ve just created is okay because no other code references it yet. Changing it isn\u2019t going to accidentally impact something that depends on it. This is called a \u201clocal mutation\u201d. You can even do local mutation while rendering. Very convenient and completely okay!", "source": "https://react.dev/learn/updating-objects-in-state", "category": "Updating Objects in State"}
{"instruction": "Explain the concept of Copying objects with the spread syntax in React.", "input": "", "output": "In the previous example, the position object is always created fresh from the current cursor position. But often, you will want to include existing data as a part of the new object you\u2019re creating. For example, you may want to update only one field in a form, but keep the previous values for all other fields.\n\nThese input fields don\u2019t work because the onChange handlers mutate the state:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[person,setPerson]=useState({firstName:'Barbara',lastName:'Hepworth',email:'bhepworth@sculpture.com'});functionhandleFirstNameChange(e){person.firstName=e.target.value;}functionhandleLastNameChange(e){person.lastName=e.target.value;}functionhandleEmailChange(e){person.email=e.target.value;}return(<><label>First name:<inputvalue={person.firstName}onChange={handleFirstNameChange}/></label><label>Last name:<inputvalue={person.lastName}onChange={handleLastNameChange}/></label><label>Email:<inputvalue={person.email}onChange={handleEmailChange}/></label><p>{person.firstName}{' '}{person.lastName}{' '}({person.email})</p></>);}\n```\n\n\nFor example, this line mutates the state from a past render:\n\n\n```javascript\nperson.firstName=e.target.value;\n```\n\n\nThe reliable way to get the behavior you\u2019re looking for is to create a new object and pass it to setPerson . But here, you want to also copy the existing data into it because only one of the fields has changed:\n\n\n```javascript\nsetPerson({firstName:e.target.value,// New first name from the inputlastName:person.lastName,email:person.email});\n```\n\n\nYou can use the ... object spread syntax so that you don\u2019t need to copy every property separately.\n\n\n```javascript\nsetPerson({...person,// Copy the old fieldsfirstName:e.target.value// But override this one});\n```\n\n\nNow the form works!\n\nNotice how you didn\u2019t declare a separate state variable for each input field. For large forms, keeping all data grouped in an object is very convenient\u2014as long as you update it correctly!\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[person,setPerson]=useState({firstName:'Barbara',lastName:'Hepworth',email:'bhepworth@sculpture.com'});functionhandleFirstNameChange(e){setPerson({...person,firstName:e.target.value});}functionhandleLastNameChange(e){setPerson({...person,lastName:e.target.value});}functionhandleEmailChange(e){setPerson({...person,email:e.target.value});}return(<><label>First name:<inputvalue={person.firstName}onChange={handleFirstNameChange}/></label><label>Last name:<inputvalue={person.lastName}onChange={handleLastNameChange}/></label><label>Email:<inputvalue={person.email}onChange={handleEmailChange}/></label><p>{person.firstName}{' '}{person.lastName}{' '}({person.email})</p></>);}\n```\n\n\nNote that the ... spread syntax is \u201cshallow\u201d\u2014it only copies things one level deep. This makes it fast, but it also means that if you want to update a nested property, you\u2019ll have to use it more than once.\n\nYou can also use the [ and ] braces inside your object definition to specify a property with a dynamic name. Here is the same example, but with a single event handler instead of three different ones:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[person,setPerson]=useState({firstName:'Barbara',lastName:'Hepworth',email:'bhepworth@sculpture.com'});functionhandleChange(e){setPerson({...person,[e.target.name]:e.target.value});}return(<><label>First name:<inputname=\"firstName\"value={person.firstName}onChange={handleChange}/></label><label>Last name:<inputname=\"lastName\"value={person.lastName}onChange={handleChange}/></label><label>Email:<inputname=\"email\"value={person.email}onChange={handleChange}/></label><p>{person.firstName}{' '}{person.lastName}{' '}({person.email})</p></>);}\n```\n\n\nHere, e.target.name refers to the name property given to the <input> DOM element.", "source": "https://react.dev/learn/updating-objects-in-state", "category": "Updating Objects in State"}
{"instruction": "Show me a code example of Copying objects with the spread syntax in React.", "input": "", "output": "In the previous example, the position object is always created fresh from the current cursor position. But often, you will want to include existing data as a part of the new object you\u2019re creating. For example, you may want to update only one field in a form, but keep the previous values for all other fields.\n\nThese input fields don\u2019t work because the onChange handlers mutate the state:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[person,setPerson]=useState({firstName:'Barbara',lastName:'Hepworth',email:'bhepworth@sculpture.com'});functionhandleFirstNameChange(e){person.firstName=e.target.value;}functionhandleLastNameChange(e){person.lastName=e.target.value;}functionhandleEmailChange(e){person.email=e.target.value;}return(<><label>First name:<inputvalue={person.firstName}onChange={handleFirstNameChange}/></label><label>Last name:<inputvalue={person.lastName}onChange={handleLastNameChange}/></label><label>Email:<inputvalue={person.email}onChange={handleEmailChange}/></label><p>{person.firstName}{' '}{person.lastName}{' '}({person.email})</p></>);}\n```\n\n\nFor example, this line mutates the state from a past render:\n\n\n```javascript\nperson.firstName=e.target.value;\n```\n\n\nThe reliable way to get the behavior you\u2019re looking for is to create a new object and pass it to setPerson . But here, you want to also copy the existing data into it because only one of the fields has changed:\n\n\n```javascript\nsetPerson({firstName:e.target.value,// New first name from the inputlastName:person.lastName,email:person.email});\n```\n\n\nYou can use the ... object spread syntax so that you don\u2019t need to copy every property separately.\n\n\n```javascript\nsetPerson({...person,// Copy the old fieldsfirstName:e.target.value// But override this one});\n```\n\n\nNow the form works!\n\nNotice how you didn\u2019t declare a separate state variable for each input field. For large forms, keeping all data grouped in an object is very convenient\u2014as long as you update it correctly!\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[person,setPerson]=useState({firstName:'Barbara',lastName:'Hepworth',email:'bhepworth@sculpture.com'});functionhandleFirstNameChange(e){setPerson({...person,firstName:e.target.value});}functionhandleLastNameChange(e){setPerson({...person,lastName:e.target.value});}functionhandleEmailChange(e){setPerson({...person,email:e.target.value});}return(<><label>First name:<inputvalue={person.firstName}onChange={handleFirstNameChange}/></label><label>Last name:<inputvalue={person.lastName}onChange={handleLastNameChange}/></label><label>Email:<inputvalue={person.email}onChange={handleEmailChange}/></label><p>{person.firstName}{' '}{person.lastName}{' '}({person.email})</p></>);}\n```\n\n\nNote that the ... spread syntax is \u201cshallow\u201d\u2014it only copies things one level deep. This makes it fast, but it also means that if you want to update a nested property, you\u2019ll have to use it more than once.\n\nYou can also use the [ and ] braces inside your object definition to specify a property with a dynamic name. Here is the same example, but with a single event handler instead of three different ones:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[person,setPerson]=useState({firstName:'Barbara',lastName:'Hepworth',email:'bhepworth@sculpture.com'});functionhandleChange(e){setPerson({...person,[e.target.name]:e.target.value});}return(<><label>First name:<inputname=\"firstName\"value={person.firstName}onChange={handleChange}/></label><label>Last name:<inputname=\"lastName\"value={person.lastName}onChange={handleChange}/></label><label>Email:<inputname=\"email\"value={person.email}onChange={handleChange}/></label><p>{person.firstName}{' '}{person.lastName}{' '}({person.email})</p></>);}\n```\n\n\nHere, e.target.name refers to the name property given to the <input> DOM element.", "source": "https://react.dev/learn/updating-objects-in-state", "category": "Updating Objects in State"}
{"instruction": "Can you describe Updating a nested object in the context of React?", "input": "", "output": "Consider a nested object structure like this:\n\n\n```javascript\nconst[person,setPerson]=useState({name:'Niki de Saint Phalle',artwork:{title:'Blue Nana',city:'Hamburg',image:'https://i.imgur.com/Sd1AgUOm.jpg',}});\n```\n\n\nIf you wanted to update person.artwork.city , it\u2019s clear how to do it with mutation:\n\n\n```javascript\nperson.artwork.city='New Delhi';\n```\n\n\nBut in React, you treat state as immutable! In order to change city , you would first need to produce the new artwork object (pre-populated with data from the previous one), and then produce the new person object which points at the new artwork :\n\n\n```javascript\nconstnextArtwork={...person.artwork,city:'New Delhi'};constnextPerson={...person,artwork:nextArtwork};setPerson(nextPerson);\n```\n\n\nOr, written as a single function call:\n\n\n```javascript\nsetPerson({...person,// Copy other fieldsartwork:{// but replace the artwork...person.artwork,// with the same onecity:'New Delhi'// but in New Delhi!}});\n```\n\n\nThis gets a bit wordy, but it works fine for many cases:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[person,setPerson]=useState({name:'Niki de Saint Phalle',artwork:{title:'Blue Nana',city:'Hamburg',image:'https://i.imgur.com/Sd1AgUOm.jpg',}});functionhandleNameChange(e){setPerson({...person,name:e.target.value});}functionhandleTitleChange(e){setPerson({...person,artwork:{...person.artwork,title:e.target.value}});}functionhandleCityChange(e){setPerson({...person,artwork:{...person.artwork,city:e.target.value}});}functionhandleImageChange(e){setPerson({...person,artwork:{...person.artwork,image:e.target.value}});}return(<><label>Name:<inputvalue={person.name}onChange={handleNameChange}/></label><label>Title:<inputvalue={person.artwork.title}onChange={handleTitleChange}/></label><label>City:<inputvalue={person.artwork.city}onChange={handleCityChange}/></label><label>Image:<inputvalue={person.artwork.image}onChange={handleImageChange}/></label><p><i>{person.artwork.title}</i>{' by '}{person.name}<br/>(located in{person.artwork.city})</p><imgsrc={person.artwork.image}alt={person.artwork.title}/></>);}\n```\n\n\nAn object like this appears \u201cnested\u201d in code:\n\n\n```javascript\nletobj={name:'Niki de Saint Phalle',artwork:{title:'Blue Nana',city:'Hamburg',image:'https://i.imgur.com/Sd1AgUOm.jpg',}};\n```\n\n\nHowever, \u201cnesting\u201d is an inaccurate way to think about how objects behave. When the code executes, there is no such thing as a \u201cnested\u201d object. You are really looking at two different objects:\n\n\n```javascript\nletobj1={title:'Blue Nana',city:'Hamburg',image:'https://i.imgur.com/Sd1AgUOm.jpg',};letobj2={name:'Niki de Saint Phalle',artwork:obj1};\n```\n\n\nThe obj1 object is not \u201cinside\u201d obj2 . For example, obj3 could \u201cpoint\u201d at obj1 too:\n\n\n```javascript\nletobj1={title:'Blue Nana',city:'Hamburg',image:'https://i.imgur.com/Sd1AgUOm.jpg',};letobj2={name:'Niki de Saint Phalle',artwork:obj1};letobj3={name:'Copycat',artwork:obj1};\n```\n\n\nIf you were to mutate obj3.artwork.city , it would affect both obj2.artwork.city and obj1.city . This is because obj3.artwork , obj2.artwork , and obj1 are the same object. This is difficult to see when you think of objects as \u201cnested\u201d. Instead, they are separate objects \u201cpointing\u201d at each other with properties.\n\n\n### Write concise update logic with Immer\n\n\nIf your state is deeply nested, you might want to consider flattening it. But, if you don\u2019t want to change your state structure, you might prefer a shortcut to nested spreads. Immer is a popular library that lets you write using the convenient but mutating syntax and takes care of producing the copies for you. With Immer, the code you write looks like you are \u201cbreaking the rules\u201d and mutating an object:\n\n\n```javascript\nupdatePerson(draft=>{draft.artwork.city='Lagos';});\n```\n\n\nBut unlike a regular mutation, it doesn\u2019t overwrite the past state!\n\nThe draft provided by Immer is a special type of object, called a Proxy , that \u201crecords\u201d what you do with it. This is why you can mutate it freely as much as you like! Under the hood, Immer figures out which parts of the draft have been changed, and produces a completely new object that contains your edits.\n\nTo try Immer:\n\n1. Run npm install use-immer to add Immer as a dependency\n2. Then replace import { useState } from 'react' with import { useImmer } from 'use-immer'\n\nHere is the above example converted to Immer:\n\n\n```javascript\n{\"dependencies\":{\"immer\":\"1.7.3\",\"react\":\"latest\",\"react-dom\":\"latest\",\"react-scripts\":\"latest\",\"use-immer\":\"0.5.1\"},\"scripts\":{\"start\":\"react-scripts start\",\"build\":\"react-scripts build\",\"test\":\"react-scripts test --env=jsdom\",\"eject\":\"react-scripts eject\"},\"devDependencies\":{}}\n```\n\n\nNotice how much more concise the event handlers have become. You can mix and match useState and useImmer in a single component as much as you like. Immer is a great way to keep the update handlers concise, especially if there\u2019s nesting in your state, and copying objects leads to repetitive code.\n\nThere are a few reasons:\n\n* Debugging: If you use console.log and don\u2019t mutate state, your past logs won\u2019t get clobbered by the more recent state changes. So you can clearly see how state has changed between renders.\n* Optimizations: Common React optimization strategies rely on skipping work if previous props or state are the same as the next ones. If you never mutate state, it is very fast to check whether there were any changes. If prevObj === obj , you can be sure that nothing could have changed inside of it.\n* New Features: The new React features we\u2019re building rely on state being treated like a snapshot. If you\u2019re mutating past versions of state, that may prevent you from using the new features.\n* Requirement Changes: Some application features, like implementing Undo/Redo, showing a history of changes, or letting the user reset a form to earlier values, are easier to do when nothing is mutated. This is because you can keep past copies of state in memory, and reuse them when appropriate. If you start with a mutative approach, features like this can be difficult to add later on.\n* Simpler Implementation: Because React does not rely on mutation, it does not need to do anything special with your objects. It does not need to hijack their properties, always wrap them into Proxies, or do other work at initialization as many \u201creactive\u201d solutions do. This is also why React lets you put any object into state\u2014no matter how large\u2014without additional performance or correctness pitfalls.\n\nIn practice, you can often \u201cget away\u201d with mutating state in React, but we strongly advise you not to do that so that you can use new React features developed with this approach in mind. Future contributors and perhaps even your future self will thank you!", "source": "https://react.dev/learn/updating-objects-in-state", "category": "Updating Objects in State"}
{"instruction": "Show me a code example of Updating a nested object in React.", "input": "", "output": "Consider a nested object structure like this:\n\n\n```javascript\nconst[person,setPerson]=useState({name:'Niki de Saint Phalle',artwork:{title:'Blue Nana',city:'Hamburg',image:'https://i.imgur.com/Sd1AgUOm.jpg',}});\n```\n\n\nIf you wanted to update person.artwork.city , it\u2019s clear how to do it with mutation:\n\n\n```javascript\nperson.artwork.city='New Delhi';\n```\n\n\nBut in React, you treat state as immutable! In order to change city , you would first need to produce the new artwork object (pre-populated with data from the previous one), and then produce the new person object which points at the new artwork :\n\n\n```javascript\nconstnextArtwork={...person.artwork,city:'New Delhi'};constnextPerson={...person,artwork:nextArtwork};setPerson(nextPerson);\n```\n\n\nOr, written as a single function call:\n\n\n```javascript\nsetPerson({...person,// Copy other fieldsartwork:{// but replace the artwork...person.artwork,// with the same onecity:'New Delhi'// but in New Delhi!}});\n```\n\n\nThis gets a bit wordy, but it works fine for many cases:\n\n\n```javascript\nimport{useState}from'react';exportdefaultfunctionForm(){const[person,setPerson]=useState({name:'Niki de Saint Phalle',artwork:{title:'Blue Nana',city:'Hamburg',image:'https://i.imgur.com/Sd1AgUOm.jpg',}});functionhandleNameChange(e){setPerson({...person,name:e.target.value});}functionhandleTitleChange(e){setPerson({...person,artwork:{...person.artwork,title:e.target.value}});}functionhandleCityChange(e){setPerson({...person,artwork:{...person.artwork,city:e.target.value}});}functionhandleImageChange(e){setPerson({...person,artwork:{...person.artwork,image:e.target.value}});}return(<><label>Name:<inputvalue={person.name}onChange={handleNameChange}/></label><label>Title:<inputvalue={person.artwork.title}onChange={handleTitleChange}/></label><label>City:<inputvalue={person.artwork.city}onChange={handleCityChange}/></label><label>Image:<inputvalue={person.artwork.image}onChange={handleImageChange}/></label><p><i>{person.artwork.title}</i>{' by '}{person.name}<br/>(located in{person.artwork.city})</p><imgsrc={person.artwork.image}alt={person.artwork.title}/></>);}\n```\n\n\nAn object like this appears \u201cnested\u201d in code:\n\n\n```javascript\nletobj={name:'Niki de Saint Phalle',artwork:{title:'Blue Nana',city:'Hamburg',image:'https://i.imgur.com/Sd1AgUOm.jpg',}};\n```\n\n\nHowever, \u201cnesting\u201d is an inaccurate way to think about how objects behave. When the code executes, there is no such thing as a \u201cnested\u201d object. You are really looking at two different objects:\n\n\n```javascript\nletobj1={title:'Blue Nana',city:'Hamburg',image:'https://i.imgur.com/Sd1AgUOm.jpg',};letobj2={name:'Niki de Saint Phalle',artwork:obj1};\n```\n\n\nThe obj1 object is not \u201cinside\u201d obj2 . For example, obj3 could \u201cpoint\u201d at obj1 too:\n\n\n```javascript\nletobj1={title:'Blue Nana',city:'Hamburg',image:'https://i.imgur.com/Sd1AgUOm.jpg',};letobj2={name:'Niki de Saint Phalle',artwork:obj1};letobj3={name:'Copycat',artwork:obj1};\n```\n\n\nIf you were to mutate obj3.artwork.city , it would affect both obj2.artwork.city and obj1.city . This is because obj3.artwork , obj2.artwork , and obj1 are the same object. This is difficult to see when you think of objects as \u201cnested\u201d. Instead, they are separate objects \u201cpointing\u201d at each other with properties.\n\n\n### Write concise update logic with Immer\n\n\nIf your state is deeply nested, you might want to consider flattening it. But, if you don\u2019t want to change your state structure, you might prefer a shortcut to nested spreads. Immer is a popular library that lets you write using the convenient but mutating syntax and takes care of producing the copies for you. With Immer, the code you write looks like you are \u201cbreaking the rules\u201d and mutating an object:\n\n\n```javascript\nupdatePerson(draft=>{draft.artwork.city='Lagos';});\n```\n\n\nBut unlike a regular mutation, it doesn\u2019t overwrite the past state!\n\nThe draft provided by Immer is a special type of object, called a Proxy , that \u201crecords\u201d what you do with it. This is why you can mutate it freely as much as you like! Under the hood, Immer figures out which parts of the draft have been changed, and produces a completely new object that contains your edits.\n\nTo try Immer:\n\n1. Run npm install use-immer to add Immer as a dependency\n2. Then replace import { useState } from 'react' with import { useImmer } from 'use-immer'\n\nHere is the above example converted to Immer:\n\n\n```javascript\n{\"dependencies\":{\"immer\":\"1.7.3\",\"react\":\"latest\",\"react-dom\":\"latest\",\"react-scripts\":\"latest\",\"use-immer\":\"0.5.1\"},\"scripts\":{\"start\":\"react-scripts start\",\"build\":\"react-scripts build\",\"test\":\"react-scripts test --env=jsdom\",\"eject\":\"react-scripts eject\"},\"devDependencies\":{}}\n```\n\n\nNotice how much more concise the event handlers have become. You can mix and match useState and useImmer in a single component as much as you like. Immer is a great way to keep the update handlers concise, especially if there\u2019s nesting in your state, and copying objects leads to repetitive code.\n\nThere are a few reasons:\n\n* Debugging: If you use console.log and don\u2019t mutate state, your past logs won\u2019t get clobbered by the more recent state changes. So you can clearly see how state has changed between renders.\n* Optimizations: Common React optimization strategies rely on skipping work if previous props or state are the same as the next ones. If you never mutate state, it is very fast to check whether there were any changes. If prevObj === obj , you can be sure that nothing could have changed inside of it.\n* New Features: The new React features we\u2019re building rely on state being treated like a snapshot. If you\u2019re mutating past versions of state, that may prevent you from using the new features.\n* Requirement Changes: Some application features, like implementing Undo/Redo, showing a history of changes, or letting the user reset a form to earlier values, are easier to do when nothing is mutated. This is because you can keep past copies of state in memory, and reuse them when appropriate. If you start with a mutative approach, features like this can be difficult to add later on.\n* Simpler Implementation: Because React does not rely on mutation, it does not need to do anything special with your objects. It does not need to hijack their properties, always wrap them into Proxies, or do other work at initialization as many \u201creactive\u201d solutions do. This is also why React lets you put any object into state\u2014no matter how large\u2014without additional performance or correctness pitfalls.\n\nIn practice, you can often \u201cget away\u201d with mutating state in React, but we strongly advise you not to do that so that you can use new React features developed with this approach in mind. Future contributors and perhaps even your future self will thank you!", "source": "https://react.dev/learn/updating-objects-in-state", "category": "Updating Objects in State"}
{"instruction": "Can you describe JSX: Putting markup into JavaScript in the context of React?", "input": "", "output": "The Web has been built on HTML, CSS, and JavaScript. For many years, web developers kept content in HTML, design in CSS, and logic in JavaScript\u2014often in separate files! Content was marked up inside HTML while the page\u2019s logic lived separately in JavaScript:\n\nHTML\n\nJavaScript\n\nBut as the Web became more interactive, logic increasingly determined content. JavaScript was in charge of the HTML! This is why in React, rendering logic and markup live together in the same place\u2014components.\n\nSidebar.js React component\n\nForm.js React component\n\nKeeping a button\u2019s rendering logic and markup together ensures that they stay in sync with each other on every edit. Conversely, details that are unrelated, such as the button\u2019s markup and a sidebar\u2019s markup, are isolated from each other, making it safer to change either of them on their own.\n\nEach React component is a JavaScript function that may contain some markup that React renders into the browser. React components use a syntax extension called JSX to represent that markup. JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information. The best way to understand this is to convert some HTML markup to JSX markup.\n\n\n### Note\n\n\nJSX and React are two separate things. They\u2019re often used together, but you can use them independently of each other. JSX is a syntax extension, while React is a JavaScript library.", "source": "https://react.dev/learn/writing-markup-with-jsx", "category": "Writing Markup with JSX"}
{"instruction": "Explain the concept of Converting HTML to JSX in React.", "input": "", "output": "Suppose that you have some (perfectly valid) HTML:\n\n\n```javascript\n<h1>Hedy Lamarr's Todos</h1><imgsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"alt=\"Hedy Lamarr\"class=\"photo\"><ul><li>Invent new traffic lights<li>Rehearse a movie scene<li>Improve the spectrum technology</ul>\n```\n\n\nAnd you want to put it into your component:\n\n\n```javascript\nexportdefaultfunctionTodoList(){return(// ???)}\n```\n\n\nIf you copy and paste it as is, it will not work:\n\n\n```javascript\nexportdefaultfunctionTodoList(){return(// This doesn't quite work!<h1>Hedy Lamarr's Todos</h1><imgsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"alt=\"Hedy Lamarr\"class=\"photo\"><ul><li>Invent new traffic lights<li>Rehearse a movie scene<li>Improve the spectrum technology</ul>\n```\n\n\nThis is because JSX is stricter and has a few more rules than HTML! If you read the error messages above, they\u2019ll guide you to fix the markup, or you can follow the guide below.\n\n\n### Note\n\n\nMost of the time, React\u2019s on-screen error messages will help you find where the problem is. Give them a read if you get stuck!", "source": "https://react.dev/learn/writing-markup-with-jsx", "category": "Writing Markup with JSX"}
{"instruction": "Show me a code example of Converting HTML to JSX in React.", "input": "", "output": "Suppose that you have some (perfectly valid) HTML:\n\n\n```javascript\n<h1>Hedy Lamarr's Todos</h1><imgsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"alt=\"Hedy Lamarr\"class=\"photo\"><ul><li>Invent new traffic lights<li>Rehearse a movie scene<li>Improve the spectrum technology</ul>\n```\n\n\nAnd you want to put it into your component:\n\n\n```javascript\nexportdefaultfunctionTodoList(){return(// ???)}\n```\n\n\nIf you copy and paste it as is, it will not work:\n\n\n```javascript\nexportdefaultfunctionTodoList(){return(// This doesn't quite work!<h1>Hedy Lamarr's Todos</h1><imgsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"alt=\"Hedy Lamarr\"class=\"photo\"><ul><li>Invent new traffic lights<li>Rehearse a movie scene<li>Improve the spectrum technology</ul>\n```\n\n\nThis is because JSX is stricter and has a few more rules than HTML! If you read the error messages above, they\u2019ll guide you to fix the markup, or you can follow the guide below.\n\n\n### Note\n\n\nMost of the time, React\u2019s on-screen error messages will help you find where the problem is. Give them a read if you get stuck!", "source": "https://react.dev/learn/writing-markup-with-jsx", "category": "Writing Markup with JSX"}
{"instruction": "Tell me about The Rules of JSX.", "input": "", "output": "\n### 1. Return a single root element\n\n\nTo return multiple elements from a component, wrap them with a single parent tag.\n\nFor example, you can use a <div> :\n\n\n```javascript\n<div><h1>Hedy Lamarr's Todos</h1><imgsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"alt=\"Hedy Lamarr\"class=\"photo\"><ul>...</ul></div>\n```\n\n\nIf you don\u2019t want to add an extra <div> to your markup, you can write <> and </> instead:\n\n\n```javascript\n<><h1>Hedy Lamarr's Todos</h1><imgsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"alt=\"Hedy Lamarr\"class=\"photo\"><ul>...</ul></>\n```\n\n\nThis empty tag is called a Fragment. Fragments let you group things without leaving any trace in the browser HTML tree.\n\nJSX looks like HTML, but under the hood it is transformed into plain JavaScript objects. You can\u2019t return two objects from a function without wrapping them into an array. This explains why you also can\u2019t return two JSX tags without wrapping them into another tag or a Fragment.\n\n\n### 2. Close all the tags\n\n\nJSX requires tags to be explicitly closed: self-closing tags like <img> must become <img /> , and wrapping tags like <li>oranges must be written as <li>oranges</li> .\n\nThis is how Hedy Lamarr\u2019s image and list items look closed:\n\n\n```javascript\n<><imgsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"alt=\"Hedy Lamarr\"class=\"photo\"/><ul><li>Invent new traffic lights</li><li>Rehearse a movie scene</li><li>Improve the spectrum technology</li></ul></>\n```\n\n\n\n### 3. camelCaseallmost of the things!\n\n\nJSX turns into JavaScript and attributes written in JSX become keys of JavaScript objects. In your own components, you will often want to read those attributes into variables. But JavaScript has limitations on variable names. For example, their names can\u2019t contain dashes or be reserved words like class .\n\nThis is why, in React, many HTML and SVG attributes are written in camelCase. For example, instead of stroke-width you use strokeWidth . Since class is a reserved word, in React you write className instead, named after the corresponding DOM property :\n\n\n```javascript\n<imgsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"alt=\"Hedy Lamarr\"className=\"photo\"/>\n```\n\n\nYou can find all these attributes in the list of DOM component props. If you get one wrong, don\u2019t worry\u2014React will print a message with a possible correction to the browser console.\n\n\n### Pitfall\n\n\nFor historical reasons, aria-* and data-* attributes are written as in HTML with dashes.\n\n\n### Pro-tip: Use a JSX Converter\n\n\nConverting all these attributes in existing markup can be tedious! We recommend using a converter to translate your existing HTML and SVG to JSX. Converters are very useful in practice, but it\u2019s still worth understanding what is going on so that you can comfortably write JSX on your own.\n\nHere is your final result:\n\n\n```javascript\nexportdefaultfunctionTodoList(){return(<><h1>Hedy Lamarr's Todos</h1><imgsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"alt=\"Hedy Lamarr\"className=\"photo\"/><ul><li>Invent new traffic lights</li><li>Rehearse a movie scene</li><li>Improve the spectrum technology</li></ul></>);}\n```\n", "source": "https://react.dev/learn/writing-markup-with-jsx", "category": "Writing Markup with JSX"}
{"instruction": "Show me a code example of The Rules of JSX in React.", "input": "", "output": "\n### 1. Return a single root element\n\n\nTo return multiple elements from a component, wrap them with a single parent tag.\n\nFor example, you can use a <div> :\n\n\n```javascript\n<div><h1>Hedy Lamarr's Todos</h1><imgsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"alt=\"Hedy Lamarr\"class=\"photo\"><ul>...</ul></div>\n```\n\n\nIf you don\u2019t want to add an extra <div> to your markup, you can write <> and </> instead:\n\n\n```javascript\n<><h1>Hedy Lamarr's Todos</h1><imgsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"alt=\"Hedy Lamarr\"class=\"photo\"><ul>...</ul></>\n```\n\n\nThis empty tag is called a Fragment. Fragments let you group things without leaving any trace in the browser HTML tree.\n\nJSX looks like HTML, but under the hood it is transformed into plain JavaScript objects. You can\u2019t return two objects from a function without wrapping them into an array. This explains why you also can\u2019t return two JSX tags without wrapping them into another tag or a Fragment.\n\n\n### 2. Close all the tags\n\n\nJSX requires tags to be explicitly closed: self-closing tags like <img> must become <img /> , and wrapping tags like <li>oranges must be written as <li>oranges</li> .\n\nThis is how Hedy Lamarr\u2019s image and list items look closed:\n\n\n```javascript\n<><imgsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"alt=\"Hedy Lamarr\"class=\"photo\"/><ul><li>Invent new traffic lights</li><li>Rehearse a movie scene</li><li>Improve the spectrum technology</li></ul></>\n```\n\n\n\n### 3. camelCaseallmost of the things!\n\n\nJSX turns into JavaScript and attributes written in JSX become keys of JavaScript objects. In your own components, you will often want to read those attributes into variables. But JavaScript has limitations on variable names. For example, their names can\u2019t contain dashes or be reserved words like class .\n\nThis is why, in React, many HTML and SVG attributes are written in camelCase. For example, instead of stroke-width you use strokeWidth . Since class is a reserved word, in React you write className instead, named after the corresponding DOM property :\n\n\n```javascript\n<imgsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"alt=\"Hedy Lamarr\"className=\"photo\"/>\n```\n\n\nYou can find all these attributes in the list of DOM component props. If you get one wrong, don\u2019t worry\u2014React will print a message with a possible correction to the browser console.\n\n\n### Pitfall\n\n\nFor historical reasons, aria-* and data-* attributes are written as in HTML with dashes.\n\n\n### Pro-tip: Use a JSX Converter\n\n\nConverting all these attributes in existing markup can be tedious! We recommend using a converter to translate your existing HTML and SVG to JSX. Converters are very useful in practice, but it\u2019s still worth understanding what is going on so that you can comfortably write JSX on your own.\n\nHere is your final result:\n\n\n```javascript\nexportdefaultfunctionTodoList(){return(<><h1>Hedy Lamarr's Todos</h1><imgsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"alt=\"Hedy Lamarr\"className=\"photo\"/><ul><li>Invent new traffic lights</li><li>Rehearse a movie scene</li><li>Improve the spectrum technology</li></ul></>);}\n```\n", "source": "https://react.dev/learn/writing-markup-with-jsx", "category": "Writing Markup with JSX"}
{"instruction": "How do I handle How to remove unnecessary Effects in React?", "input": "", "output": "There are two common cases in which you don\u2019t need Effects:\n\n* You don\u2019t need Effects to transform data for rendering. For example, let\u2019s say you want to filter a list before displaying it. You might feel tempted to write an Effect that updates a state variable when the list changes. However, this is inefficient. When you update the state, React will first call your component functions to calculate what should be on the screen. Then React will \u201ccommit\u201d these changes to the DOM, updating the screen. Then React will run your Effects. If your Effect also immediately updates the state, this restarts the whole process from scratch! To avoid the unnecessary render passes, transform all the data at the top level of your components. That code will automatically re-run whenever your props or state change.\n* You don\u2019t need Effects to handle user events. For example, let\u2019s say you want to send an /api/buy POST request and show a notification when the user buys a product. In the Buy button click event handler, you know exactly what happened. By the time an Effect runs, you don\u2019t know what the user did (for example, which button was clicked). This is why you\u2019ll usually handle user events in the corresponding event handlers.\n\nYou do need Effects to synchronize with external systems. For example, you can write an Effect that keeps a jQuery widget synchronized with the React state. You can also fetch data with Effects: for example, you can synchronize the search results with the current search query. Keep in mind that modern frameworks provide more efficient built-in data fetching mechanisms than writing Effects directly in your components.\n\nTo help you gain the right intuition, let\u2019s look at some common concrete examples!\n\n\n### Updating state based on props or state\n\n\nSuppose you have a component with two state variables: firstName and lastName . You want to calculate a fullName from them by concatenating them. Moreover, you\u2019d like fullName to update whenever firstName or lastName change. Your first instinct might be to add a fullName state variable and update it in an Effect:\n\n\n```javascript\nfunctionForm(){const[firstName,setFirstName]=useState('Taylor');const[lastName,setLastName]=useState('Swift');// \ud83d\udd34 Avoid: redundant state and unnecessary Effectconst[fullName,setFullName]=useState('');useEffect(()=>{setFullName(firstName+' '+lastName);},[firstName,lastName]);// ...}\n```\n\n\nThis is more complicated than necessary. It is inefficient too: it does an entire render pass with a stale value for fullName , then immediately re-renders with the updated value. Remove the state variable and the Effect:\n\n\n```javascript\nfunctionForm(){const[firstName,setFirstName]=useState('Taylor');const[lastName,setLastName]=useState('Swift');// \u2705 Good: calculated during renderingconstfullName=firstName+' '+lastName;// ...}\n```\n\n\nWhen something can be calculated from the existing props or state, don\u2019t put it in state. Instead, calculate it during rendering. This makes your code faster (you avoid the extra \u201ccascading\u201d updates), simpler (you remove some code), and less error-prone (you avoid bugs caused by different state variables getting out of sync with each other). If this approach feels new to you, Thinking in React explains what should go into state.\n\n\n### Caching expensive calculations\n\n\nThis component computes visibleTodos by taking the todos it receives by props and filtering them according to the filter prop. You might feel tempted to store the result in state and update it from an Effect:\n\n\n```javascript\nfunctionTodoList({todos,filter}){const[newTodo,setNewTodo]=useState('');// \ud83d\udd34 Avoid: redundant state and unnecessary Effectconst[visibleTodos,setVisibleTodos]=useState([]);useEffect(()=>{setVisibleTodos(getFilteredTodos(todos,filter));},[todos,filter]);// ...}\n```\n\n\nLike in the earlier example, this is both unnecessary and inefficient. First, remove the state and the Effect:\n\n\n```javascript\nfunctionTodoList({todos,filter}){const[newTodo,setNewTodo]=useState('');// \u2705 This is fine if getFilteredTodos() is not slow.constvisibleTodos=getFilteredTodos(todos,filter);// ...}\n```\n\n\nUsually, this code is fine! But maybe getFilteredTodos() is slow or you have a lot of todos . In that case you don\u2019t want to recalculate getFilteredTodos() if some unrelated state variable like newTodo has changed.\n\nYou can cache (or \u201cmemoize\u201d ) an expensive calculation by wrapping it in a useMemo Hook:\n\n\n### Note\n\n\nReact Compiler can automatically memoize expensive calculations for you, eliminating the need for manual useMemo in many cases.\n\n\n```javascript\nimport{useMemo,useState}from'react';functionTodoList({todos,filter}){const[newTodo,setNewTodo]=useState('');constvisibleTodos=useMemo(()=>{// \u2705 Does not re-run unless todos or filter changereturngetFilteredTodos(todos,filter);},[todos,filter]);// ...}\n```\n\n\nOr, written as a single line:\n\n\n```javascript\nimport{useMemo,useState}from'react';functionTodoList({todos,filter}){const[newTodo,setNewTodo]=useState('');// \u2705 Does not re-run getFilteredTodos() unless todos or filter changeconstvisibleTodos=useMemo(()=>getFilteredTodos(todos,filter),[todos,filter]);// ...}\n```\n\n\nThis tells React that you don\u2019t want the inner function to re-run unless either todos or filter have changed. React will remember the return value of getFilteredTodos() during the initial render. During the next renders, it will check if todos or filter are different. If they\u2019re the same as last time, useMemo will return the last result it has stored. But if they are different, React will call the inner function again (and store its result).\n\nThe function you wrap in useMemo runs during rendering, so this only works for pure calculations.\n\nIn general, unless you\u2019re creating or looping over thousands of objects, it\u2019s probably not expensive. If you want to get more confidence, you can add a console log to measure the time spent in a piece of code:\n\n\n```javascript\nconsole.time('filter array');constvisibleTodos=getFilteredTodos(todos,filter);console.timeEnd('filter array');\n```\n\n\nPerform the interaction you\u2019re measuring (for example, typing into the input). You will then see logs like filter array: 0.15ms in your console. If the overall logged time adds up to a significant amount (say, 1ms or more), it might make sense to memoize that calculation. As an experiment, you can then wrap the calculation in useMemo to verify whether the total logged time has decreased for that interaction or not:\n\n\n```javascript\nconsole.time('filter array');constvisibleTodos=useMemo(()=>{returngetFilteredTodos(todos,filter);// Skipped if todos and filter haven't changed},[todos,filter]);console.timeEnd('filter array');\n```\n\n\nuseMemo won\u2019t make the first render faster. It only helps you skip unnecessary work on updates.\n\nKeep in mind that your machine is probably faster than your users\u2019 so it\u2019s a good idea to test the performance with an artificial slowdown. For example, Chrome offers a CPU Throttling option for this.\n\nAlso note that measuring performance in development will not give you the most accurate results. (For example, when Strict Mode is on, you will see each component render twice rather than once.) To get the most accurate timings, build your app for production and test it on a device like your users have.\n\n\n### Resetting all state when a prop changes\n\n\nThis ProfilePage component receives a userId prop. The page contains a comment input, and you use a comment state variable to hold its value. One day, you notice a problem: when you navigate from one profile to another, the comment state does not get reset. As a result, it\u2019s easy to accidentally post a comment on a wrong user\u2019s profile. To fix the issue, you want to clear out the comment state variable whenever the userId changes:\n\n\n```javascript\nexportdefaultfunctionProfilePage({userId}){const[comment,setComment]=useState('');// \ud83d\udd34 Avoid: Resetting state on prop change in an EffectuseEffect(()=>{setComment('');},[userId]);// ...}\n```\n\n\nThis is inefficient because ProfilePage and its children will first render with the stale value, and then render again. It is also complicated because you\u2019d need to do this in every component that has some state inside ProfilePage . For example, if the comment UI is nested, you\u2019d want to clear out nested comment state too.\n\nInstead, you can tell React that each user\u2019s profile is conceptually a different profile by giving it an explicit key. Split your component in two and pass a key attribute from the outer component to the inner one:\n\n\n```javascript\nexportdefaultfunctionProfilePage({userId}){return(<ProfileuserId={userId}key={userId}/>);}functionProfile({userId}){// \u2705 This and any other state below will reset on key change automaticallyconst[comment,setComment]=useState('');// ...}\n```\n\n\nNormally, React preserves the state when the same component is rendered in the same spot. By passing userId as a key to the Profile component, you\u2019re asking React to treat two Profile components with different userId as two different components that should not share any state. Whenever the key (which you\u2019ve set to userId ) changes, React will recreate the DOM and reset the state of the Profile component and all of its children. Now the comment field will clear out automatically when navigating between profiles.\n\nNote that in this example, only the outer ProfilePage component is exported and visible to other files in the project. Components rendering ProfilePage don\u2019t need to pass the key to it: they pass userId as a regular prop. The fact ProfilePage passes it as a key to the inner Profile component is an implementation detail.\n\n\n### Adjusting some state when a prop changes\n\n\nSometimes, you might want to reset or adjust a part of the state on a prop change, but not all of it.\n\nThis List component receives a list of items as a prop, and maintains the selected item in the selection state variable. You want to reset the selection to null whenever the items prop receives a different array:\n\n\n```javascript\nfunctionList({items}){const[isReverse,setIsReverse]=useState(false);const[selection,setSelection]=useState(null);// \ud83d\udd34 Avoid: Adjusting state on prop change in an EffectuseEffect(()=>{setSelection(null);},[items]);// ...}\n```\n\n\nThis, too, is not ideal. Every time the items change, the List and its child components will render with a stale selection value at first. Then React will update the DOM and run the Effects. Finally, the setSelection(null) call will cause another re-render of the List and its child components, restarting this whole process again.\n\nStart by deleting the Effect. Instead, adjust the state directly during rendering:\n\n\n```javascript\nfunctionList({items}){const[isReverse,setIsReverse]=useState(false);const[selection,setSelection]=useState(null);// Better: Adjust the state while renderingconst[prevItems,setPrevItems]=useState(items);if(items!==prevItems){setPrevItems(items);setSelection(null);}// ...}\n```\n\n\nStoring information from previous renders like this can be hard to understand, but it\u2019s better than updating the same state in an Effect. In the above example, setSelection is called directly during a render. React will re-render the List immediately after it exits with a return statement. React has not rendered the List children or updated the DOM yet, so this lets the List children skip rendering the stale selection value.\n\nWhen you update a component during rendering, React throws away the returned JSX and immediately retries rendering. To avoid very slow cascading retries, React only lets you update the same component\u2019s state during a render. If you update another component\u2019s state during a render, you\u2019ll see an error. A condition like items !== prevItems is necessary to avoid loops. You may adjust state like this, but any other side effects (like changing the DOM or setting timeouts) should stay in event handlers or Effects to keep components pure.\n\nAlthough this pattern is more efficient than an Effect, most components shouldn\u2019t need it either. No matter how you do it, adjusting state based on props or other state makes your data flow more difficult to understand and debug. Always check whether you can reset all state with a key or calculate everything during rendering instead. For example, instead of storing (and resetting) the selected item , you can store the selected item ID:\n\n\n```javascript\nfunctionList({items}){const[isReverse,setIsReverse]=useState(false);const[selectedId,setSelectedId]=useState(null);// \u2705 Best: Calculate everything during renderingconstselection=items.find(item=>item.id===selectedId)??null;// ...}\n```\n\n\nNow there is no need to \u201cadjust\u201d the state at all. If the item with the selected ID is in the list, it remains selected. If it\u2019s not, the selection calculated during rendering will be null because no matching item was found. This behavior is different, but arguably better because most changes to items preserve the selection.\n\n\n### Sharing logic between event handlers\n\n\nLet\u2019s say you have a product page with two buttons (Buy and Checkout) that both let you buy that product. You want to show a notification whenever the user puts the product in the cart. Calling showNotification() in both buttons\u2019 click handlers feels repetitive so you might be tempted to place this logic in an Effect:\n\n\n```javascript\nfunctionProductPage({product,addToCart}){// \ud83d\udd34 Avoid: Event-specific logic inside an EffectuseEffect(()=>{if(product.isInCart){showNotification(`Added${product.name}to the shopping cart!`);}},[product]);functionhandleBuyClick(){addToCart(product);}functionhandleCheckoutClick(){addToCart(product);navigateTo('/checkout');}// ...}\n```\n\n\nThis Effect is unnecessary. It will also most likely cause bugs. For example, let\u2019s say that your app \u201cremembers\u201d the shopping cart between the page reloads. If you add a product to the cart once and refresh the page, the notification will appear again. It will keep appearing every time you refresh that product\u2019s page. This is because product.isInCart will already be true on the page load, so the Effect above will call showNotification() .\n\nWhen you\u2019re not sure whether some code should be in an Effect or in an event handler, ask yourself why this code needs to run. Use Effects only for code that should run because the component was displayed to the user. In this example, the notification should appear because the user pressed the button , not because the page was displayed! Delete the Effect and put the shared logic into a function called from both event handlers:\n\n\n```javascript\nfunctionProductPage({product,addToCart}){// \u2705 Good: Event-specific logic is called from event handlersfunctionbuyProduct(){addToCart(product);showNotification(`Added${product.name}to the shopping cart!`);}functionhandleBuyClick(){buyProduct();}functionhandleCheckoutClick(){buyProduct();navigateTo('/checkout');}// ...}\n```\n\n\nThis both removes the unnecessary Effect and fixes the bug.\n\n\n### Sending a POST request\n\n\nThis Form component sends two kinds of POST requests. It sends an analytics event when it mounts. When you fill in the form and click the Submit button, it will send a POST request to the /api/register endpoint:\n\n\n```javascript\nfunctionForm(){const[firstName,setFirstName]=useState('');const[lastName,setLastName]=useState('');// \u2705 Good: This logic should run because the component was displayeduseEffect(()=>{post('/analytics/event',{eventName:'visit_form'});},[]);// \ud83d\udd34 Avoid: Event-specific logic inside an Effectconst[jsonToSubmit,setJsonToSubmit]=useState(null);useEffect(()=>{if(jsonToSubmit!==null){post('/api/register',jsonToSubmit);}},[jsonToSubmit]);functionhandleSubmit(e){e.preventDefault();setJsonToSubmit({firstName,lastName});}// ...}\n```\n\n\nLet\u2019s apply the same criteria as in the example before.\n\nThe analytics POST request should remain in an Effect. This is because the reason to send the analytics event is that the form was displayed. (It would fire twice in development, but see here for how to deal with that.)\n\nHowever, the /api/register POST request is not caused by the form being displayed . You only want to send the request at one specific moment in time: when the user presses the button. It should only ever happen on that particular interaction . Delete the second Effect and move that POST request into the event handler:\n\n\n```javascript\nfunctionForm(){const[firstName,setFirstName]=useState('');const[lastName,setLastName]=useState('');// \u2705 Good: This logic runs because the component was displayeduseEffect(()=>{post('/analytics/event',{eventName:'visit_form'});},[]);functionhandleSubmit(e){e.preventDefault();// \u2705 Good: Event-specific logic is in the event handlerpost('/api/register',{firstName,lastName});}// ...}\n```\n\n\nWhen you choose whether to put some logic into an event handler or an Effect, the main question you need to answer is what kind of logic it is from the user\u2019s perspective. If this logic is caused by a particular interaction, keep it in the event handler. If it\u2019s caused by the user seeing the component on the screen, keep it in the Effect.\n\n\n### Chains of computations\n\n\nSometimes you might feel tempted to chain Effects that each adjust a piece of state based on other state:\n\n\n```javascript\nfunctionGame(){const[card,setCard]=useState(null);const[goldCardCount,setGoldCardCount]=useState(0);const[round,setRound]=useState(1);const[isGameOver,setIsGameOver]=useState(false);// \ud83d\udd34 Avoid: Chains of Effects that adjust the state solely to trigger each otheruseEffect(()=>{if(card!==null&&card.gold){setGoldCardCount(c=>c+1);}},[card]);useEffect(()=>{if(goldCardCount>3){setRound(r=>r+1)setGoldCardCount(0);}},[goldCardCount]);useEffect(()=>{if(round>5){setIsGameOver(true);}},[round]);useEffect(()=>{alert('Good game!');},[isGameOver]);functionhandlePlaceCard(nextCard){if(isGameOver){throwError('Game already ended.');}else{setCard(nextCard);}}// ...\n```\n\n\nThere are two problems with this code.\n\nThe first problem is that it is very inefficient: the component (and its children) have to re-render between each set call in the chain. In the example above, in the worst case ( setCard \u2192 render \u2192 setGoldCardCount \u2192 render \u2192 setRound \u2192 render \u2192 setIsGameOver \u2192 render) there are three unnecessary re-renders of the tree below.\n\nThe second problem is that even if it weren\u2019t slow, as your code evolves, you will run into cases where the \u201cchain\u201d you wrote doesn\u2019t fit the new requirements. Imagine you are adding a way to step through the history of the game moves. You\u2019d do it by updating each state variable to a value from the past. However, setting the card state to a value from the past would trigger the Effect chain again and change the data you\u2019re showing. Such code is often rigid and fragile.\n\nIn this case, it\u2019s better to calculate what you can during rendering, and adjust the state in the event handler:\n\n\n```javascript\nfunctionGame(){const[card,setCard]=useState(null);const[goldCardCount,setGoldCardCount]=useState(0);const[round,setRound]=useState(1);// \u2705 Calculate what you can during renderingconstisGameOver=round>5;functionhandlePlaceCard(nextCard){if(isGameOver){throwError('Game already ended.');}// \u2705 Calculate all the next state in the event handlersetCard(nextCard);if(nextCard.gold){if(goldCardCount<=3){setGoldCardCount(goldCardCount+1);}else{setGoldCardCount(0);setRound(round+1);if(round===5){alert('Good game!');}}}}// ...\n```\n\n\nThis is a lot more efficient. Also, if you implement a way to view game history, now you will be able to set each state variable to a move from the past without triggering the Effect chain that adjusts every other value. If you need to reuse logic between several event handlers, you can extract a function and call it from those handlers.\n\nRemember that inside event handlers, state behaves like a snapshot. For example, even after you call setRound(round + 1) , the round variable will reflect the value at the time the user clicked the button. If you need to use the next value for calculations, define it manually like const nextRound = round + 1 .\n\nIn some cases, you can\u2019t calculate the next state directly in the event handler. For example, imagine a form with multiple dropdowns where the options of the next dropdown depend on the selected value of the previous dropdown. Then, a chain of Effects is appropriate because you are synchronizing with network.\n\n\n### Initializing the application\n\n\nSome logic should only run once when the app loads.\n\nYou might be tempted to place it in an Effect in the top-level component:\n\n\n```javascript\nfunctionApp(){// \ud83d\udd34 Avoid: Effects with logic that should only ever run onceuseEffect(()=>{loadDataFromLocalStorage();checkAuthToken();},[]);// ...}\n```\n\n\nHowever, you\u2019ll quickly discover that it runs twice in development. This can cause issues\u2014for example, maybe it invalidates the authentication token because the function wasn\u2019t designed to be called twice. In general, your components should be resilient to being remounted. This includes your top-level App component.\n\nAlthough it may not ever get remounted in practice in production, following the same constraints in all components makes it easier to move and reuse code. If some logic must run once per app load rather than once per component mount , add a top-level variable to track whether it has already executed:\n\n\n```javascript\nletdidInit=false;functionApp(){useEffect(()=>{if(!didInit){didInit=true;// \u2705 Only runs once per app loadloadDataFromLocalStorage();checkAuthToken();}},[]);// ...}\n```\n\n\nYou can also run it during module initialization and before the app renders:\n\n\n```javascript\nif(typeofwindow!=='undefined'){// Check if we're running in the browser.// \u2705 Only runs once per app loadcheckAuthToken();loadDataFromLocalStorage();}functionApp(){// ...}\n```\n\n\nCode at the top level runs once when your component is imported\u2014even if it doesn\u2019t end up being rendered. To avoid slowdown or surprising behavior when importing arbitrary components, don\u2019t overuse this pattern. Keep app-wide initialization logic to root component modules like App.js or in your application\u2019s entry point.\n\n\n### Notifying parent components about state changes\n\n\nLet\u2019s say you\u2019re writing a Toggle component with an internal isOn state which can be either true or false . There are a few different ways to toggle it (by clicking or dragging). You want to notify the parent component whenever the Toggle internal state changes, so you expose an onChange event and call it from an Effect:\n\n\n```javascript\nfunctionToggle({onChange}){const[isOn,setIsOn]=useState(false);// \ud83d\udd34 Avoid: The onChange handler runs too lateuseEffect(()=>{onChange(isOn);},[isOn,onChange])functionhandleClick(){setIsOn(!isOn);}functionhandleDragEnd(e){if(isCloserToRightEdge(e)){setIsOn(true);}else{setIsOn(false);}}// ...}\n```\n\n\nLike earlier, this is not ideal. The Toggle updates its state first, and React updates the screen. Then React runs the Effect, which calls the onChange function passed from a parent component. Now the parent component will update its own state, starting another render pass. It would be better to do everything in a single pass.\n\nDelete the Effect and instead update the state of both components within the same event handler:\n\n\n```javascript\nfunctionToggle({onChange}){const[isOn,setIsOn]=useState(false);functionupdateToggle(nextIsOn){// \u2705 Good: Perform all updates during the event that caused themsetIsOn(nextIsOn);onChange(nextIsOn);}functionhandleClick(){updateToggle(!isOn);}functionhandleDragEnd(e){if(isCloserToRightEdge(e)){updateToggle(true);}else{updateToggle(false);}}// ...}\n```\n\n\nWith this approach, both the Toggle component and its parent component update their state during the event. React batches updates from different components together, so there will only be one render pass.\n\nYou might also be able to remove the state altogether, and instead receive isOn from the parent component:\n\n\n```javascript\n// \u2705 Also good: the component is fully controlled by its parentfunctionToggle({isOn,onChange}){functionhandleClick(){onChange(!isOn);}functionhandleDragEnd(e){if(isCloserToRightEdge(e)){onChange(true);}else{onChange(false);}}// ...}\n```\n\n\n\u201cLifting state up\u201d lets the parent component fully control the Toggle by toggling the parent\u2019s own state. This means the parent component will have to contain more logic, but there will be less state overall to worry about. Whenever you try to keep two different state variables synchronized, try lifting state up instead!\n\n\n### Passing data to the parent\n\n\nThis Child component fetches some data and then passes it to the Parent component in an Effect:\n\n\n```javascript\nfunctionParent(){const[data,setData]=useState(null);// ...return<ChildonFetched={setData}/>;}functionChild({onFetched}){constdata=useSomeAPI();// \ud83d\udd34 Avoid: Passing data to the parent in an EffectuseEffect(()=>{if(data){onFetched(data);}},[onFetched,data]);// ...}\n```\n\n\nIn React, data flows from the parent components to their children. When you see something wrong on the screen, you can trace where the information comes from by going up the component chain until you find which component passes the wrong prop or has the wrong state. When child components update the state of their parent components in Effects, the data flow becomes very difficult to trace. Since both the child and the parent need the same data, let the parent component fetch that data, and pass it down to the child instead:\n\n\n```javascript\nfunctionParent(){constdata=useSomeAPI();// ...// \u2705 Good: Passing data down to the childreturn<Childdata={data}/>;}functionChild({data}){// ...}\n```\n\n\nThis is simpler and keeps the data flow predictable: the data flows down from the parent to the child.\n\n\n### Subscribing to an external store\n\n\nSometimes, your components may need to subscribe to some data outside of the React state. This data could be from a third-party library or a built-in browser API. Since this data can change without React\u2019s knowledge, you need to manually subscribe your components to it. This is often done with an Effect, for example:\n\n\n```javascript\nfunctionuseOnlineStatus(){// Not ideal: Manual store subscription in an Effectconst[isOnline,setIsOnline]=useState(true);useEffect(()=>{functionupdateState(){setIsOnline(navigator.onLine);}updateState();window.addEventListener('online',updateState);window.addEventListener('offline',updateState);return()=>{window.removeEventListener('online',updateState);window.removeEventListener('offline',updateState);};},[]);returnisOnline;}functionChatIndicator(){constisOnline=useOnlineStatus();// ...}\n```\n\n\nHere, the component subscribes to an external data store (in this case, the browser navigator.onLine API). Since this API does not exist on the server (so it can\u2019t be used for the initial HTML), initially the state is set to true . Whenever the value of that data store changes in the browser, the component updates its state.\n\nAlthough it\u2019s common to use Effects for this, React has a purpose-built Hook for subscribing to an external store that is preferred instead. Delete the Effect and replace it with a call to useSyncExternalStore :\n\n\n```javascript\nfunctionsubscribe(callback){window.addEventListener('online',callback);window.addEventListener('offline',callback);return()=>{window.removeEventListener('online',callback);window.removeEventListener('offline',callback);};}functionuseOnlineStatus(){// \u2705 Good: Subscribing to an external store with a built-in HookreturnuseSyncExternalStore(subscribe,// React won't resubscribe for as long as you pass the same function()=>navigator.onLine,// How to get the value on the client()=>true// How to get the value on the server);}functionChatIndicator(){constisOnline=useOnlineStatus();// ...}\n```\n\n\nThis approach is less error-prone than manually syncing mutable data to React state with an Effect. Typically, you\u2019ll write a custom Hook like useOnlineStatus() above so that you don\u2019t need to repeat this code in the individual components. Read more about subscribing to external stores from React components.\n\n\n### Fetching data\n\n\nMany apps use Effects to kick off data fetching. It is quite common to write a data fetching Effect like this:\n\n\n```javascript\nfunctionSearchResults({query}){const[results,setResults]=useState([]);const[page,setPage]=useState(1);useEffect(()=>{// \ud83d\udd34 Avoid: Fetching without cleanup logicfetchResults(query,page).then(json=>{setResults(json);});},[query,page]);functionhandleNextPageClick(){setPage(page+1);}// ...}\n```\n\n\nYou don\u2019t need to move this fetch to an event handler.\n\nThis might seem like a contradiction with the earlier examples where you needed to put the logic into the event handlers! However, consider that it\u2019s not the typing event that\u2019s the main reason to fetch. Search inputs are often prepopulated from the URL, and the user might navigate Back and Forward without touching the input.\n\nIt doesn\u2019t matter where page and query come from. While this component is visible, you want to keep results synchronized with data from the network for the current page and query . This is why it\u2019s an Effect.\n\nHowever, the code above has a bug. Imagine you type \"hello\" fast. Then the query will change from \"h\" , to \"he\" , \"hel\" , \"hell\" , and \"hello\" . This will kick off separate fetches, but there is no guarantee about which order the responses will arrive in. For example, the \"hell\" response may arrive after the \"hello\" response. Since it will call setResults() last, you will be displaying the wrong search results. This is called a \u201crace condition\u201d : two different requests \u201craced\u201d against each other and came in a different order than you expected.\n\nTo fix the race condition, you need to add a cleanup function to ignore stale responses:\n\n\n```javascript\nfunctionSearchResults({query}){const[results,setResults]=useState([]);const[page,setPage]=useState(1);useEffect(()=>{letignore=false;fetchResults(query,page).then(json=>{if(!ignore){setResults(json);}});return()=>{ignore=true;};},[query,page]);functionhandleNextPageClick(){setPage(page+1);}// ...}\n```\n\n\nThis ensures that when your Effect fetches data, all responses except the last requested one will be ignored.\n\nHandling race conditions is not the only difficulty with implementing data fetching. You might also want to think about caching responses (so that the user can click Back and see the previous screen instantly), how to fetch data on the server (so that the initial server-rendered HTML contains the fetched content instead of a spinner), and how to avoid network waterfalls (so that a child can fetch data without waiting for every parent).\n\nThese issues apply to any UI library, not just React. Solving them is not trivial, which is why modern frameworks provide more efficient built-in data fetching mechanisms than fetching data in Effects.\n\nIf you don\u2019t use a framework (and don\u2019t want to build your own) but would like to make data fetching from Effects more ergonomic, consider extracting your fetching logic into a custom Hook like in this example:\n\n\n```javascript\nfunctionSearchResults({query}){const[page,setPage]=useState(1);constparams=newURLSearchParams({query,page});constresults=useData(`/api/search?${params}`);functionhandleNextPageClick(){setPage(page+1);}// ...}functionuseData(url){const[data,setData]=useState(null);useEffect(()=>{letignore=false;fetch(url).then(response=>response.json()).then(json=>{if(!ignore){setData(json);}});return()=>{ignore=true;};},[url]);returndata;}\n```\n\n\nYou\u2019ll likely also want to add some logic for error handling and to track whether the content is loading. You can build a Hook like this yourself or use one of the many solutions already available in the React ecosystem. Although this alone won\u2019t be as efficient as using a framework\u2019s built-in data fetching mechanism, moving the data fetching logic into a custom Hook will make it easier to adopt an efficient data fetching strategy later.\n\nIn general, whenever you have to resort to writing Effects, keep an eye out for when you can extract a piece of functionality into a custom Hook with a more declarative and purpose-built API like useData above. The fewer raw useEffect calls you have in your components, the easier you will find to maintain your application.", "source": "https://react.dev/learn/you-might-not-need-an-effect", "category": "You Might Not Need an Effect"}
{"instruction": "Show me a code example of How to remove unnecessary Effects in React.", "input": "", "output": "There are two common cases in which you don\u2019t need Effects:\n\n* You don\u2019t need Effects to transform data for rendering. For example, let\u2019s say you want to filter a list before displaying it. You might feel tempted to write an Effect that updates a state variable when the list changes. However, this is inefficient. When you update the state, React will first call your component functions to calculate what should be on the screen. Then React will \u201ccommit\u201d these changes to the DOM, updating the screen. Then React will run your Effects. If your Effect also immediately updates the state, this restarts the whole process from scratch! To avoid the unnecessary render passes, transform all the data at the top level of your components. That code will automatically re-run whenever your props or state change.\n* You don\u2019t need Effects to handle user events. For example, let\u2019s say you want to send an /api/buy POST request and show a notification when the user buys a product. In the Buy button click event handler, you know exactly what happened. By the time an Effect runs, you don\u2019t know what the user did (for example, which button was clicked). This is why you\u2019ll usually handle user events in the corresponding event handlers.\n\nYou do need Effects to synchronize with external systems. For example, you can write an Effect that keeps a jQuery widget synchronized with the React state. You can also fetch data with Effects: for example, you can synchronize the search results with the current search query. Keep in mind that modern frameworks provide more efficient built-in data fetching mechanisms than writing Effects directly in your components.\n\nTo help you gain the right intuition, let\u2019s look at some common concrete examples!\n\n\n### Updating state based on props or state\n\n\nSuppose you have a component with two state variables: firstName and lastName . You want to calculate a fullName from them by concatenating them. Moreover, you\u2019d like fullName to update whenever firstName or lastName change. Your first instinct might be to add a fullName state variable and update it in an Effect:\n\n\n```javascript\nfunctionForm(){const[firstName,setFirstName]=useState('Taylor');const[lastName,setLastName]=useState('Swift');// \ud83d\udd34 Avoid: redundant state and unnecessary Effectconst[fullName,setFullName]=useState('');useEffect(()=>{setFullName(firstName+' '+lastName);},[firstName,lastName]);// ...}\n```\n\n\nThis is more complicated than necessary. It is inefficient too: it does an entire render pass with a stale value for fullName , then immediately re-renders with the updated value. Remove the state variable and the Effect:\n\n\n```javascript\nfunctionForm(){const[firstName,setFirstName]=useState('Taylor');const[lastName,setLastName]=useState('Swift');// \u2705 Good: calculated during renderingconstfullName=firstName+' '+lastName;// ...}\n```\n\n\nWhen something can be calculated from the existing props or state, don\u2019t put it in state. Instead, calculate it during rendering. This makes your code faster (you avoid the extra \u201ccascading\u201d updates), simpler (you remove some code), and less error-prone (you avoid bugs caused by different state variables getting out of sync with each other). If this approach feels new to you, Thinking in React explains what should go into state.\n\n\n### Caching expensive calculations\n\n\nThis component computes visibleTodos by taking the todos it receives by props and filtering them according to the filter prop. You might feel tempted to store the result in state and update it from an Effect:\n\n\n```javascript\nfunctionTodoList({todos,filter}){const[newTodo,setNewTodo]=useState('');// \ud83d\udd34 Avoid: redundant state and unnecessary Effectconst[visibleTodos,setVisibleTodos]=useState([]);useEffect(()=>{setVisibleTodos(getFilteredTodos(todos,filter));},[todos,filter]);// ...}\n```\n\n\nLike in the earlier example, this is both unnecessary and inefficient. First, remove the state and the Effect:\n\n\n```javascript\nfunctionTodoList({todos,filter}){const[newTodo,setNewTodo]=useState('');// \u2705 This is fine if getFilteredTodos() is not slow.constvisibleTodos=getFilteredTodos(todos,filter);// ...}\n```\n\n\nUsually, this code is fine! But maybe getFilteredTodos() is slow or you have a lot of todos . In that case you don\u2019t want to recalculate getFilteredTodos() if some unrelated state variable like newTodo has changed.\n\nYou can cache (or \u201cmemoize\u201d ) an expensive calculation by wrapping it in a useMemo Hook:\n\n\n### Note\n\n\nReact Compiler can automatically memoize expensive calculations for you, eliminating the need for manual useMemo in many cases.\n\n\n```javascript\nimport{useMemo,useState}from'react';functionTodoList({todos,filter}){const[newTodo,setNewTodo]=useState('');constvisibleTodos=useMemo(()=>{// \u2705 Does not re-run unless todos or filter changereturngetFilteredTodos(todos,filter);},[todos,filter]);// ...}\n```\n\n\nOr, written as a single line:\n\n\n```javascript\nimport{useMemo,useState}from'react';functionTodoList({todos,filter}){const[newTodo,setNewTodo]=useState('');// \u2705 Does not re-run getFilteredTodos() unless todos or filter changeconstvisibleTodos=useMemo(()=>getFilteredTodos(todos,filter),[todos,filter]);// ...}\n```\n\n\nThis tells React that you don\u2019t want the inner function to re-run unless either todos or filter have changed. React will remember the return value of getFilteredTodos() during the initial render. During the next renders, it will check if todos or filter are different. If they\u2019re the same as last time, useMemo will return the last result it has stored. But if they are different, React will call the inner function again (and store its result).\n\nThe function you wrap in useMemo runs during rendering, so this only works for pure calculations.\n\nIn general, unless you\u2019re creating or looping over thousands of objects, it\u2019s probably not expensive. If you want to get more confidence, you can add a console log to measure the time spent in a piece of code:\n\n\n```javascript\nconsole.time('filter array');constvisibleTodos=getFilteredTodos(todos,filter);console.timeEnd('filter array');\n```\n\n\nPerform the interaction you\u2019re measuring (for example, typing into the input). You will then see logs like filter array: 0.15ms in your console. If the overall logged time adds up to a significant amount (say, 1ms or more), it might make sense to memoize that calculation. As an experiment, you can then wrap the calculation in useMemo to verify whether the total logged time has decreased for that interaction or not:\n\n\n```javascript\nconsole.time('filter array');constvisibleTodos=useMemo(()=>{returngetFilteredTodos(todos,filter);// Skipped if todos and filter haven't changed},[todos,filter]);console.timeEnd('filter array');\n```\n\n\nuseMemo won\u2019t make the first render faster. It only helps you skip unnecessary work on updates.\n\nKeep in mind that your machine is probably faster than your users\u2019 so it\u2019s a good idea to test the performance with an artificial slowdown. For example, Chrome offers a CPU Throttling option for this.\n\nAlso note that measuring performance in development will not give you the most accurate results. (For example, when Strict Mode is on, you will see each component render twice rather than once.) To get the most accurate timings, build your app for production and test it on a device like your users have.\n\n\n### Resetting all state when a prop changes\n\n\nThis ProfilePage component receives a userId prop. The page contains a comment input, and you use a comment state variable to hold its value. One day, you notice a problem: when you navigate from one profile to another, the comment state does not get reset. As a result, it\u2019s easy to accidentally post a comment on a wrong user\u2019s profile. To fix the issue, you want to clear out the comment state variable whenever the userId changes:\n\n\n```javascript\nexportdefaultfunctionProfilePage({userId}){const[comment,setComment]=useState('');// \ud83d\udd34 Avoid: Resetting state on prop change in an EffectuseEffect(()=>{setComment('');},[userId]);// ...}\n```\n\n\nThis is inefficient because ProfilePage and its children will first render with the stale value, and then render again. It is also complicated because you\u2019d need to do this in every component that has some state inside ProfilePage . For example, if the comment UI is nested, you\u2019d want to clear out nested comment state too.\n\nInstead, you can tell React that each user\u2019s profile is conceptually a different profile by giving it an explicit key. Split your component in two and pass a key attribute from the outer component to the inner one:\n\n\n```javascript\nexportdefaultfunctionProfilePage({userId}){return(<ProfileuserId={userId}key={userId}/>);}functionProfile({userId}){// \u2705 This and any other state below will reset on key change automaticallyconst[comment,setComment]=useState('');// ...}\n```\n\n\nNormally, React preserves the state when the same component is rendered in the same spot. By passing userId as a key to the Profile component, you\u2019re asking React to treat two Profile components with different userId as two different components that should not share any state. Whenever the key (which you\u2019ve set to userId ) changes, React will recreate the DOM and reset the state of the Profile component and all of its children. Now the comment field will clear out automatically when navigating between profiles.\n\nNote that in this example, only the outer ProfilePage component is exported and visible to other files in the project. Components rendering ProfilePage don\u2019t need to pass the key to it: they pass userId as a regular prop. The fact ProfilePage passes it as a key to the inner Profile component is an implementation detail.\n\n\n### Adjusting some state when a prop changes\n\n\nSometimes, you might want to reset or adjust a part of the state on a prop change, but not all of it.\n\nThis List component receives a list of items as a prop, and maintains the selected item in the selection state variable. You want to reset the selection to null whenever the items prop receives a different array:\n\n\n```javascript\nfunctionList({items}){const[isReverse,setIsReverse]=useState(false);const[selection,setSelection]=useState(null);// \ud83d\udd34 Avoid: Adjusting state on prop change in an EffectuseEffect(()=>{setSelection(null);},[items]);// ...}\n```\n\n\nThis, too, is not ideal. Every time the items change, the List and its child components will render with a stale selection value at first. Then React will update the DOM and run the Effects. Finally, the setSelection(null) call will cause another re-render of the List and its child components, restarting this whole process again.\n\nStart by deleting the Effect. Instead, adjust the state directly during rendering:\n\n\n```javascript\nfunctionList({items}){const[isReverse,setIsReverse]=useState(false);const[selection,setSelection]=useState(null);// Better: Adjust the state while renderingconst[prevItems,setPrevItems]=useState(items);if(items!==prevItems){setPrevItems(items);setSelection(null);}// ...}\n```\n\n\nStoring information from previous renders like this can be hard to understand, but it\u2019s better than updating the same state in an Effect. In the above example, setSelection is called directly during a render. React will re-render the List immediately after it exits with a return statement. React has not rendered the List children or updated the DOM yet, so this lets the List children skip rendering the stale selection value.\n\nWhen you update a component during rendering, React throws away the returned JSX and immediately retries rendering. To avoid very slow cascading retries, React only lets you update the same component\u2019s state during a render. If you update another component\u2019s state during a render, you\u2019ll see an error. A condition like items !== prevItems is necessary to avoid loops. You may adjust state like this, but any other side effects (like changing the DOM or setting timeouts) should stay in event handlers or Effects to keep components pure.\n\nAlthough this pattern is more efficient than an Effect, most components shouldn\u2019t need it either. No matter how you do it, adjusting state based on props or other state makes your data flow more difficult to understand and debug. Always check whether you can reset all state with a key or calculate everything during rendering instead. For example, instead of storing (and resetting) the selected item , you can store the selected item ID:\n\n\n```javascript\nfunctionList({items}){const[isReverse,setIsReverse]=useState(false);const[selectedId,setSelectedId]=useState(null);// \u2705 Best: Calculate everything during renderingconstselection=items.find(item=>item.id===selectedId)??null;// ...}\n```\n\n\nNow there is no need to \u201cadjust\u201d the state at all. If the item with the selected ID is in the list, it remains selected. If it\u2019s not, the selection calculated during rendering will be null because no matching item was found. This behavior is different, but arguably better because most changes to items preserve the selection.\n\n\n### Sharing logic between event handlers\n\n\nLet\u2019s say you have a product page with two buttons (Buy and Checkout) that both let you buy that product. You want to show a notification whenever the user puts the product in the cart. Calling showNotification() in both buttons\u2019 click handlers feels repetitive so you might be tempted to place this logic in an Effect:\n\n\n```javascript\nfunctionProductPage({product,addToCart}){// \ud83d\udd34 Avoid: Event-specific logic inside an EffectuseEffect(()=>{if(product.isInCart){showNotification(`Added${product.name}to the shopping cart!`);}},[product]);functionhandleBuyClick(){addToCart(product);}functionhandleCheckoutClick(){addToCart(product);navigateTo('/checkout');}// ...}\n```\n\n\nThis Effect is unnecessary. It will also most likely cause bugs. For example, let\u2019s say that your app \u201cremembers\u201d the shopping cart between the page reloads. If you add a product to the cart once and refresh the page, the notification will appear again. It will keep appearing every time you refresh that product\u2019s page. This is because product.isInCart will already be true on the page load, so the Effect above will call showNotification() .\n\nWhen you\u2019re not sure whether some code should be in an Effect or in an event handler, ask yourself why this code needs to run. Use Effects only for code that should run because the component was displayed to the user. In this example, the notification should appear because the user pressed the button , not because the page was displayed! Delete the Effect and put the shared logic into a function called from both event handlers:\n\n\n```javascript\nfunctionProductPage({product,addToCart}){// \u2705 Good: Event-specific logic is called from event handlersfunctionbuyProduct(){addToCart(product);showNotification(`Added${product.name}to the shopping cart!`);}functionhandleBuyClick(){buyProduct();}functionhandleCheckoutClick(){buyProduct();navigateTo('/checkout');}// ...}\n```\n\n\nThis both removes the unnecessary Effect and fixes the bug.\n\n\n### Sending a POST request\n\n\nThis Form component sends two kinds of POST requests. It sends an analytics event when it mounts. When you fill in the form and click the Submit button, it will send a POST request to the /api/register endpoint:\n\n\n```javascript\nfunctionForm(){const[firstName,setFirstName]=useState('');const[lastName,setLastName]=useState('');// \u2705 Good: This logic should run because the component was displayeduseEffect(()=>{post('/analytics/event',{eventName:'visit_form'});},[]);// \ud83d\udd34 Avoid: Event-specific logic inside an Effectconst[jsonToSubmit,setJsonToSubmit]=useState(null);useEffect(()=>{if(jsonToSubmit!==null){post('/api/register',jsonToSubmit);}},[jsonToSubmit]);functionhandleSubmit(e){e.preventDefault();setJsonToSubmit({firstName,lastName});}// ...}\n```\n\n\nLet\u2019s apply the same criteria as in the example before.\n\nThe analytics POST request should remain in an Effect. This is because the reason to send the analytics event is that the form was displayed. (It would fire twice in development, but see here for how to deal with that.)\n\nHowever, the /api/register POST request is not caused by the form being displayed . You only want to send the request at one specific moment in time: when the user presses the button. It should only ever happen on that particular interaction . Delete the second Effect and move that POST request into the event handler:\n\n\n```javascript\nfunctionForm(){const[firstName,setFirstName]=useState('');const[lastName,setLastName]=useState('');// \u2705 Good: This logic runs because the component was displayeduseEffect(()=>{post('/analytics/event',{eventName:'visit_form'});},[]);functionhandleSubmit(e){e.preventDefault();// \u2705 Good: Event-specific logic is in the event handlerpost('/api/register',{firstName,lastName});}// ...}\n```\n\n\nWhen you choose whether to put some logic into an event handler or an Effect, the main question you need to answer is what kind of logic it is from the user\u2019s perspective. If this logic is caused by a particular interaction, keep it in the event handler. If it\u2019s caused by the user seeing the component on the screen, keep it in the Effect.\n\n\n### Chains of computations\n\n\nSometimes you might feel tempted to chain Effects that each adjust a piece of state based on other state:\n\n\n```javascript\nfunctionGame(){const[card,setCard]=useState(null);const[goldCardCount,setGoldCardCount]=useState(0);const[round,setRound]=useState(1);const[isGameOver,setIsGameOver]=useState(false);// \ud83d\udd34 Avoid: Chains of Effects that adjust the state solely to trigger each otheruseEffect(()=>{if(card!==null&&card.gold){setGoldCardCount(c=>c+1);}},[card]);useEffect(()=>{if(goldCardCount>3){setRound(r=>r+1)setGoldCardCount(0);}},[goldCardCount]);useEffect(()=>{if(round>5){setIsGameOver(true);}},[round]);useEffect(()=>{alert('Good game!');},[isGameOver]);functionhandlePlaceCard(nextCard){if(isGameOver){throwError('Game already ended.');}else{setCard(nextCard);}}// ...\n```\n\n\nThere are two problems with this code.\n\nThe first problem is that it is very inefficient: the component (and its children) have to re-render between each set call in the chain. In the example above, in the worst case ( setCard \u2192 render \u2192 setGoldCardCount \u2192 render \u2192 setRound \u2192 render \u2192 setIsGameOver \u2192 render) there are three unnecessary re-renders of the tree below.\n\nThe second problem is that even if it weren\u2019t slow, as your code evolves, you will run into cases where the \u201cchain\u201d you wrote doesn\u2019t fit the new requirements. Imagine you are adding a way to step through the history of the game moves. You\u2019d do it by updating each state variable to a value from the past. However, setting the card state to a value from the past would trigger the Effect chain again and change the data you\u2019re showing. Such code is often rigid and fragile.\n\nIn this case, it\u2019s better to calculate what you can during rendering, and adjust the state in the event handler:\n\n\n```javascript\nfunctionGame(){const[card,setCard]=useState(null);const[goldCardCount,setGoldCardCount]=useState(0);const[round,setRound]=useState(1);// \u2705 Calculate what you can during renderingconstisGameOver=round>5;functionhandlePlaceCard(nextCard){if(isGameOver){throwError('Game already ended.');}// \u2705 Calculate all the next state in the event handlersetCard(nextCard);if(nextCard.gold){if(goldCardCount<=3){setGoldCardCount(goldCardCount+1);}else{setGoldCardCount(0);setRound(round+1);if(round===5){alert('Good game!');}}}}// ...\n```\n\n\nThis is a lot more efficient. Also, if you implement a way to view game history, now you will be able to set each state variable to a move from the past without triggering the Effect chain that adjusts every other value. If you need to reuse logic between several event handlers, you can extract a function and call it from those handlers.\n\nRemember that inside event handlers, state behaves like a snapshot. For example, even after you call setRound(round + 1) , the round variable will reflect the value at the time the user clicked the button. If you need to use the next value for calculations, define it manually like const nextRound = round + 1 .\n\nIn some cases, you can\u2019t calculate the next state directly in the event handler. For example, imagine a form with multiple dropdowns where the options of the next dropdown depend on the selected value of the previous dropdown. Then, a chain of Effects is appropriate because you are synchronizing with network.\n\n\n### Initializing the application\n\n\nSome logic should only run once when the app loads.\n\nYou might be tempted to place it in an Effect in the top-level component:\n\n\n```javascript\nfunctionApp(){// \ud83d\udd34 Avoid: Effects with logic that should only ever run onceuseEffect(()=>{loadDataFromLocalStorage();checkAuthToken();},[]);// ...}\n```\n\n\nHowever, you\u2019ll quickly discover that it runs twice in development. This can cause issues\u2014for example, maybe it invalidates the authentication token because the function wasn\u2019t designed to be called twice. In general, your components should be resilient to being remounted. This includes your top-level App component.\n\nAlthough it may not ever get remounted in practice in production, following the same constraints in all components makes it easier to move and reuse code. If some logic must run once per app load rather than once per component mount , add a top-level variable to track whether it has already executed:\n\n\n```javascript\nletdidInit=false;functionApp(){useEffect(()=>{if(!didInit){didInit=true;// \u2705 Only runs once per app loadloadDataFromLocalStorage();checkAuthToken();}},[]);// ...}\n```\n\n\nYou can also run it during module initialization and before the app renders:\n\n\n```javascript\nif(typeofwindow!=='undefined'){// Check if we're running in the browser.// \u2705 Only runs once per app loadcheckAuthToken();loadDataFromLocalStorage();}functionApp(){// ...}\n```\n\n\nCode at the top level runs once when your component is imported\u2014even if it doesn\u2019t end up being rendered. To avoid slowdown or surprising behavior when importing arbitrary components, don\u2019t overuse this pattern. Keep app-wide initialization logic to root component modules like App.js or in your application\u2019s entry point.\n\n\n### Notifying parent components about state changes\n\n\nLet\u2019s say you\u2019re writing a Toggle component with an internal isOn state which can be either true or false . There are a few different ways to toggle it (by clicking or dragging). You want to notify the parent component whenever the Toggle internal state changes, so you expose an onChange event and call it from an Effect:\n\n\n```javascript\nfunctionToggle({onChange}){const[isOn,setIsOn]=useState(false);// \ud83d\udd34 Avoid: The onChange handler runs too lateuseEffect(()=>{onChange(isOn);},[isOn,onChange])functionhandleClick(){setIsOn(!isOn);}functionhandleDragEnd(e){if(isCloserToRightEdge(e)){setIsOn(true);}else{setIsOn(false);}}// ...}\n```\n\n\nLike earlier, this is not ideal. The Toggle updates its state first, and React updates the screen. Then React runs the Effect, which calls the onChange function passed from a parent component. Now the parent component will update its own state, starting another render pass. It would be better to do everything in a single pass.\n\nDelete the Effect and instead update the state of both components within the same event handler:\n\n\n```javascript\nfunctionToggle({onChange}){const[isOn,setIsOn]=useState(false);functionupdateToggle(nextIsOn){// \u2705 Good: Perform all updates during the event that caused themsetIsOn(nextIsOn);onChange(nextIsOn);}functionhandleClick(){updateToggle(!isOn);}functionhandleDragEnd(e){if(isCloserToRightEdge(e)){updateToggle(true);}else{updateToggle(false);}}// ...}\n```\n\n\nWith this approach, both the Toggle component and its parent component update their state during the event. React batches updates from different components together, so there will only be one render pass.\n\nYou might also be able to remove the state altogether, and instead receive isOn from the parent component:\n\n\n```javascript\n// \u2705 Also good: the component is fully controlled by its parentfunctionToggle({isOn,onChange}){functionhandleClick(){onChange(!isOn);}functionhandleDragEnd(e){if(isCloserToRightEdge(e)){onChange(true);}else{onChange(false);}}// ...}\n```\n\n\n\u201cLifting state up\u201d lets the parent component fully control the Toggle by toggling the parent\u2019s own state. This means the parent component will have to contain more logic, but there will be less state overall to worry about. Whenever you try to keep two different state variables synchronized, try lifting state up instead!\n\n\n### Passing data to the parent\n\n\nThis Child component fetches some data and then passes it to the Parent component in an Effect:\n\n\n```javascript\nfunctionParent(){const[data,setData]=useState(null);// ...return<ChildonFetched={setData}/>;}functionChild({onFetched}){constdata=useSomeAPI();// \ud83d\udd34 Avoid: Passing data to the parent in an EffectuseEffect(()=>{if(data){onFetched(data);}},[onFetched,data]);// ...}\n```\n\n\nIn React, data flows from the parent components to their children. When you see something wrong on the screen, you can trace where the information comes from by going up the component chain until you find which component passes the wrong prop or has the wrong state. When child components update the state of their parent components in Effects, the data flow becomes very difficult to trace. Since both the child and the parent need the same data, let the parent component fetch that data, and pass it down to the child instead:\n\n\n```javascript\nfunctionParent(){constdata=useSomeAPI();// ...// \u2705 Good: Passing data down to the childreturn<Childdata={data}/>;}functionChild({data}){// ...}\n```\n\n\nThis is simpler and keeps the data flow predictable: the data flows down from the parent to the child.\n\n\n### Subscribing to an external store\n\n\nSometimes, your components may need to subscribe to some data outside of the React state. This data could be from a third-party library or a built-in browser API. Since this data can change without React\u2019s knowledge, you need to manually subscribe your components to it. This is often done with an Effect, for example:\n\n\n```javascript\nfunctionuseOnlineStatus(){// Not ideal: Manual store subscription in an Effectconst[isOnline,setIsOnline]=useState(true);useEffect(()=>{functionupdateState(){setIsOnline(navigator.onLine);}updateState();window.addEventListener('online',updateState);window.addEventListener('offline',updateState);return()=>{window.removeEventListener('online',updateState);window.removeEventListener('offline',updateState);};},[]);returnisOnline;}functionChatIndicator(){constisOnline=useOnlineStatus();// ...}\n```\n\n\nHere, the component subscribes to an external data store (in this case, the browser navigator.onLine API). Since this API does not exist on the server (so it can\u2019t be used for the initial HTML), initially the state is set to true . Whenever the value of that data store changes in the browser, the component updates its state.\n\nAlthough it\u2019s common to use Effects for this, React has a purpose-built Hook for subscribing to an external store that is preferred instead. Delete the Effect and replace it with a call to useSyncExternalStore :\n\n\n```javascript\nfunctionsubscribe(callback){window.addEventListener('online',callback);window.addEventListener('offline',callback);return()=>{window.removeEventListener('online',callback);window.removeEventListener('offline',callback);};}functionuseOnlineStatus(){// \u2705 Good: Subscribing to an external store with a built-in HookreturnuseSyncExternalStore(subscribe,// React won't resubscribe for as long as you pass the same function()=>navigator.onLine,// How to get the value on the client()=>true// How to get the value on the server);}functionChatIndicator(){constisOnline=useOnlineStatus();// ...}\n```\n\n\nThis approach is less error-prone than manually syncing mutable data to React state with an Effect. Typically, you\u2019ll write a custom Hook like useOnlineStatus() above so that you don\u2019t need to repeat this code in the individual components. Read more about subscribing to external stores from React components.\n\n\n### Fetching data\n\n\nMany apps use Effects to kick off data fetching. It is quite common to write a data fetching Effect like this:\n\n\n```javascript\nfunctionSearchResults({query}){const[results,setResults]=useState([]);const[page,setPage]=useState(1);useEffect(()=>{// \ud83d\udd34 Avoid: Fetching without cleanup logicfetchResults(query,page).then(json=>{setResults(json);});},[query,page]);functionhandleNextPageClick(){setPage(page+1);}// ...}\n```\n\n\nYou don\u2019t need to move this fetch to an event handler.\n\nThis might seem like a contradiction with the earlier examples where you needed to put the logic into the event handlers! However, consider that it\u2019s not the typing event that\u2019s the main reason to fetch. Search inputs are often prepopulated from the URL, and the user might navigate Back and Forward without touching the input.\n\nIt doesn\u2019t matter where page and query come from. While this component is visible, you want to keep results synchronized with data from the network for the current page and query . This is why it\u2019s an Effect.\n\nHowever, the code above has a bug. Imagine you type \"hello\" fast. Then the query will change from \"h\" , to \"he\" , \"hel\" , \"hell\" , and \"hello\" . This will kick off separate fetches, but there is no guarantee about which order the responses will arrive in. For example, the \"hell\" response may arrive after the \"hello\" response. Since it will call setResults() last, you will be displaying the wrong search results. This is called a \u201crace condition\u201d : two different requests \u201craced\u201d against each other and came in a different order than you expected.\n\nTo fix the race condition, you need to add a cleanup function to ignore stale responses:\n\n\n```javascript\nfunctionSearchResults({query}){const[results,setResults]=useState([]);const[page,setPage]=useState(1);useEffect(()=>{letignore=false;fetchResults(query,page).then(json=>{if(!ignore){setResults(json);}});return()=>{ignore=true;};},[query,page]);functionhandleNextPageClick(){setPage(page+1);}// ...}\n```\n\n\nThis ensures that when your Effect fetches data, all responses except the last requested one will be ignored.\n\nHandling race conditions is not the only difficulty with implementing data fetching. You might also want to think about caching responses (so that the user can click Back and see the previous screen instantly), how to fetch data on the server (so that the initial server-rendered HTML contains the fetched content instead of a spinner), and how to avoid network waterfalls (so that a child can fetch data without waiting for every parent).\n\nThese issues apply to any UI library, not just React. Solving them is not trivial, which is why modern frameworks provide more efficient built-in data fetching mechanisms than fetching data in Effects.\n\nIf you don\u2019t use a framework (and don\u2019t want to build your own) but would like to make data fetching from Effects more ergonomic, consider extracting your fetching logic into a custom Hook like in this example:\n\n\n```javascript\nfunctionSearchResults({query}){const[page,setPage]=useState(1);constparams=newURLSearchParams({query,page});constresults=useData(`/api/search?${params}`);functionhandleNextPageClick(){setPage(page+1);}// ...}functionuseData(url){const[data,setData]=useState(null);useEffect(()=>{letignore=false;fetch(url).then(response=>response.json()).then(json=>{if(!ignore){setData(json);}});return()=>{ignore=true;};},[url]);returndata;}\n```\n\n\nYou\u2019ll likely also want to add some logic for error handling and to track whether the content is loading. You can build a Hook like this yourself or use one of the many solutions already available in the React ecosystem. Although this alone won\u2019t be as efficient as using a framework\u2019s built-in data fetching mechanism, moving the data fetching logic into a custom Hook will make it easier to adopt an efficient data fetching strategy later.\n\nIn general, whenever you have to resort to writing Effects, keep an eye out for when you can extract a piece of functionality into a custom Hook with a more declarative and purpose-built API like useData above. The fewer raw useEffect calls you have in your components, the easier you will find to maintain your application.", "source": "https://react.dev/learn/you-might-not-need-an-effect", "category": "You Might Not Need an Effect"}
{"instruction": "Can you describe Components: UI building blocks in the context of React?", "input": "", "output": "On the Web, HTML lets us create rich structured documents with its built-in set of tags like <h1> and <li> :\n\n\n```javascript\n<article><h1>My First Component</h1><ol><li>Components: UI Building Blocks</li><li>Defining a Component</li><li>Using a Component</li></ol></article>\n```\n\n\nThis markup represents this article <article> , its heading <h1> , and an (abbreviated) table of contents as an ordered list <ol> . Markup like this, combined with CSS for style, and JavaScript for interactivity, lies behind every sidebar, avatar, modal, dropdown\u2014every piece of UI you see on the Web.\n\nReact lets you combine your markup, CSS, and JavaScript into custom \u201ccomponents\u201d, reusable UI elements for your app. The table of contents code you saw above could be turned into a <TableOfContents /> component you could render on every page. Under the hood, it still uses the same HTML tags like <article> , <h1> , etc.\n\nJust like with HTML tags, you can compose, order and nest components to design whole pages. For example, the documentation page you\u2019re reading is made out of React components:\n\n\n```javascript\n<PageLayout><NavigationHeader><SearchBar/><Linkto=\"/docs\">Docs</Link></NavigationHeader><Sidebar/><PageContent><TableOfContents/><DocumentationText/></PageContent></PageLayout>\n```\n\n\nAs your project grows, you will notice that many of your designs can be composed by reusing components you already wrote, speeding up your development. Our table of contents above could be added to any screen with <TableOfContents /> ! You can even jumpstart your project with the thousands of components shared by the React open source community like Chakra UI and Material UI.", "source": "https://react.dev/learn/your-first-component", "category": "Your First Component"}
{"instruction": "Show me a code example of Components: UI building blocks in React.", "input": "", "output": "On the Web, HTML lets us create rich structured documents with its built-in set of tags like <h1> and <li> :\n\n\n```javascript\n<article><h1>My First Component</h1><ol><li>Components: UI Building Blocks</li><li>Defining a Component</li><li>Using a Component</li></ol></article>\n```\n\n\nThis markup represents this article <article> , its heading <h1> , and an (abbreviated) table of contents as an ordered list <ol> . Markup like this, combined with CSS for style, and JavaScript for interactivity, lies behind every sidebar, avatar, modal, dropdown\u2014every piece of UI you see on the Web.\n\nReact lets you combine your markup, CSS, and JavaScript into custom \u201ccomponents\u201d, reusable UI elements for your app. The table of contents code you saw above could be turned into a <TableOfContents /> component you could render on every page. Under the hood, it still uses the same HTML tags like <article> , <h1> , etc.\n\nJust like with HTML tags, you can compose, order and nest components to design whole pages. For example, the documentation page you\u2019re reading is made out of React components:\n\n\n```javascript\n<PageLayout><NavigationHeader><SearchBar/><Linkto=\"/docs\">Docs</Link></NavigationHeader><Sidebar/><PageContent><TableOfContents/><DocumentationText/></PageContent></PageLayout>\n```\n\n\nAs your project grows, you will notice that many of your designs can be composed by reusing components you already wrote, speeding up your development. Our table of contents above could be added to any screen with <TableOfContents /> ! You can even jumpstart your project with the thousands of components shared by the React open source community like Chakra UI and Material UI.", "source": "https://react.dev/learn/your-first-component", "category": "Your First Component"}
{"instruction": "Tell me about Defining a component.", "input": "", "output": "Traditionally when creating web pages, web developers marked up their content and then added interaction by sprinkling on some JavaScript. This worked great when interaction was a nice-to-have on the web. Now it is expected for many sites and all apps. React puts interactivity first while still using the same technology: a React component is a JavaScript function that you can sprinkle with markup . Here\u2019s what that looks like (you can edit the example below):\n\n\n```javascript\nexportdefaultfunctionProfile(){return(<imgsrc=\"https://i.imgur.com/MK3eW3Am.jpg\"alt=\"Katherine Johnson\"/>)}\n```\n\n\nAnd here\u2019s how to build a component:\n\n\n### Step 1: Export the component\n\n\nThe export default prefix is a standard JavaScript syntax (not specific to React). It lets you mark the main function in a file so that you can later import it from other files. (More on importing in Importing and Exporting Components !)\n\n\n### Step 2: Define the function\n\n\nWith function Profile() { } you define a JavaScript function with the name Profile .\n\n\n### Pitfall\n\n\nReact components are regular JavaScript functions, but their names must start with a capital letter or they won\u2019t work!\n\n\n### Step 3: Add markup\n\n\nThe component returns an <img /> tag with src and alt attributes. <img /> is written like HTML, but it is actually JavaScript under the hood! This syntax is called JSX , and it lets you embed markup inside JavaScript.\n\nReturn statements can be written all on one line, as in this component:\n\n\n```javascript\nreturn<imgsrc=\"https://i.imgur.com/MK3eW3As.jpg\"alt=\"Katherine Johnson\"/>;\n```\n\n\nBut if your markup isn\u2019t all on the same line as the return keyword, you must wrap it in a pair of parentheses:\n\n\n```javascript\nreturn(<div><imgsrc=\"https://i.imgur.com/MK3eW3As.jpg\"alt=\"Katherine Johnson\"/></div>);\n```\n\n\n\n### Pitfall\n\n\nWithout parentheses, any code on the lines after return will be ignored !", "source": "https://react.dev/learn/your-first-component", "category": "Your First Component"}
{"instruction": "Show me a code example of Defining a component in React.", "input": "", "output": "Traditionally when creating web pages, web developers marked up their content and then added interaction by sprinkling on some JavaScript. This worked great when interaction was a nice-to-have on the web. Now it is expected for many sites and all apps. React puts interactivity first while still using the same technology: a React component is a JavaScript function that you can sprinkle with markup . Here\u2019s what that looks like (you can edit the example below):\n\n\n```javascript\nexportdefaultfunctionProfile(){return(<imgsrc=\"https://i.imgur.com/MK3eW3Am.jpg\"alt=\"Katherine Johnson\"/>)}\n```\n\n\nAnd here\u2019s how to build a component:\n\n\n### Step 1: Export the component\n\n\nThe export default prefix is a standard JavaScript syntax (not specific to React). It lets you mark the main function in a file so that you can later import it from other files. (More on importing in Importing and Exporting Components !)\n\n\n### Step 2: Define the function\n\n\nWith function Profile() { } you define a JavaScript function with the name Profile .\n\n\n### Pitfall\n\n\nReact components are regular JavaScript functions, but their names must start with a capital letter or they won\u2019t work!\n\n\n### Step 3: Add markup\n\n\nThe component returns an <img /> tag with src and alt attributes. <img /> is written like HTML, but it is actually JavaScript under the hood! This syntax is called JSX , and it lets you embed markup inside JavaScript.\n\nReturn statements can be written all on one line, as in this component:\n\n\n```javascript\nreturn<imgsrc=\"https://i.imgur.com/MK3eW3As.jpg\"alt=\"Katherine Johnson\"/>;\n```\n\n\nBut if your markup isn\u2019t all on the same line as the return keyword, you must wrap it in a pair of parentheses:\n\n\n```javascript\nreturn(<div><imgsrc=\"https://i.imgur.com/MK3eW3As.jpg\"alt=\"Katherine Johnson\"/></div>);\n```\n\n\n\n### Pitfall\n\n\nWithout parentheses, any code on the lines after return will be ignored !", "source": "https://react.dev/learn/your-first-component", "category": "Your First Component"}
{"instruction": "What is Using a component in React and how does it work?", "input": "", "output": "Now that you\u2019ve defined your Profile component, you can nest it inside other components. For example, you can export a Gallery component that uses multiple Profile components:\n\n\n```javascript\nfunctionProfile(){return(<imgsrc=\"https://i.imgur.com/MK3eW3As.jpg\"alt=\"Katherine Johnson\"/>);}exportdefaultfunctionGallery(){return(<section><h1>Amazing scientists</h1><Profile/><Profile/><Profile/></section>);}\n```\n\n\n\n### What the browser sees\n\n\nNotice the difference in casing:\n\n* <section> is lowercase, so React knows we refer to an HTML tag.\n* <Profile /> starts with a capital P , so React knows that we want to use our component called Profile .\n\nAnd Profile contains even more HTML: <img /> . In the end, this is what the browser sees:\n\n\n```javascript\n<section><h1>Amazing scientists</h1><imgsrc=\"https://i.imgur.com/MK3eW3As.jpg\"alt=\"Katherine Johnson\"/><imgsrc=\"https://i.imgur.com/MK3eW3As.jpg\"alt=\"Katherine Johnson\"/><imgsrc=\"https://i.imgur.com/MK3eW3As.jpg\"alt=\"Katherine Johnson\"/></section>\n```\n\n\n\n### Nesting and organizing components\n\n\nComponents are regular JavaScript functions, so you can keep multiple components in the same file. This is convenient when components are relatively small or tightly related to each other. If this file gets crowded, you can always move Profile to a separate file. You will learn how to do this shortly on the page about imports.\n\nBecause the Profile components are rendered inside Gallery \u2014even several times!\u2014we can say that Gallery is a parent component, rendering each Profile as a \u201cchild\u201d. This is part of the magic of React: you can define a component once, and then use it in as many places and as many times as you like.\n\n\n### Pitfall\n\n\nComponents can render other components, but you must never nest their definitions:\n\n\n```javascript\nexportdefaultfunctionGallery(){// \ud83d\udd34 Never define a component inside another component!functionProfile(){// ...}// ...}\n```\n\n\nThe snippet above is very slow and causes bugs. Instead, define every component at the top level:\n\n\n```javascript\nexportdefaultfunctionGallery(){// ...}// \u2705 Declare components at the top levelfunctionProfile(){// ...}\n```\n\n\nWhen a child component needs some data from a parent, pass it by props instead of nesting definitions.\n\nYour React application begins at a \u201croot\u201d component. Usually, it is created automatically when you start a new project. For example, if you use CodeSandbox or if you use the framework Next.js , the root component is defined in pages/index.js . In these examples, you\u2019ve been exporting root components.\n\nMost React apps use components all the way down. This means that you won\u2019t only use components for reusable pieces like buttons, but also for larger pieces like sidebars, lists, and ultimately, complete pages! Components are a handy way to organize UI code and markup, even if some of them are only used once.\n\nReact-based frameworks take this a step further. Instead of using an empty HTML file and letting React \u201ctake over\u201d managing the page with JavaScript, they also generate the HTML automatically from your React components. This allows your app to show some content before the JavaScript code loads.\n\nStill, many websites only use React to add interactivity to existing HTML pages. They have many root components instead of a single one for the entire page. You can use as much\u2014or as little\u2014React as you need.", "source": "https://react.dev/learn/your-first-component", "category": "Your First Component"}
{"instruction": "Show me a code example of Using a component in React.", "input": "", "output": "Now that you\u2019ve defined your Profile component, you can nest it inside other components. For example, you can export a Gallery component that uses multiple Profile components:\n\n\n```javascript\nfunctionProfile(){return(<imgsrc=\"https://i.imgur.com/MK3eW3As.jpg\"alt=\"Katherine Johnson\"/>);}exportdefaultfunctionGallery(){return(<section><h1>Amazing scientists</h1><Profile/><Profile/><Profile/></section>);}\n```\n\n\n\n### What the browser sees\n\n\nNotice the difference in casing:\n\n* <section> is lowercase, so React knows we refer to an HTML tag.\n* <Profile /> starts with a capital P , so React knows that we want to use our component called Profile .\n\nAnd Profile contains even more HTML: <img /> . In the end, this is what the browser sees:\n\n\n```javascript\n<section><h1>Amazing scientists</h1><imgsrc=\"https://i.imgur.com/MK3eW3As.jpg\"alt=\"Katherine Johnson\"/><imgsrc=\"https://i.imgur.com/MK3eW3As.jpg\"alt=\"Katherine Johnson\"/><imgsrc=\"https://i.imgur.com/MK3eW3As.jpg\"alt=\"Katherine Johnson\"/></section>\n```\n\n\n\n### Nesting and organizing components\n\n\nComponents are regular JavaScript functions, so you can keep multiple components in the same file. This is convenient when components are relatively small or tightly related to each other. If this file gets crowded, you can always move Profile to a separate file. You will learn how to do this shortly on the page about imports.\n\nBecause the Profile components are rendered inside Gallery \u2014even several times!\u2014we can say that Gallery is a parent component, rendering each Profile as a \u201cchild\u201d. This is part of the magic of React: you can define a component once, and then use it in as many places and as many times as you like.\n\n\n### Pitfall\n\n\nComponents can render other components, but you must never nest their definitions:\n\n\n```javascript\nexportdefaultfunctionGallery(){// \ud83d\udd34 Never define a component inside another component!functionProfile(){// ...}// ...}\n```\n\n\nThe snippet above is very slow and causes bugs. Instead, define every component at the top level:\n\n\n```javascript\nexportdefaultfunctionGallery(){// ...}// \u2705 Declare components at the top levelfunctionProfile(){// ...}\n```\n\n\nWhen a child component needs some data from a parent, pass it by props instead of nesting definitions.\n\nYour React application begins at a \u201croot\u201d component. Usually, it is created automatically when you start a new project. For example, if you use CodeSandbox or if you use the framework Next.js , the root component is defined in pages/index.js . In these examples, you\u2019ve been exporting root components.\n\nMost React apps use components all the way down. This means that you won\u2019t only use components for reusable pieces like buttons, but also for larger pieces like sidebars, lists, and ultimately, complete pages! Components are a handy way to organize UI code and markup, even if some of them are only used once.\n\nReact-based frameworks take this a step further. Instead of using an empty HTML file and letting React \u201ctake over\u201d managing the page with JavaScript, they also generate the HTML automatically from your React components. This allows your app to show some content before the JavaScript code loads.\n\nStill, many websites only use React to add interactivity to existing HTML pages. They have many root components instead of a single one for the entire page. You can use as much\u2014or as little\u2014React as you need.", "source": "https://react.dev/learn/your-first-component", "category": "Your First Component"}
